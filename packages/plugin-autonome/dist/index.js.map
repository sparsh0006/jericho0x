{"version":3,"sources":["../src/actions/launchAgent.ts","../src/index.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n    ActionExample,\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\n\r\nexport interface LaunchAgentContent extends Content {\r\n    name: string;\r\n    config: string;\r\n}\r\n\r\nfunction isLaunchAgentContent(content: any): content is LaunchAgentContent {\r\n    elizaLogger.log(\"Content for launchAgent\", content);\r\n    return typeof content.name === \"string\" && typeof content.config === \"string\";\r\n}\r\n\r\nconst launchTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"name\": \"xiaohuo\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested agent launch:\r\n- Agent name\r\n- Character json config\r\n`;\r\n\r\nexport default {\r\n    name: \"LAUNCH_AGENT\",\r\n    similes: [\"CREATE_AGENT\", \"DEPLOY_AGENT\", \"DEPLOY_ELIZA\", \"DEPLOY_BOT\"],\r\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\r\n        return true;\r\n    },\r\n    description: \"Launch an Eliza agent\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting LAUNCH_AGENT handler...\");\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose launch context\r\n        const launchContext = composeContext({\r\n            state,\r\n            template: launchTemplate,\r\n        });\r\n\r\n        // Generate launch content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: launchContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate launch content\r\n        if (!isLaunchAgentContent(content)) {\r\n            elizaLogger.error(\"Invalid launch content\", content);\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process launch agent request. Invalid content provided.\",\r\n                    content: { error: \"Invalid launch agent content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        const autonomeJwt = runtime.getSetting(\"AUTONOME_JWT_TOKEN\");\r\n        const autonomeRpc = runtime.getSetting(\"AUTONOME_RPC\");\r\n\r\n        const requestBody = {\r\n            name: content.name,\r\n            config: content.config,\r\n            creationMethod: 2,\r\n            envList: {},\r\n            templateId: \"Eliza\",\r\n        };\r\n\r\n        const sendPostRequest = async () => {\r\n            try {\r\n                const response = await axios.post(autonomeRpc, requestBody, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${autonomeJwt}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                });\r\n                return response;\r\n            } catch (error) {\r\n                console.error(\"Error making RPC call:\", error);\r\n            }\r\n        };\r\n\r\n        try {\r\n            const resp = await sendPostRequest();\r\n            if (resp && resp.data && resp.data.app && resp.data.app.id) {\r\n                elizaLogger.log(\r\n                    \"Launching successful, please find your agent on\"\r\n                );\r\n                elizaLogger.log(\r\n                    \"https://dev.autonome.fun/autonome/\" +\r\n                        resp.data.app.id +\r\n                        \"/details\"\r\n                );\r\n            }\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully launch agent ${content.name}`,\r\n                    content: {\r\n                        success: true,\r\n                        appId:\r\n                            \"https://dev.autonome.fun/autonome/\" +\r\n                            resp.data.app.id +\r\n                            \"/details\",\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                elizaLogger.error(\"Error during launching agent\");\r\n                elizaLogger.error(error);\r\n                callback({\r\n                    text: `Error launching agent: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Launch an agent, name is xiaohuo\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"I'll launch the agent now...\",\r\n                    action: \"LAUNCH_AGENT\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully launch agent, id is ba2e8369-e256-4a0d-9f90-9c64e306dc9f\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} satisfies Action;\r\n\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport launchAgent from \"./actions/launchAgent\";\r\n\r\nexport const autonomePlugin: Plugin = {\r\n    name: \"autonome\",\r\n    description: \"Autonome Plugin for Eliza\",\r\n    actions: [launchAgent],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default autonomePlugin;\r\n"],"mappings":"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","names":[]}