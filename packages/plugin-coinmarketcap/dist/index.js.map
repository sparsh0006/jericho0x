{"version":3,"sources":["../src/actions/getPrice/index.ts","../src/environment.ts","../src/actions/getPrice/examples.ts","../src/actions/getPrice/service.ts","../src/actions/getPrice/template.ts","../src/actions/getPrice/validation.ts","../src/index.ts"],"sourcesContent":["import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { validateCoinMarketCapConfig } from \"../../environment\";\r\nimport { priceExamples } from \"./examples\";\r\nimport { createPriceService } from \"./service\";\r\nimport { getPriceTemplate } from \"./template\";\r\nimport { GetPriceContent } from \"./types\";\r\nimport { isGetPriceContent } from \"./validation\";\r\n\r\nexport default {\r\n    name: \"GET_PRICE\",\r\n    similes: [\r\n        \"CHECK_PRICE\",\r\n        \"PRICE_CHECK\",\r\n        \"GET_CRYPTO_PRICE\",\r\n        \"CHECK_CRYPTO_PRICE\",\r\n        \"GET_TOKEN_PRICE\",\r\n        \"CHECK_TOKEN_PRICE\",\r\n    ],\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        await validateCoinMarketCapConfig(runtime);\r\n        return true;\r\n    },\r\n    description: \"Get the current price of a cryptocurrency from CoinMarketCap\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting CoinMarketCap GET_PRICE handler...\");\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        try {\r\n            // Compose and generate price check content\r\n            const priceContext = composeContext({\r\n                state,\r\n                template: getPriceTemplate,\r\n            });\r\n\r\n            const content = (await generateObjectDeprecated({\r\n                runtime,\r\n                context: priceContext,\r\n                modelClass: ModelClass.SMALL,\r\n            })) as unknown as GetPriceContent;\r\n\r\n            // Validate content\r\n            if (!isGetPriceContent(content)) {\r\n                throw new Error(\"Invalid price check content\");\r\n            }\r\n\r\n            // Get price from CoinMarketCap\r\n            const config = await validateCoinMarketCapConfig(runtime);\r\n\r\n            const priceService = createPriceService(\r\n                config.COINMARKETCAP_API_KEY\r\n            );\r\n\r\n            try {\r\n                const priceData = await priceService.getPrice(\r\n                    content.symbol,\r\n                    content.currency\r\n                );\r\n                elizaLogger.success(\r\n                    `Price retrieved successfully! ${content.symbol}: ${priceData.price} ${content.currency.toUpperCase()}`\r\n                );\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `The current price of ${content.symbol} is ${priceData.price} ${content.currency.toUpperCase()}`,\r\n                        content: {\r\n                            symbol: content.symbol,\r\n                            currency: content.currency,\r\n                            ...priceData,\r\n                        },\r\n                    });\r\n                }\r\n\r\n                return true;\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error in GET_PRICE handler:\", error);\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error fetching price: ${error.message}`,\r\n                        content: { error: error.message },\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in GET_PRICE handler:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error fetching price: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: priceExamples,\r\n} as Action;\r\n","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nexport const coinmarketcapEnvSchema = z.object({\r\n    COINMARKETCAP_API_KEY: z\r\n        .string()\r\n        .min(1, \"CoinMarketCap API key is required\"),\r\n});\r\n\r\nexport type CoinMarketCapConfig = z.infer<typeof coinmarketcapEnvSchema>;\r\n\r\nexport async function validateCoinMarketCapConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<CoinMarketCapConfig> {\r\n    try {\r\n        const config = {\r\n            COINMARKETCAP_API_KEY: runtime.getSetting(\"COINMARKETCAP_API_KEY\"),\r\n        };\r\n\r\n        return coinmarketcapEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `CoinMarketCap configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n","import { ActionExample } from \"@elizaos/core\";\r\n\r\nexport const priceExamples: ActionExample[][] = [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"What's the current price of Bitcoin?\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"Let me check the current Bitcoin price for you.\",\r\n                action: \"GET_PRICE\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"The current price of BTC is 65,432.21 USD\",\r\n            },\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"Check ETH price in EUR\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"I'll check the current Ethereum price in EUR.\",\r\n                action: \"GET_PRICE\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"The current price of ETH is 2,345.67 EUR\",\r\n            },\r\n        },\r\n    ],\r\n];\r\n","import axios from \"axios\";\r\nimport { ApiResponse, PriceData } from \"./types\";\r\n\r\nconst BASE_URL = \"https://pro-api.coinmarketcap.com/v1\";\r\n\r\nexport const createPriceService = (apiKey: string) => {\r\n    const client = axios.create({\r\n        baseURL: BASE_URL,\r\n        headers: {\r\n            \"X-CMC_PRO_API_KEY\": apiKey,\r\n            Accept: \"application/json\",\r\n        },\r\n    });\r\n\r\n    const getPrice = async (\r\n        symbol: string,\r\n        currency: string\r\n    ): Promise<PriceData> => {\r\n        const normalizedSymbol = symbol.toUpperCase().trim();\r\n        const normalizedCurrency = currency.toUpperCase().trim();\r\n\r\n        try {\r\n            const response = await client.get<ApiResponse>(\r\n                \"/cryptocurrency/quotes/latest\",\r\n                {\r\n                    params: {\r\n                        symbol: normalizedSymbol,\r\n                        convert: normalizedCurrency,\r\n                    },\r\n                }\r\n            );\r\n\r\n            console.log(\r\n                \"API Response:\",\r\n                JSON.stringify(response.data, null, 2)\r\n            );\r\n\r\n            const symbolData = response.data.data[normalizedSymbol];\r\n            if (!symbolData) {\r\n                throw new Error(\r\n                    `No data found for symbol: ${normalizedSymbol}`\r\n                );\r\n            }\r\n\r\n            const quoteData = symbolData.quote[normalizedCurrency];\r\n            if (!quoteData) {\r\n                throw new Error(\r\n                    `No quote data found for currency: ${normalizedCurrency}`\r\n                );\r\n            }\r\n\r\n            return {\r\n                price: quoteData.price,\r\n                marketCap: quoteData.market_cap,\r\n                volume24h: quoteData.volume_24h,\r\n                percentChange24h: quoteData.percent_change_24h,\r\n            };\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                const errorMessage =\r\n                    error.response?.data?.status?.error_message ||\r\n                    error.message;\r\n                console.error(\"API Error:\", errorMessage);\r\n                throw new Error(`API Error: ${errorMessage}`);\r\n            }\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return { getPrice };\r\n};\r\n","export const getPriceTemplate = `Respond with a JSON object containing BOTH symbol and currency. Currency must default to \"USD\" if not specified.\r\n\r\nHere are the cryptocurrency symbol mappings:\r\n- bitcoin/btc -> BTC\r\n- ethereum/eth -> ETH\r\n- solana/sol -> SOL\r\n- cardano/ada -> ADA\r\n- ripple/xrp -> XRP\r\n- dogecoin/doge -> DOGE\r\n- polkadot/dot -> DOT\r\n- usdc -> USDC\r\n- tether/usdt -> USDT\r\n\r\nIMPORTANT: Response must ALWAYS include both \"symbol\" and \"currency\" fields.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"symbol\": \"BTC\",\r\n    \"currency\": \"USD\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nExtract the cryptocurrency from the most recent message. Always include currency (default \"USD\").\r\nRespond with a JSON markdown block containing both symbol and currency.`;\r\n","import { z } from \"zod\";\r\nimport { GetPriceContent } from \"./types\";\r\n\r\nexport const GetPriceSchema = z.object({\r\n    symbol: z.string(),\r\n    currency: z.string().default(\"USD\"),\r\n});\r\n\r\nexport function isGetPriceContent(\r\n    content: GetPriceContent\r\n): content is GetPriceContent {\r\n    return (\r\n        typeof content.symbol === \"string\" &&\r\n        typeof content.currency === \"string\"\r\n    );\r\n}\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport getPrice from \"./actions/getPrice\";\r\n\r\nexport const coinmarketcapPlugin: Plugin = {\r\n    name: \"coinmarketcap\",\r\n    description: \"CoinMarketCap Plugin for Eliza\",\r\n    actions: [getPrice],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default coinmarketcapPlugin;\r\n"],"mappings":"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","names":["z"]}