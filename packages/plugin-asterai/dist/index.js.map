{"version":3,"sources":["../src/providers/asterai.provider.ts","../src/environment.ts","../src/actions/query.ts","../src/index.ts"],"sourcesContent":["import {\r\n    elizaLogger,\r\n    IAgentRuntime,\r\n    Memory,\r\n    Provider,\r\n    State, UUID,\r\n} from \"@elizaos/core\";\r\nimport {validateAsteraiConfig} from \"../environment.ts\";\r\nimport {getInitAsteraiClient} from \"../index.ts\";\r\n\r\nconst asteraiProvider: Provider = {\r\n    get: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State\r\n    ): Promise<string | null> => {\r\n        const hasConfiguredEnv =\r\n          !!runtime.getSetting(\"ASTERAI_AGENT_ID\") &&\r\n          !!runtime.getSetting(\"ASTERAI_PUBLIC_QUERY_KEY\");\r\n        if (!hasConfiguredEnv) {\r\n            elizaLogger.error(\r\n                \"ASTERAI_AGENT_ID or ASTERAI_PUBLIC_QUERY_KEY \" +\r\n                \"not configured, skipping provider\"\r\n            );\r\n            return null;\r\n        }\r\n        const config = await validateAsteraiConfig(runtime);\r\n        const asteraiClient = getInitAsteraiClient(\r\n          config.ASTERAI_AGENT_ID,\r\n          config.ASTERAI_PUBLIC_QUERY_KEY\r\n        );\r\n        if (!asteraiClient) {\r\n            elizaLogger.error(\"asteraiClient is not initialised\");\r\n            return null;\r\n        }\r\n        const agentId = runtime.getSetting(\"ASTERAI_AGENT_ID\") as UUID;\r\n        let agentSummaryMemory = await runtime.knowledgeManager.getMemoryById(agentId);\r\n        if (!agentSummaryMemory) {\r\n            // Fetch & set summary memory.\r\n            const summary = await asteraiClient.fetchSummary();\r\n            elizaLogger.debug(\"asterai agent summary fetched:\", summary);\r\n            await runtime.knowledgeManager.createMemory({\r\n                id: agentId,\r\n                userId: message.userId,\r\n                agentId: message.agentId,\r\n                roomId: message.roomId,\r\n                createdAt: Date.now(),\r\n                content: {\r\n                    text: summary\r\n                }\r\n            });\r\n            agentSummaryMemory = await runtime.knowledgeManager.getMemoryById(agentId);\r\n        }\r\n        if (!agentSummaryMemory) {\r\n            elizaLogger.error(\"failed to initialise agent's summary memory\");\r\n            return null;\r\n        }\r\n        return agentSummaryMemory.content.text;\r\n    },\r\n};\r\n\r\n// Module exports\r\nexport { asteraiProvider };\r\n","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nconst envSchema = z.object({\r\n    ASTERAI_AGENT_ID: z\r\n        .string()\r\n        .min(1, \"ASTERAI_AGENT_ID is required\"),\r\n    ASTERAI_PUBLIC_QUERY_KEY: z\r\n        .string()\r\n        .min(1, \"ASTERAI_PUBLIC_QUERY_KEY is required\"),\r\n});\r\n\r\nexport type AsteraiConfig = z.infer<typeof envSchema>;\r\n\r\nexport async function validateAsteraiConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<AsteraiConfig> {\r\n    try {\r\n        const config = {\r\n            ASTERAI_AGENT_ID:\r\n                runtime.getSetting(\"ASTERAI_AGENT_ID\") ||\r\n                process.env.ASTERAI_AGENT_ID,\r\n            ASTERAI_PUBLIC_QUERY_KEY:\r\n                runtime.getSetting(\"ASTERAI_PUBLIC_QUERY_KEY\") || process.env.ASTERAI_PUBLIC_QUERY_KEY,\r\n        };\r\n\r\n        return envSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `Asterai plugin configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n","import {\r\n    elizaLogger,\r\n    type Action,\r\n    type ActionExample,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\nimport { validateAsteraiConfig } from \"../environment\";\r\nimport {getInitAsteraiClient} from \"../index.ts\";\r\n\r\nexport const queryAction = {\r\n    name: \"QUERY_ASTERAI_AGENT\",\r\n    similes: [\r\n        \"MESSAGE_ASTERAI_AGENT\",\r\n        \"TALK_TO_ASTERAI_AGENT\",\r\n        \"SEND_MESSAGE_TO_ASTERAI_AGENT\",\r\n        \"COMMUNICATE_WITH_ASTERAI_AGENT\",\r\n    ],\r\n    description:\r\n        \"Call this action to send a message to the asterai agent which \" +\r\n        \"has access to external plugins and functionality to answer \" +\r\n        \"the user you are assisting, to help perform a workflow task, etc.\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        const config = await validateAsteraiConfig(runtime);\r\n        getInitAsteraiClient(\r\n          config.ASTERAI_AGENT_ID,\r\n          config.ASTERAI_PUBLIC_QUERY_KEY\r\n        );\r\n        return true;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        const config = await validateAsteraiConfig(runtime);\r\n        const asteraiClient = getInitAsteraiClient(\r\n          config.ASTERAI_AGENT_ID,\r\n          config.ASTERAI_PUBLIC_QUERY_KEY\r\n        );\r\n        elizaLogger.debug(\"called QUERY_ASTERAI_AGENT action with message:\", message.content);\r\n        const response = await asteraiClient.query({\r\n            query: message.content.text\r\n        });\r\n        const textResponse = await response.text();\r\n        callback({\r\n            text: textResponse\r\n        });\r\n        return true;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"How's the weather in LA?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Let me check that for you, just a moment.\",\r\n                    action: \"QUERY_ASTERAI_AGENT\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import {asteraiProvider} from \"./providers/asterai.provider.ts\";\r\nimport type { Plugin } from \"@elizaos/core\";\r\nimport { queryAction } from \"./actions/query\";\r\nimport { AsteraiClient } from \"@asterai/client\";\r\n\r\nexport * from \"./environment\";\r\nexport * from \"./providers/asterai.provider\";\r\n\r\nlet asteraiClient: AsteraiClient | null = null;\r\n\r\nexport const getInitAsteraiClient = (\r\n  agentId: string,\r\n  publicQueryKey: string\r\n): AsteraiClient => {\r\n    if (!asteraiClient) {\r\n        asteraiClient = new AsteraiClient({\r\n            appId: agentId,\r\n            queryKey: publicQueryKey,\r\n        })\r\n    }\r\n    return asteraiClient;\r\n};\r\n\r\nexport const asteraiPlugin: Plugin = {\r\n    name: \"asterai\",\r\n    description: \"asterai Plugin for Eliza\",\r\n    providers: [asteraiProvider],\r\n    actions: [queryAction],\r\n    evaluators: [],\r\n    services: [],\r\n};\r\n\r\nexport default asteraiPlugin;\r\n"],"mappings":"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","names":["asteraiClient","elizaLogger","asteraiClient","elizaLogger"]}