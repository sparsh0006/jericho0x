{"version":3,"sources":["../src/actions/transfer.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/types/index.ts","../src/index.ts"],"sourcesContent":["import { ByteArray, formatEther, parseEther, type Hex } from \"viem\";\r\nimport {\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n} from \"@elizaos/core\";\r\n\r\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\r\nimport type { Transaction, TransferParams } from \"../types\";\r\nimport { transferTemplate } from \"../templates\";\r\n\r\nexport { transferTemplate };\r\n\r\n// Exported for tests\r\nexport class TransferAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async transfer(params: TransferParams): Promise<Transaction> {\r\n        const walletClient = this.walletProvider.getWalletClient(\r\n            params.fromChain\r\n        );\r\n\r\n        console.log(\r\n            `Transferring: ${params.amount} tokens from (${walletClient.account.address} to (${params.toAddress} on ${params.fromChain})`\r\n        );\r\n\r\n        if (!params.data) {\r\n            params.data = \"0x\";\r\n        }\r\n\r\n        try {\r\n            const hash = await walletClient.sendTransaction({\r\n                account: walletClient.account,\r\n                to: params.toAddress,\r\n                value: parseEther(params.amount),\r\n                data: params.data as Hex,\r\n                kzg: {\r\n                    blobToKzgCommitment: function (_: ByteArray): ByteArray {\r\n                        throw new Error(\"Function not implemented.\");\r\n                    },\r\n                    computeBlobKzgProof: function (\r\n                        _blob: ByteArray,\r\n                        _commitment: ByteArray\r\n                    ): ByteArray {\r\n                        throw new Error(\"Function not implemented.\");\r\n                    },\r\n                },\r\n                chain: undefined,\r\n            });\r\n\r\n            return {\r\n                hash,\r\n                from: walletClient.account.address,\r\n                to: params.toAddress,\r\n                value: parseEther(params.amount),\r\n                data: params.data as Hex,\r\n            };\r\n        } catch (error) {\r\n            throw new Error(`Transfer failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst buildTransferDetails = async (\r\n    state: State,\r\n    runtime: IAgentRuntime,\r\n    wp: WalletProvider\r\n): Promise<TransferParams> => {\r\n    const context = composeContext({\r\n        state,\r\n        template: transferTemplate,\r\n    });\r\n\r\n    const chains = Object.keys(wp.chains);\r\n\r\n    const contextWithChains = context.replace(\r\n        \"SUPPORTED_CHAINS\",\r\n        chains.map((item) => `\"${item}\"`).join(\"|\")\r\n    );\r\n\r\n    const transferDetails = (await generateObjectDeprecated({\r\n        runtime,\r\n        context: contextWithChains,\r\n        modelClass: ModelClass.SMALL,\r\n    })) as TransferParams;\r\n\r\n    const existingChain = wp.chains[transferDetails.fromChain];\r\n\r\n    if (!existingChain) {\r\n        throw new Error(\r\n            \"The chain \" +\r\n                transferDetails.fromChain +\r\n                \" not configured yet. Add the chain or choose one from configured: \" +\r\n                chains.toString()\r\n        );\r\n    }\r\n\r\n    return transferDetails;\r\n};\r\n\r\nexport const transferAction = {\r\n    name: \"transfer\",\r\n    description: \"Transfer tokens between addresses on the same chain\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        console.log(\"Transfer action handler called\");\r\n        const walletProvider = initWalletProvider(runtime);\r\n        const action = new TransferAction(walletProvider);\r\n\r\n        // Compose transfer context\r\n        const paramOptions = await buildTransferDetails(\r\n            state,\r\n            runtime,\r\n            walletProvider\r\n        );\r\n\r\n        try {\r\n            const transferResp = await action.transfer(paramOptions);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully transferred ${paramOptions.amount} tokens to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.hash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: transferResp.hash,\r\n                        amount: formatEther(transferResp.value),\r\n                        recipient: transferResp.to,\r\n                        chain: paramOptions.fromChain,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error during token transfer:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: transferTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"ARTHERA_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"I'll help you transfer 1 AA to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                    action: \"SEND_TOKENS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Transfer 1 AA to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                    action: \"SEND_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\r\n};\r\n","import {\r\n    createPublicClient,\r\n    createWalletClient,\r\n    formatUnits,\r\n    http,\r\n} from \"viem\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport type { IAgentRuntime, Provider, Memory, State } from \"@elizaos/core\";\r\nimport type {\r\n    Address,\r\n    WalletClient,\r\n    PublicClient,\r\n    Chain,\r\n    HttpTransport,\r\n    Account,\r\n    PrivateKeyAccount,\r\n} from \"viem\";\r\nimport * as viemChains from \"viem/chains\";\r\n\r\nimport type { SupportedChain } from \"../types\";\r\n\r\nexport class WalletProvider {\r\n    private currentChain: SupportedChain = \"arthera\";\r\n    chains: Record<string, Chain> = { arthera: viemChains.arthera };\r\n    account: PrivateKeyAccount;\r\n\r\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\r\n        this.setAccount(privateKey);\r\n        this.setChains(chains);\r\n\r\n        if (chains && Object.keys(chains).length > 0) {\r\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\r\n        }\r\n    }\r\n\r\n    getAddress(): Address {\r\n        return this.account.address;\r\n    }\r\n\r\n    getCurrentChain(): Chain {\r\n        return this.chains[this.currentChain];\r\n    }\r\n\r\n    getPublicClient(\r\n        chainName: SupportedChain\r\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\r\n        const transport = this.createHttpTransport(chainName);\r\n\r\n        const publicClient = createPublicClient({\r\n            chain: this.chains[chainName],\r\n            transport,\r\n        });\r\n        return publicClient;\r\n    }\r\n\r\n    getWalletClient(chainName: SupportedChain): WalletClient {\r\n        const transport = this.createHttpTransport(chainName);\r\n\r\n        const walletClient = createWalletClient({\r\n            chain: this.chains[chainName],\r\n            transport,\r\n            account: this.account,\r\n        });\r\n\r\n        return walletClient;\r\n    }\r\n\r\n    getChainConfigs(chainName: SupportedChain): Chain {\r\n        const chain = viemChains[chainName];\r\n\r\n        if (!chain?.id) {\r\n            throw new Error(\"Invalid chain name\");\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    async getWalletBalance(): Promise<string | null> {\r\n        try {\r\n            const client = this.getPublicClient(this.currentChain);\r\n            const balance = await client.getBalance({\r\n                address: this.account.address,\r\n            });\r\n            return formatUnits(balance, 18);\r\n        } catch (error) {\r\n            console.error(\"Error getting wallet balance:\", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async getWalletBalanceForChain(\r\n        chainName: SupportedChain\r\n    ): Promise<string | null> {\r\n        try {\r\n            const client = this.getPublicClient(chainName);\r\n            const balance = await client.getBalance({\r\n                address: this.account.address,\r\n            });\r\n            return formatUnits(balance, 18);\r\n        } catch (error) {\r\n            console.error(\"Error getting wallet balance:\", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private setAccount = (pk: `0x${string}`) => {\r\n        this.account = privateKeyToAccount(pk);\r\n    };\r\n\r\n    private setChains = (chains?: Record<string, Chain>) => {\r\n        if (!chains) {\r\n            return;\r\n        }\r\n        Object.keys(chains).forEach((chain: string) => {\r\n            this.chains[chain] = chains[chain];\r\n        });\r\n    };\r\n\r\n    private setCurrentChain = (chain: SupportedChain) => {\r\n        this.currentChain = chain;\r\n    };\r\n\r\n    private createHttpTransport = (chainName: SupportedChain) => {\r\n        const chain = this.chains[chainName];\r\n\r\n        if (chain.rpcUrls.custom) {\r\n            return http(chain.rpcUrls.custom.http[0]);\r\n        }\r\n        return http(chain.rpcUrls.default.http[0]);\r\n    };\r\n\r\n    static genChainFromName(\r\n        chainName: string,\r\n        customRpcUrl?: string | null\r\n    ): Chain {\r\n        const baseChain = viemChains[chainName];\r\n\r\n        if (!baseChain?.id) {\r\n            throw new Error(\"Invalid chain name\");\r\n        }\r\n\r\n        const viemChain: Chain = customRpcUrl\r\n            ? {\r\n                  ...baseChain,\r\n                  rpcUrls: {\r\n                      ...baseChain.rpcUrls,\r\n                      custom: {\r\n                          http: [customRpcUrl],\r\n                      },\r\n                  },\r\n              }\r\n            : baseChain;\r\n\r\n        return viemChain;\r\n    }\r\n}\r\n\r\nconst genChainsFromRuntime = (\r\n    runtime: IAgentRuntime\r\n): Record<string, Chain> => {\r\n    const chainNames = [\"arthera\"];\r\n    const chains = {};\r\n\r\n    chainNames.forEach((chainName) => {\r\n        const rpcUrl = runtime.getSetting(\r\n            \"ETHEREUM_PROVIDER_\" + chainName.toUpperCase()\r\n        );\r\n        const chain = WalletProvider.genChainFromName(chainName, rpcUrl);\r\n        chains[chainName] = chain;\r\n    });\r\n\r\n    return chains;\r\n};\r\n\r\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\r\n    const privateKey = runtime.getSetting(\"ARTHERA_PRIVATE_KEY\");\r\n    if (!privateKey) {\r\n        throw new Error(\"ARTHERA_PRIVATE_KEY is missing\");\r\n    }\r\n\r\n    const chains = genChainsFromRuntime(runtime);\r\n\r\n    return new WalletProvider(privateKey as `0x${string}`, chains);\r\n};\r\n\r\nexport const artheraWalletProvider: Provider = {\r\n    async get(\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State\r\n    ): Promise<string | null> {\r\n        try {\r\n            const walletProvider = initWalletProvider(runtime);\r\n            const address = walletProvider.getAddress();\r\n            const balance = await walletProvider.getWalletBalance();\r\n            const chain = walletProvider.getCurrentChain();\r\n            return `Arthera Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\r\n        } catch (error) {\r\n            console.error(\"Error in Arthera wallet provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n","export const transferTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested transfer:\r\n- Chain to execute on: Must be one of [\"arthera\", \"base\", ...] (like in viem/chains)\r\n- Amount to transfer: Must be a string representing the amount in AA (only number without coin symbol, e.g., \"0.1\")\r\n- Recipient address: Must be a valid Arthera address starting with \"0x\"\r\n- Token symbol or address (if not native token): Optional, leave as null for AA transfers\r\n\r\nRespond with a JSON markdown block containing only the extracted values. All fields except 'token' are required:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"fromChain\": SUPPORTED_CHAINS,\r\n    \"amount\": string,\r\n    \"toAddress\": string,\r\n    \"token\": string | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n","import type {\r\n    Account,\r\n    Address,\r\n    Chain,\r\n    Hash,\r\n    HttpTransport,\r\n    PublicClient,\r\n    WalletClient,\r\n} from \"viem\";\r\nimport * as viemChains from \"viem/chains\";\r\n\r\nconst _SupportedChainList = Object.keys(viemChains) as Array<\r\n    keyof typeof viemChains\r\n>;\r\nexport type SupportedChain = (typeof _SupportedChainList)[number];\r\n\r\n// Transaction types\r\nexport interface Transaction {\r\n    hash: Hash;\r\n    from: Address;\r\n    to: Address;\r\n    value: bigint;\r\n    data?: `0x${string}`;\r\n    chainId?: number;\r\n}\r\n\r\n// Chain configuration\r\nexport interface ChainMetadata {\r\n    chainId: number;\r\n    name: string;\r\n    chain: Chain;\r\n    rpcUrl: string;\r\n    nativeCurrency: {\r\n        name: string;\r\n        symbol: string;\r\n        decimals: number;\r\n    };\r\n    blockExplorerUrl: string;\r\n}\r\n\r\nexport interface ChainConfig {\r\n    chain: Chain;\r\n    publicClient: PublicClient<HttpTransport, Chain, Account | undefined>;\r\n    walletClient?: WalletClient;\r\n}\r\n\r\n// Action parameters\r\nexport interface TransferParams {\r\n    fromChain: SupportedChain;\r\n    toAddress: Address;\r\n    amount: string;\r\n    data?: `0x${string}`;\r\n}\r\n\r\n// Plugin configuration\r\nexport interface ArtheraPluginConfig {\r\n    rpcUrl?: {\r\n        arthera?: string;\r\n    };\r\n    secrets?: {\r\n        ARTHERA_PRIVATE_KEY: string;\r\n    };\r\n    testMode?: boolean;\r\n    multicall?: {\r\n        batchSize?: number;\r\n        wait?: number;\r\n    };\r\n}\r\n\r\nexport interface ProviderError extends Error {\r\n    code?: number;\r\n    data?: unknown;\r\n}\r\n","export * from \"./actions/transfer\";\r\nexport * from \"./providers/wallet\";\r\nexport * from \"./types\";\r\n\r\nimport type { Plugin } from \"@elizaos/core\";\r\nimport { transferAction } from \"./actions/transfer\";\r\nimport { artheraWalletProvider } from \"./providers/wallet\";\r\n\r\nexport const artheraPlugin: Plugin = {\r\n    name: \"arthera\",\r\n    description: \"Arthera blockchain integration plugin\",\r\n    providers: [artheraWalletProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [transferAction],\r\n};\r\n\r\nexport default artheraPlugin;\r\n"],"mappings":"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","names":["viemChains"]}