{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    Plugin,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { fal } from \"@fal-ai/client\";\r\nimport { FAL_CONSTANTS } from \"./constants\";\r\n\r\nimport * as fs from \"fs\";\r\nimport { Buffer } from \"buffer\";\r\nimport * as path from \"path\";\r\nimport * as process from \"process\";\r\n\r\nconst generate3D = async (prompt: string, runtime: IAgentRuntime) => {\r\n    process.env[\"FAL_KEY\"] =\r\n        FAL_CONSTANTS.API_KEY_SETTING || runtime.getSetting(\"FAL_API_KEY\");\r\n\r\n    try {\r\n        elizaLogger.log(\"Starting 3D generation with prompt:\", prompt);\r\n\r\n        const response = await fal.subscribe(FAL_CONSTANTS.API_3D_ENDPOINT, {\r\n            input: {\r\n                prompt: prompt,\r\n                input_image_urls: [],\r\n                condition_mode: \"concat\", // fuse concat\r\n                geometry_file_format: \"glb\", // glb usdz fbx obj stl\r\n                material: \"PBR\", // PBR Shaded\r\n                quality: \"medium\", // extra-low, low, medium, high\r\n                tier: \"Regular\", // Regular, Sketch\r\n            },\r\n            logs: true,\r\n            onQueueUpdate: (update) => {\r\n                if (update.status === \"IN_PROGRESS\") {\r\n                    update.logs\r\n                        .map((log) => log.message)\r\n                        .forEach(elizaLogger.log);\r\n                }\r\n            },\r\n        });\r\n\r\n        elizaLogger.log(\r\n            \"Generation request successful, received response:\",\r\n            response\r\n        );\r\n\r\n        return {\r\n            success: true,\r\n            url: response.data.model_mesh.url,\r\n            file_name: response.data.model_mesh.file_name,\r\n        };\r\n    } catch (error) {\r\n        elizaLogger.error(\"3D generation error:\", error);\r\n        return {\r\n            success: false,\r\n            error: error.message || \"Unknown error occurred\",\r\n        };\r\n    }\r\n};\r\n\r\nconst ThreeDGeneration: Action = {\r\n    name: \"GENERATE_3D\",\r\n    similes: [\r\n        \"3D_GENERATION\",\r\n        \"3D_GEN\",\r\n        \"CREATE_3D\",\r\n        \"MAKE_3D\",\r\n        \"TEXT23D\",\r\n        \"TEXT_TO_3D\",\r\n        \"3D_CREATE\",\r\n        \"3D_MAKE\",\r\n    ],\r\n    description: \"Generate a 3D object based on a text prompt\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.log(\"Validating 3D generation action\");\r\n        const FalApiKey = runtime.getSetting(\"FAL_API_KEY\");\r\n        elizaLogger.log(\"FAL_API_KEY present:\", !!FalApiKey);\r\n        return !!FalApiKey;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"3D generation request:\", message);\r\n\r\n        // Clean up the prompt by removing mentions and commands\r\n        const ThreeDPrompt = message.content.text\r\n            .replace(/<@\\d+>/g, \"\") // Remove mentions\r\n            .replace(/generate 3D|create 3D|make 3D|render 3D/gi, \"\") // Remove commands\r\n            .trim();\r\n\r\n        if (!ThreeDPrompt || ThreeDPrompt.length < 3) {\r\n            callback({\r\n                text: \"Could you please provide more details about what kind of 3D object you'd like me to generate? For example: 'Generate a lovely cat'\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        elizaLogger.log(\"3D prompt:\", ThreeDPrompt);\r\n\r\n        callback({\r\n            text: `I'll generate a 3D object based on your prompt: \"${ThreeDPrompt}\". This might take a few minutes...`,\r\n        });\r\n\r\n        try {\r\n            const result = await generate3D(ThreeDPrompt, runtime);\r\n\r\n            if (result.success && result.url && result.file_name) {\r\n                // Download the 3D file\r\n                const response = await fetch(result.url);\r\n                const arrayBuffer = await response.arrayBuffer();\r\n                const ThreeDFileName = `content_cache/generated_3d_${result.file_name}`;\r\n\r\n                // ensure the directory is existed\r\n                const directoryPath = path.dirname(ThreeDFileName);\r\n                if (!fs.existsSync(directoryPath)) {\r\n                    fs.mkdirSync(directoryPath, { recursive: true });\r\n                }\r\n\r\n                // Save 3D file\r\n                fs.writeFileSync(ThreeDFileName, Buffer.from(arrayBuffer));\r\n\r\n                callback(\r\n                    {\r\n                        text: \"Here's your generated 3D object!\",\r\n                        attachments: [\r\n                            {\r\n                                id: crypto.randomUUID(),\r\n                                url: result.url,\r\n                                title: \"Generated 3D\",\r\n                                source: \"ThreeDGeneration\",\r\n                                description: ThreeDPrompt,\r\n                                text: ThreeDPrompt,\r\n                            },\r\n                        ],\r\n                    },\r\n                    [ThreeDFileName]\r\n                ); // Add the 3D file to the attachments\r\n            } else {\r\n                callback({\r\n                    text: `3D generation failed: ${result.error}`,\r\n                    error: true,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(`Failed to generate 3D. Error: ${error}`);\r\n            callback({\r\n                text: `3D generation failed: ${error.message}`,\r\n                error: true,\r\n            });\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Generate a 3D object of a cat playing piano\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"I'll create a 3D object of a cat playing piano for you\",\r\n                    action: \"GENERATE_3D\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Can you make a 3D object of a anime character Goku?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"I'll generate a 3D object of a anime character Goku for you\",\r\n                    action: \"GENERATE_3D\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n} as Action;\r\n\r\nexport const ThreeDGenerationPlugin: Plugin = {\r\n    name: \"3DGeneration\",\r\n    description: \"Generate 3D using Hyper 3D\",\r\n    actions: [ThreeDGeneration],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n","export const FAL_CONSTANTS = {\r\n    API_3D_ENDPOINT: \"fal-ai/hyper3d/rodin\",\r\n    API_KEY_SETTING: \"FAL_API_KEY\", // The setting name to fetch from runtime\r\n};\r\n"],"mappings":"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","names":[]}