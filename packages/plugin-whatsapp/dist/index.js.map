{"version":3,"sources":["../src/client.ts","../src/handlers/message.handler.ts","../src/handlers/webhook.handler.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\nimport { WhatsAppConfig, WhatsAppMessage } from \"./types\";\r\n\r\nexport class WhatsAppClient {\r\n    private client: AxiosInstance;\r\n    private config: WhatsAppConfig;\r\n\r\n    constructor(config: WhatsAppConfig) {\r\n        this.config = config;\r\n        this.client = axios.create({\r\n            baseURL: \"https://graph.facebook.com/v17.0\",\r\n            headers: {\r\n                Authorization: `Bearer ${config.accessToken}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        });\r\n    }\r\n\r\n    async sendMessage(message: WhatsAppMessage): Promise<any> {\r\n        const endpoint = `/${this.config.phoneNumberId}/messages`;\r\n\r\n        const payload = {\r\n            messaging_product: \"whatsapp\",\r\n            recipient_type: \"individual\",\r\n            to: message.to,\r\n            type: message.type,\r\n            ...(message.type === \"text\"\r\n                ? { text: { body: message.content } }\r\n                : { template: message.content }),\r\n        };\r\n\r\n        return this.client.post(endpoint, payload);\r\n    }\r\n\r\n    async verifyWebhook(token: string): Promise<boolean> {\r\n        return token === this.config.webhookVerifyToken;\r\n    }\r\n}\r\n","import { WhatsAppClient } from \"../client\";\r\nimport { WhatsAppMessage } from \"../types\";\r\n\r\nexport class MessageHandler {\r\n    constructor(private client: WhatsAppClient) {}\r\n\r\n    async send(message: WhatsAppMessage): Promise<any> {\r\n        try {\r\n            const response = await this.client.sendMessage(message);\r\n            return response.data;\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                throw new Error(\r\n                    `Failed to send WhatsApp message: ${error.message}`\r\n                );\r\n            }\r\n            throw new Error(\"Failed to send WhatsApp message\");\r\n        }\r\n    }\r\n}\r\n","import { WhatsAppClient } from \"../client\";\r\nimport { WhatsAppWebhookEvent } from \"../types\";\r\n\r\nexport class WebhookHandler {\r\n    constructor(private client: WhatsAppClient) {}\r\n\r\n    async handle(event: WhatsAppWebhookEvent): Promise<void> {\r\n        try {\r\n            // Process messages\r\n            if (event.entry?.[0]?.changes?.[0]?.value?.messages) {\r\n                const messages = event.entry[0].changes[0].value.messages;\r\n                for (const message of messages) {\r\n                    await this.handleMessage(message);\r\n                }\r\n            }\r\n\r\n            // Process status updates\r\n            if (event.entry?.[0]?.changes?.[0]?.value?.statuses) {\r\n                const statuses = event.entry[0].changes[0].value.statuses;\r\n                for (const status of statuses) {\r\n                    await this.handleStatus(status);\r\n                }\r\n            }\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                throw new Error(\r\n                    `Failed to send WhatsApp message: ${error.message}`\r\n                );\r\n            }\r\n            throw new Error(\"Failed to send WhatsApp message\");\r\n        }\r\n    }\r\n\r\n    private async handleMessage(message: any): Promise<void> {\r\n        // Implement message handling logic\r\n        // This could emit events or trigger callbacks based on your framework's needs\r\n        console.log(\"Received message:\", message);\r\n    }\r\n\r\n    private async handleStatus(status: any): Promise<void> {\r\n        // Implement status update handling logic\r\n        // This could emit events or trigger callbacks based on your framework's needs\r\n        console.log(\"Received status update:\", status);\r\n    }\r\n}\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { WhatsAppClient } from \"./client\";\r\nimport { WhatsAppConfig, WhatsAppMessage, WhatsAppWebhookEvent } from \"./types\";\r\nimport { MessageHandler, WebhookHandler } from \"./handlers\";\r\n\r\nexport class WhatsAppPlugin implements Plugin {\r\n    private client: WhatsAppClient;\r\n    private messageHandler: MessageHandler;\r\n    private webhookHandler: WebhookHandler;\r\n\r\n    name: string;\r\n    description: string;\r\n\r\n    constructor(private config: WhatsAppConfig) {\r\n        this.name = \"WhatsApp Cloud API Plugin\";\r\n        this.description =\r\n            \"A plugin for integrating WhatsApp Cloud API with your application.\";\r\n        this.client = new WhatsAppClient(config);\r\n        this.messageHandler = new MessageHandler(this.client);\r\n        this.webhookHandler = new WebhookHandler(this.client);\r\n    }\r\n\r\n    async sendMessage(message: WhatsAppMessage): Promise<any> {\r\n        return this.messageHandler.send(message);\r\n    }\r\n\r\n    async handleWebhook(event: WhatsAppWebhookEvent): Promise<void> {\r\n        return this.webhookHandler.handle(event);\r\n    }\r\n\r\n    async verifyWebhook(token: string): Promise<boolean> {\r\n        return this.client.verifyWebhook(token);\r\n    }\r\n}\r\n\r\nexport * from \"./types\";\r\n"],"mappings":"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","names":[]}