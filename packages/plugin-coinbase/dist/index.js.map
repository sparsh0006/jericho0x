{"version":3,"sources":["../src/plugins/massPayments.ts","../src/types.ts","../../../node_modules/zod/lib/index.mjs","../src/templates.ts","../src/utils.ts","../src/plugins/commerce.ts","../src/plugins/trade.ts","../src/plugins/tokenContract.ts","../src/constants.ts","../src/plugins/webhooks.ts","../advanced-sdk-ts/src/jwt-generator.ts","../advanced-sdk-ts/src/constants.ts","../advanced-sdk-ts/src/rest/rest-base.ts","../advanced-sdk-ts/src/rest/errors.ts","../advanced-sdk-ts/src/rest/accounts.ts","../advanced-sdk-ts/src/rest/converts.ts","../advanced-sdk-ts/src/rest/dataAPI.ts","../advanced-sdk-ts/src/rest/fees.ts","../advanced-sdk-ts/src/rest/futures.ts","../advanced-sdk-ts/src/rest/orders.ts","../advanced-sdk-ts/src/rest/payments.ts","../advanced-sdk-ts/src/rest/perpetuals.ts","../advanced-sdk-ts/src/rest/portfolios.ts","../advanced-sdk-ts/src/rest/products.ts","../advanced-sdk-ts/src/rest/public.ts","../advanced-sdk-ts/src/rest/index.ts","../src/plugins/advancedTrade.ts","../src/index.ts"],"sourcesContent":["import { Coinbase, Wallet } from \"@coinbase/coinbase-sdk\";\r\nimport {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObject,\r\n    ModelClass,\r\n    Action,\r\n    IAgentRuntime,\r\n    Memory,\r\n    Provider,\r\n    State,\r\n    HandlerCallback,\r\n    Plugin,\r\n} from \"@elizaos/core\";\r\nimport {\r\n    TransferSchema,\r\n    isTransferContent,\r\n    TransferContent,\r\n    Transaction,\r\n} from \"../types\";\r\nimport { transferTemplate } from \"../templates\";\r\nimport { readFile } from \"fs/promises\";\r\nimport { parse } from \"csv-parse/sync\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nimport fs from \"fs\";\r\nimport { createArrayCsvWriter } from \"csv-writer\";\r\nimport {\r\n    appendTransactionsToCsv,\r\n    executeTransfer,\r\n    getCharityAddress,\r\n    getWalletDetails,\r\n    initializeWallet,\r\n} from \"../utils\";\r\n\r\n// Dynamically resolve the file path to the src/plugins directory\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\r\nconst csvFilePath = path.join(baseDir, \"transactions.csv\");\r\n\r\nexport const massPayoutProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.debug(\"Starting massPayoutProvider.get function\");\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n            elizaLogger.info(\"Reading CSV file from:\", csvFilePath);\r\n\r\n            // Ensure the CSV file exists\r\n            if (!fs.existsSync(csvFilePath)) {\r\n                elizaLogger.warn(\"CSV file not found. Creating a new one.\");\r\n                const csvWriter = createArrayCsvWriter({\r\n                    path: csvFilePath,\r\n                    header: [\r\n                        \"Address\",\r\n                        \"Amount\",\r\n                        \"Status\",\r\n                        \"Error Code\",\r\n                        \"Transaction URL\",\r\n                    ],\r\n                });\r\n                await csvWriter.writeRecords([]); // Create an empty file with headers\r\n                elizaLogger.info(\"New CSV file created with headers.\");\r\n            }\r\n\r\n            // Read and parse the CSV file\r\n            const csvData = await readFile(csvFilePath, \"utf-8\");\r\n            const records = parse(csvData, {\r\n                columns: true,\r\n                skip_empty_lines: true,\r\n            });\r\n\r\n            const { balances, transactions } = await getWalletDetails(runtime);\r\n\r\n            elizaLogger.info(\"Parsed CSV records:\", records);\r\n            elizaLogger.info(\"Current Balances:\", balances);\r\n            elizaLogger.info(\"Last Transactions:\", transactions);\r\n\r\n            return {\r\n                currentTransactions: records.map((record: any) => ({\r\n                    address: record[\"Address\"] || undefined,\r\n                    amount: parseFloat(record[\"Amount\"]) || undefined,\r\n                    status: record[\"Status\"] || undefined,\r\n                    errorCode: record[\"Error Code\"] || \"\",\r\n                    transactionUrl: record[\"Transaction URL\"] || \"\",\r\n                })),\r\n                balances,\r\n                transactionHistory: transactions,\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in massPayoutProvider:\", error);\r\n            return { csvRecords: [], balances: [], transactions: [] };\r\n        }\r\n    },\r\n};\r\n\r\nasync function executeMassPayout(\r\n    runtime: IAgentRuntime,\r\n    networkId: string,\r\n    receivingAddresses: string[],\r\n    transferAmount: number,\r\n    assetId: string\r\n): Promise<Transaction[]> {\r\n    elizaLogger.debug(\"Starting executeMassPayout function\");\r\n    const transactions: Transaction[] = [];\r\n    const assetIdLowercase = assetId.toLowerCase();\r\n    let sendingWallet: Wallet;\r\n    try {\r\n        elizaLogger.debug(\"Initializing sending wallet\");\r\n        sendingWallet = await initializeWallet(runtime, networkId);\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error initializing sending wallet:\", error);\r\n        throw error;\r\n    }\r\n    for (const address of receivingAddresses) {\r\n        elizaLogger.info(\"Processing payout for address:\", address);\r\n        if (address) {\r\n            try {\r\n                // Check balance before initiating transfer\r\n\r\n                const walletBalance =\r\n                    await sendingWallet.getBalance(assetIdLowercase);\r\n\r\n                elizaLogger.info(\"Wallet balance for asset:\", {\r\n                    assetId,\r\n                    walletBalance,\r\n                });\r\n\r\n                if (walletBalance.lessThan(transferAmount)) {\r\n                    const insufficientFunds = `Insufficient funds for address ${sendingWallet.getDefaultAddress()} to send to ${address}. Required: ${transferAmount}, Available: ${walletBalance}`;\r\n                    elizaLogger.error(insufficientFunds);\r\n\r\n                    transactions.push({\r\n                        address,\r\n                        amount: transferAmount,\r\n                        status: \"Failed\",\r\n                        errorCode: insufficientFunds,\r\n                        transactionUrl: null,\r\n                    });\r\n                    continue;\r\n                }\r\n\r\n                // Execute the transfer\r\n                const transfer = await executeTransfer(\r\n                    sendingWallet,\r\n                    transferAmount,\r\n                    assetIdLowercase,\r\n                    address\r\n                );\r\n\r\n                transactions.push({\r\n                    address,\r\n                    amount: transfer.getAmount().toNumber(),\r\n                    status: \"Success\",\r\n                    errorCode: null,\r\n                    transactionUrl: transfer.getTransactionLink(),\r\n                });\r\n            } catch (error) {\r\n                elizaLogger.error(\r\n                    \"Error during transfer for address:\",\r\n                    address,\r\n                    error\r\n                );\r\n                transactions.push({\r\n                    address,\r\n                    amount: transferAmount,\r\n                    status: \"Failed\",\r\n                    errorCode: error?.code || \"Unknown Error\",\r\n                    transactionUrl: null,\r\n                });\r\n            }\r\n        } else {\r\n            elizaLogger.info(\"Skipping invalid or empty address.\");\r\n            transactions.push({\r\n                address: \"Invalid or Empty\",\r\n                amount: transferAmount,\r\n                status: \"Failed\",\r\n                errorCode: \"Invalid Address\",\r\n                transactionUrl: null,\r\n            });\r\n        }\r\n    }\r\n    // Send 1% to charity\r\n    const charityAddress = getCharityAddress(networkId);\r\n\r\n    try {\r\n        elizaLogger.debug(\"Sending 1% to charity:\", charityAddress);\r\n        const charityTransfer = await executeTransfer(\r\n            sendingWallet,\r\n            transferAmount * 0.01,\r\n            assetId,\r\n            charityAddress\r\n        );\r\n\r\n        transactions.push({\r\n            address: charityAddress,\r\n            amount: charityTransfer.getAmount().toNumber(),\r\n            status: \"Success\",\r\n            errorCode: null,\r\n            transactionUrl: charityTransfer.getTransactionLink(),\r\n        });\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error during charity transfer:\", error);\r\n        transactions.push({\r\n            address: charityAddress,\r\n            amount: transferAmount * 0.01,\r\n            status: \"Failed\",\r\n            errorCode: error?.message || \"Unknown Error\",\r\n            transactionUrl: null,\r\n        });\r\n    }\r\n    await appendTransactionsToCsv(transactions);\r\n    elizaLogger.info(\"Finished processing mass payouts.\");\r\n    return transactions;\r\n}\r\n\r\n// Action for sending mass payouts\r\nexport const sendMassPayoutAction: Action = {\r\n    name: \"SEND_MASS_PAYOUT\",\r\n    similes: [\"BULK_TRANSFER\", \"DISTRIBUTE_FUNDS\", \"SEND_PAYMENTS\"],\r\n    description:\r\n        \"Sends mass payouts to a list of receiving addresses using a predefined sending wallet and logs all transactions to a CSV file.\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.info(\"Validating runtime and message...\");\r\n        return (\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\r\n                process.env.COINBASE_API_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\r\n                process.env.COINBASE_PRIVATE_KEY\r\n            )\r\n        );\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.debug(\"Starting SEND_MASS_PAYOUT handler...\");\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n            if (!state) {\r\n                state = (await runtime.composeState(message, {\r\n                    providers: [massPayoutProvider],\r\n                })) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: transferTemplate,\r\n            });\r\n\r\n            const transferDetails = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.LARGE,\r\n                schema: TransferSchema,\r\n            });\r\n\r\n            elizaLogger.info(\r\n                \"Transfer details generated:\",\r\n                transferDetails.object\r\n            );\r\n\r\n            if (!isTransferContent(transferDetails.object)) {\r\n                callback(\r\n                    {\r\n                        text: \"Invalid transfer details. Please check the inputs.\",\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            const { receivingAddresses, transferAmount, assetId, network } =\r\n                transferDetails.object as TransferContent;\r\n\r\n            const allowedNetworks = Object.values(Coinbase.networks);\r\n\r\n            if (\r\n                !network ||\r\n                !allowedNetworks.includes(network.toLowerCase() as any) ||\r\n                !receivingAddresses?.length ||\r\n                transferAmount <= 0 ||\r\n                !assetId\r\n            ) {\r\n                elizaLogger.error(\"Missing or invalid input parameters:\", {\r\n                    network,\r\n                    receivingAddresses,\r\n                    transferAmount,\r\n                    assetId,\r\n                });\r\n                callback(\r\n                    {\r\n                        text: `Invalid input parameters. Please ensure:\r\n- Network is one of: ${allowedNetworks.join(\", \")}.\r\n- Receiving addresses are provided.\r\n- Transfer amount is greater than zero.\r\n- Asset ID is valid.`,\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            elizaLogger.info(\"◎ Starting mass payout...\");\r\n            const transactions = await executeMassPayout(\r\n                runtime,\r\n                network,\r\n                receivingAddresses,\r\n                transferAmount,\r\n                assetId\r\n            );\r\n\r\n            const successTransactions = transactions.filter(\r\n                (tx) => tx.status === \"Success\"\r\n            );\r\n            const failedTransactions = transactions.filter(\r\n                (tx) => tx.status === \"Failed\"\r\n            );\r\n            const successDetails = successTransactions\r\n                .map(\r\n                    (tx) =>\r\n                        `Address: ${tx.address}, Amount: ${tx.amount}, Transaction URL: ${\r\n                            tx.transactionUrl || \"N/A\"\r\n                        }`\r\n                )\r\n                .join(\"\\n\");\r\n            const failedDetails = failedTransactions\r\n                .map(\r\n                    (tx) =>\r\n                        `Address: ${tx.address}, Amount: ${tx.amount}, Error Code: ${\r\n                            tx.errorCode || \"Unknown Error\"\r\n                        }`\r\n                )\r\n                .join(\"\\n\");\r\n            const charityTransactions = transactions.filter(\r\n                (tx) => tx.address === getCharityAddress(network)\r\n            );\r\n            const charityDetails = charityTransactions\r\n                .map(\r\n                    (tx) =>\r\n                        `Address: ${tx.address}, Amount: ${tx.amount}, Transaction URL: ${\r\n                            tx.transactionUrl || \"N/A\"\r\n                        }`\r\n                )\r\n                .join(\"\\n\");\r\n            callback(\r\n                {\r\n                    text: `Mass payouts completed successfully.\r\n- Successful Transactions: ${successTransactions.length}\r\n- Failed Transactions: ${failedTransactions.length}\r\n\r\nDetails:\r\n${successTransactions.length > 0 ? `✅ Successful Transactions:\\n${successDetails}` : \"No successful transactions.\"}\r\n${failedTransactions.length > 0 ? `❌ Failed Transactions:\\n${failedDetails}` : \"No failed transactions.\"}\r\n${charityTransactions.length > 0 ? `✅ Charity Transactions:\\n${charityDetails}` : \"No charity transactions.\"}\r\n\r\nCheck the CSV file for full details.`,\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during mass payouts:\", error);\r\n            callback(\r\n                { text: \"Failed to complete payouts. Please try again.\" },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Distribute 0.0001 ETH on base to 0xA0ba2ACB5846A54834173fB0DD9444F756810f06 and 0xF14F2c49aa90BaFA223EE074C1C33b59891826bF\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Mass payouts completed successfully.\r\n- Successful Transactions: {{2}}\r\n- Failed Transactions: {{1}}\r\n\r\nDetails:\r\n✅ Successful Transactions:\r\nAddress: 0xABC123..., Amount: 0.005, Transaction URL: https://etherscan.io/tx/...\r\nAddress: 0xDEF456..., Amount: 0.005, Transaction URL: https://etherscan.io/tx/...\r\n\r\n❌ Failed Transactions:\r\nAddress: 0xGHI789..., Amount: 0.005, Error Code: Insufficient Funds\r\n\r\nCheck the CSV file for full details.`,\r\n                    action: \"SEND_MASS_PAYOUT\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Airdrop 10 USDC to these community members: 0x789..., 0x101... on base network\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Mass payout completed successfully:\\n- Airdropped 10 USDC to 2 addresses on base network\\n- Successful Transactions: 2\\n- Failed Transactions: 0\\nCheck the CSV file for transaction details.\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Multi-send 0.25 ETH to team wallets: 0x222..., 0x333... on Ethereum\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Mass payout completed successfully:\\n- Multi-sent 0.25 ETH to 2 addresses on Ethereum network\\n- Successful Transactions: 2\\n- Failed Transactions: 0\\nCheck the CSV file for transaction details.\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Distribute rewards of 5 SOL each to contest winners: winner1.sol, winner2.sol on Solana\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Mass payout completed successfully:\\n- Distributed 5 SOL to 2 addresses on Solana network\\n- Successful Transactions: 2\\n- Failed Transactions: 0\\nCheck the CSV file for transaction details.\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n\r\nexport const coinbaseMassPaymentsPlugin: Plugin = {\r\n    name: \"automatedPayments\",\r\n    description:\r\n        \"Processes mass payouts using Coinbase SDK and logs all transactions (success and failure) to a CSV file. Provides dynamic transaction data through a provider.\",\r\n    actions: [sendMassPayoutAction],\r\n    providers: [massPayoutProvider],\r\n};\r\n","import { Coinbase } from \"@coinbase/coinbase-sdk\";\r\nimport { z } from \"zod\";\r\nimport {\r\n    WebhookEventType,\r\n    WebhookEventFilter,\r\n    WebhookEventTypeFilter,\r\n} from \"@coinbase/coinbase-sdk/dist/client\";\r\n\r\nexport const ChargeSchema = z.object({\r\n    id: z.string().nullable(),\r\n    price: z.number(),\r\n    type: z.string(),\r\n    currency: z.string().min(3).max(3),\r\n    name: z.string().min(1),\r\n    description: z.string().min(1),\r\n});\r\n\r\nexport interface ChargeContent {\r\n    id: string | null;\r\n    price: number;\r\n    type: string;\r\n    currency: string; // Currency code (e.g., USD)\r\n    name: string; // Name of the charge\r\n    description: string; // Description of the charge\r\n}\r\n\r\nexport const isChargeContent = (object: any): object is ChargeContent => {\r\n    if (ChargeSchema.safeParse(object).success) {\r\n        return true;\r\n    }\r\n    console.error(\"Invalid content: \", object);\r\n    return false;\r\n};\r\n\r\nexport const TransferSchema = z.object({\r\n    network: z.string().toLowerCase(),\r\n    receivingAddresses: z.array(z.string()),\r\n    transferAmount: z.number(),\r\n    assetId: z.string().toLowerCase(),\r\n});\r\n\r\nexport interface TransferContent {\r\n    network: string;\r\n    receivingAddresses: string[];\r\n    transferAmount: number;\r\n    assetId: string;\r\n}\r\n\r\nexport const isTransferContent = (object: any): object is TransferContent => {\r\n    return TransferSchema.safeParse(object).success;\r\n};\r\n\r\nexport type Transaction = {\r\n    address: string;\r\n    amount: number;\r\n    status: string;\r\n    errorCode: string | null;\r\n    transactionUrl: string | null;\r\n};\r\nconst assetValues = Object.values(Coinbase.assets) as [string, ...string[]];\r\nexport const TradeSchema = z.object({\r\n    network: z.string().toLowerCase(),\r\n    amount: z.number(),\r\n    sourceAsset: z.enum(assetValues),\r\n    targetAsset: z.enum(assetValues),\r\n    side: z.enum([\"BUY\", \"SELL\"]),\r\n});\r\n\r\nexport interface TradeContent {\r\n    network: string;\r\n    amount: number;\r\n    sourceAsset: string;\r\n    targetAsset: string;\r\n    side: \"BUY\" | \"SELL\";\r\n}\r\n\r\nexport const isTradeContent = (object: any): object is TradeContent => {\r\n    return TradeSchema.safeParse(object).success;\r\n};\r\n\r\nexport type TradeTransaction = {\r\n    network: string;\r\n    amount: number;\r\n    sourceAsset: string;\r\n    targetAsset: string;\r\n    status: string;\r\n    errorCode: string | null;\r\n    transactionUrl: string | null;\r\n};\r\n\r\nexport interface TokenContractContent {\r\n    contractType: \"ERC20\" | \"ERC721\" | \"ERC1155\";\r\n    name: string;\r\n    symbol: string;\r\n    network: string;\r\n    baseURI?: string;\r\n    totalSupply?: number;\r\n}\r\n\r\nexport const TokenContractSchema = z\r\n    .object({\r\n        contractType: z\r\n            .enum([\"ERC20\", \"ERC721\", \"ERC1155\"])\r\n            .describe(\"The type of token contract to deploy\"),\r\n        name: z.string().describe(\"The name of the token\"),\r\n        symbol: z.string().describe(\"The symbol of the token\"),\r\n        network: z.string().describe(\"The blockchain network to deploy on\"),\r\n        baseURI: z\r\n            .string()\r\n            .optional()\r\n            .describe(\r\n                \"The base URI for token metadata (required for ERC721 and ERC1155)\"\r\n            ),\r\n        totalSupply: z\r\n            .number()\r\n            .optional()\r\n            .describe(\"The total supply of tokens (only for ERC20)\"),\r\n    })\r\n    .refine(\r\n        (data) => {\r\n            if (data.contractType === \"ERC20\") {\r\n                return (\r\n                    typeof data.totalSupply === \"number\" ||\r\n                    data.totalSupply === undefined\r\n                );\r\n            }\r\n            if ([\"ERC721\", \"ERC1155\"].includes(data.contractType)) {\r\n                return (\r\n                    typeof data.baseURI === \"string\" ||\r\n                    data.baseURI === undefined\r\n                );\r\n            }\r\n            return true;\r\n        },\r\n        {\r\n            message: \"Invalid token contract content\",\r\n            path: [\"contractType\"],\r\n        }\r\n    );\r\n\r\nexport const isTokenContractContent = (\r\n    obj: any\r\n): obj is TokenContractContent => {\r\n    return TokenContractSchema.safeParse(obj).success;\r\n};\r\n\r\n// Add to types.ts\r\nexport interface ContractInvocationContent {\r\n    contractAddress: string;\r\n    method: string;\r\n    abi: any[];\r\n    args?: Record<string, any>;\r\n    amount?: string;\r\n    assetId: string;\r\n    networkId: string;\r\n}\r\n\r\nexport const ContractInvocationSchema = z.object({\r\n    contractAddress: z\r\n        .string()\r\n        .describe(\"The address of the contract to invoke\"),\r\n    method: z.string().describe(\"The method to invoke on the contract\"),\r\n    abi: z.array(z.any()).describe(\"The ABI of the contract\"),\r\n    args: z\r\n        .record(z.string(), z.any())\r\n        .optional()\r\n        .describe(\"The arguments to pass to the contract method\"),\r\n    amount: z\r\n        .string()\r\n        .optional()\r\n        .describe(\r\n            \"The amount of the asset to send (as string to handle large numbers)\"\r\n        ),\r\n    assetId: z.string().describe(\"The ID of the asset to send (e.g., 'USDC')\"),\r\n    networkId: z\r\n        .string()\r\n        .describe(\"The network ID to use (e.g., 'ethereum-mainnet')\"),\r\n});\r\n\r\nexport const isContractInvocationContent = (\r\n    obj: any\r\n): obj is ContractInvocationContent => {\r\n    return ContractInvocationSchema.safeParse(obj).success;\r\n};\r\n\r\nexport const WebhookSchema = z.object({\r\n    networkId: z.string(),\r\n    eventType: z.nativeEnum(WebhookEventType),\r\n    eventTypeFilter: z.custom<WebhookEventTypeFilter>().optional(),\r\n    eventFilters: z.array(z.custom<WebhookEventFilter>()).optional(),\r\n});\r\n\r\nexport type WebhookContent = z.infer<typeof WebhookSchema>;\r\n\r\nexport const isWebhookContent = (object: any): object is WebhookContent => {\r\n    return WebhookSchema.safeParse(object).success;\r\n};\r\n\r\nexport const AdvancedTradeSchema = z.object({\r\n    productId: z.string(),\r\n    side: z.enum([\"BUY\", \"SELL\"]),\r\n    amount: z.number(),\r\n    orderType: z.enum([\"MARKET\", \"LIMIT\"]),\r\n    limitPrice: z.number().optional(),\r\n});\r\n\r\nexport interface AdvancedTradeContent {\r\n    productId: string;\r\n    side: \"BUY\" | \"SELL\";\r\n    amount: number;\r\n    orderType: \"MARKET\" | \"LIMIT\";\r\n    limitPrice?: number;\r\n}\r\n\r\nexport const isAdvancedTradeContent = (\r\n    object: any\r\n): object is AdvancedTradeContent => {\r\n    return AdvancedTradeSchema.safeParse(object).success;\r\n};\r\n\r\nexport interface ReadContractContent {\r\n    contractAddress: `0x${string}`;\r\n    method: string;\r\n    networkId: string;\r\n    args: Record<string, any>;\r\n    abi?: any[];\r\n}\r\n\r\nexport const ReadContractSchema = z.object({\r\n    contractAddress: z\r\n        .string()\r\n        .describe(\"The address of the contract to read from\"),\r\n    method: z.string().describe(\"The view/pure method to call on the contract\"),\r\n    networkId: z.string().describe(\"The network ID to use\"),\r\n    args: z\r\n        .record(z.string(), z.any())\r\n        .describe(\"The arguments to pass to the contract method\"),\r\n    abi: z.array(z.any()).optional().describe(\"The contract ABI (optional)\"),\r\n});\r\n\r\nexport const isReadContractContent = (obj: any): obj is ReadContractContent => {\r\n    return ReadContractSchema.safeParse(obj).success;\r\n};\r\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            overrideMap,\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * @deprecated Use z.string().min(1) instead.\n     * @see {@link ZodString.min}\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\nfunction custom(check, params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","export const chargeTemplate = `\r\nExtract the following details to create a Coinbase charge:\r\n- **price** (number): The amount for the charge (e.g., 100.00).\r\n- **currency** (string): The 3-letter ISO 4217 currency code (e.g., USD, EUR).\r\n- **type** (string): The pricing type for the charge (e.g., fixed_price, dynamic_price). Assume price type is fixed unless otherwise stated\r\n- **name** (string): A non-empty name for the charge (e.g., \"The Human Fund\").\r\n- **description** (string): A non-empty description of the charge (e.g., \"Money For People\").\r\n\r\nProvide the values in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"price\": <number>,\r\n    \"currency\": \"<currency>\",\r\n    \"type\": \"<type>\",\r\n    \"name\": \"<name>\",\r\n    \"description\": \"<description>\"\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const getChargeTemplate = `\r\nExtract the details for a Coinbase charge using the provided charge ID:\r\n- **charge_id** (string): The unique identifier of the charge (e.g., \"2b364ef7-ad60-4fcd-958b-e550a3c47dc6\").\r\n\r\nProvide the charge details in the following JSON format after retrieving the charge details:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"charge_id\": \"<charge_id>\",\r\n    \"price\": <number>,\r\n    \"currency\": \"<currency>\",\r\n    \"type\": \"<type>\",\r\n    \"name\": \"<name>\",\r\n    \"description\": \"<description>\",\r\n    \"status\": \"<status>\",\r\n    \"created_at\": \"<ISO8601 timestamp>\",\r\n    \"expires_at\": \"<ISO8601 timestamp>\"\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const transferTemplate = `\r\nExtract the following details for processing a mass payout using the Coinbase SDK:\r\n- **receivingAddresses** (array): A list of wallet addresses receiving the funds.\r\n- **transferAmount** (number): The amount to transfer to each address.\r\n- **assetId** (string): The asset ID to transfer (e.g., ETH, BTC).\r\n- **network** (string): The blockchain network to use. Allowed values are:\r\n    static networks: {\r\n        readonly BaseSepolia: \"base-sepolia\";\r\n        readonly BaseMainnet: \"base-mainnet\";\r\n        readonly EthereumHolesky: \"ethereum-holesky\";\r\n        readonly EthereumMainnet: \"ethereum-mainnet\";\r\n        readonly PolygonMainnet: \"polygon-mainnet\";\r\n        readonly SolanaDevnet: \"solana-devnet\";\r\n        readonly SolanaMainnet: \"solana-mainnet\";\r\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\r\n    };\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"receivingAddresses\": [\"<receiving_address_1>\", \"<receiving_address_2>\"],\r\n    \"transferAmount\": <amount>,\r\n    \"assetId\": \"<asset_id>\",\r\n    \"network\": \"<network>\"\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const tradeTemplate = `\r\nExtract the following details for processing a trade using the Coinbase SDK:\r\n- **network** (string): The blockchain network to use (e.g., base, sol, eth, arb, pol).\r\n- **amount** (number): The amount to trade.\r\n- **sourceAsset** (string): The asset ID to trade from (must be one of: ETH, SOL, USDC, WETH, GWEI, LAMPORT).\r\n- **targetAsset** (string): The asset ID to trade to (must be one of: ETH, SOL, USDC, WETH, GWEI, LAMPORT).\r\n- **side** (string): The side of the trade (must be either \"BUY\" or \"SELL\").\r\n\r\nEnsure that:\r\n1. **network** is one of the supported networks: \"base\", \"sol\", \"eth\", \"arb\", or \"pol\".\r\n2. **sourceAsset** and **targetAsset** are valid assets from the provided list.\r\n3. **amount** is a positive number.\r\n4. **side** is either \"BUY\" or \"SELL\".\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"network\": \"<network>\",\r\n    \"amount\": <amount>,\r\n    \"sourceAsset\": \"<source_asset_id>\",\r\n    \"targetAsset\": \"<target_asset_id>\",\r\n    \"side\": \"<side>\"\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const advancedTradeTemplate = `\r\nExtract the following details for processing an advanced trade using the Coinbase Advanced Trading API:\r\n- **productId** (string): The trading pair ID (e.g., \"BTC-USD\", \"ETH-USD\", \"SOL-USD\")\r\n- **side** (string): The side of the trade (must be either \"BUY\" or \"SELL\")\r\n- **amount** (number): The amount to trade\r\n- **orderType** (string): The type of order (must be either \"MARKET\" or \"LIMIT\")\r\n- **limitPrice** (number, optional): The limit price for limit orders\r\n\r\nEnsure that:\r\n1. **productId** follows the format \"ASSET-USD\" (e.g., \"BTC-USD\")\r\n2. **side** is either \"BUY\" or \"SELL\"\r\n3. **amount** is a positive number\r\n4. **orderType** is either \"MARKET\" or \"LIMIT\"\r\n5. **limitPrice** is provided when orderType is \"LIMIT\"\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"productId\": \"<product_id>\",\r\n    \"side\": \"<side>\",\r\n    \"amount\": <amount>,\r\n    \"orderType\": \"<order_type>\",\r\n    \"limitPrice\": <limit_price>\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const tokenContractTemplate = `\r\nExtract the following details for deploying a token contract using the Coinbase SDK:\r\n- **contractType** (string): The type of token contract to deploy (ERC20, ERC721, or ERC1155)\r\n- **name** (string): The name of the token\r\n- **symbol** (string): The symbol of the token\r\n- **network** (string): The blockchain network to deploy on (e.g., base, eth, arb, pol)\r\n- **baseURI** (string, optional): The base URI for token metadata (required for ERC721 and ERC1155)\r\n- **totalSupply** (number, optional): The total supply of tokens (only for ERC20)\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"contractType\": \"<contract_type>\",\r\n    \"name\": \"<token_name>\",\r\n    \"symbol\": \"<token_symbol>\",\r\n    \"network\": \"<network>\",\r\n    \"baseURI\": \"<base_uri>\",\r\n    \"totalSupply\": <total_supply>\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\n// Add to templates.ts\r\nexport const contractInvocationTemplate = `\r\nExtract the following details for invoking a smart contract using the Coinbase SDK:\r\n- **contractAddress** (string): The address of the contract to invoke\r\n- **method** (string): The method to invoke on the contract\r\n- **abi** (array): The ABI of the contract\r\n- **args** (object, optional): The arguments to pass to the contract method\r\n- **amount** (string, optional): The amount of the asset to send (as string to handle large numbers)\r\n- **assetId** (string, required): The ID of the asset to send (e.g., 'USDC')\r\n- **networkId** (string, required): The network ID to use in format \"chain-network\".\r\n static networks: {\r\n        readonly BaseSepolia: \"base-sepolia\";\r\n        readonly BaseMainnet: \"base-mainnet\";\r\n        readonly EthereumHolesky: \"ethereum-holesky\";\r\n        readonly EthereumMainnet: \"ethereum-mainnet\";\r\n        readonly PolygonMainnet: \"polygon-mainnet\";\r\n        readonly SolanaDevnet: \"solana-devnet\";\r\n        readonly SolanaMainnet: \"solana-mainnet\";\r\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\r\n    };\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"contractAddress\": \"<contract_address>\",\r\n    \"method\": \"<method_name>\",\r\n    \"abi\": [<contract_abi>],\r\n    \"args\": {\r\n        \"<arg_name>\": \"<arg_value>\"\r\n    },\r\n    \"amount\": \"<amount_as_string>\",\r\n    \"assetId\": \"<asset_id>\",\r\n    \"networkId\": \"<network_id>\"\r\n}\r\n\\`\\`\\`\r\n\r\nExample for invoking a transfer method on the USDC contract:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"contractAddress\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\r\n    \"method\": \"transfer\",\r\n    \"abi\": [\r\n        {\r\n            \"constant\": false,\r\n            \"inputs\": [\r\n                {\r\n                    \"name\": \"to\",\r\n                    \"type\": \"address\"\r\n                },\r\n                {\r\n                    \"name\": \"amount\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"name\": \"transfer\",\r\n            \"outputs\": [\r\n                {\r\n                    \"name\": \"\",\r\n                    \"type\": \"bool\"\r\n                }\r\n            ],\r\n            \"payable\": false,\r\n            \"stateMutability\": \"nonpayable\",\r\n            \"type\": \"function\"\r\n        }\r\n    ],\r\n    \"args\": {\r\n        \"to\": \"0xbcF7C64B880FA89a015970dC104E848d485f99A3\",\r\n        \"amount\": \"1000000\" // 1 USDC (6 decimals)\r\n    },\r\n    \"networkId\": \"ethereum-mainnet\",\r\n    \"assetId\": \"USDC\"\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const webhookTemplate = `\r\nExtract the following details for creating a webhook:\r\n- **networkId** (string): The network ID for which the webhook is created.\r\nAllowed values are:\r\n    static networks: {\r\n        readonly BaseSepolia: \"base-sepolia\";\r\n        readonly BaseMainnet: \"base-mainnet\";\r\n        readonly EthereumHolesky: \"ethereum-holesky\";\r\n        readonly EthereumMainnet: \"ethereum-mainnet\";\r\n        readonly PolygonMainnet: \"polygon-mainnet\";\r\n        readonly SolanaDevnet: \"solana-devnet\";\r\n        readonly SolanaMainnet: \"solana-mainnet\";\r\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\r\n    };\r\n- **eventType** (string): The type of event for the webhook.\r\nexport declare const WebhookEventType: {\r\n    readonly Unspecified: \"unspecified\";\r\n    readonly Erc20Transfer: \"erc20_transfer\";\r\n    readonly Erc721Transfer: \"erc721_transfer\";\r\n    readonly WalletActivity: \"wallet_activity\";\r\n};\r\n- **eventTypeFilter** (string, optional): Filter for wallet activity event type.\r\nexport interface WebhookEventTypeFilter {\r\n    /**\r\n     * A list of wallet addresses to filter on.\r\n     * @type {Array<string>}\r\n     * @memberof WebhookWalletActivityFilter\r\n     */\r\n    'addresses'?: Array<string>;\r\n    /**\r\n     * The ID of the wallet that owns the webhook.\r\n     * @type {string}\r\n     * @memberof WebhookWalletActivityFilter\r\n     */\r\n    'wallet_id'?: string;\r\n}\r\n- **eventFilters** (array, optional): Filters applied to the events that determine which specific events trigger the webhook.\r\nexport interface Array<WebhookEventFilter> {\r\n    /**\r\n     * The onchain contract address of the token for which the events should be tracked.\r\n     * @type {string}\r\n     * @memberof WebhookEventFilter\r\n     */\r\n    'contract_address'?: string;\r\n    /**\r\n     * The onchain address of the sender. Set this filter to track all transfer events originating from your address.\r\n     * @type {string}\r\n     * @memberof WebhookEventFilter\r\n     */\r\n    'from_address'?: string;\r\n    /**\r\n     * The onchain address of the receiver. Set this filter to track all transfer events sent to your address.\r\n     * @type {string}\r\n     * @memberof WebhookEventFilter\r\n     */\r\n    'to_address'?: string;\r\n}\r\nProvide the details in the following JSON format:\r\n\\`\\`\\`json\r\n{\r\n    \"networkId\": \"<networkId>\",\r\n    \"eventType\": \"<eventType>\",\r\n    \"eventTypeFilter\": \"<eventTypeFilter>\",\r\n    \"eventFilters\": [<eventFilter1>, <eventFilter2>]\r\n}\r\n\\`\\`\\`\r\n\r\n\r\n\r\nExample for creating a webhook on the Sepolia testnet for ERC20 transfers originating from a specific wallet 0x1234567890123456789012345678901234567890 on transfers from 0xbcF7C64B880FA89a015970dC104E848d485f99A3\r\n\r\n\\`\\`\\`javascript\r\n\r\n    networkId: 'base-sepolia', // Listening on sepolia testnet transactions\r\n    eventType: 'erc20_transfer',\r\n    eventTypeFilter: {\r\n      addresses: ['0x1234567890123456789012345678901234567890']\r\n    },\r\n    eventFilters: [{\r\n      from_address: '0xbcF7C64B880FA89a015970dC104E848d485f99A3',\r\n    }],\r\n});\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const readContractTemplate = `\r\nExtract the following details for reading from a smart contract using the Coinbase SDK:\r\n- **contractAddress** (string): The address of the contract to read from (must start with 0x)\r\n- **method** (string): The view/pure method to call on the contract\r\n- **networkId** (string): The network ID based on networks configured in Coinbase SDK\r\nAllowed values are:\r\n    static networks: {\r\n        readonly BaseSepolia: \"base-sepolia\";\r\n        readonly BaseMainnet: \"base-mainnet\";\r\n        readonly EthereumHolesky: \"ethereum-holesky\";\r\n        readonly EthereumMainnet: \"ethereum-mainnet\";\r\n        readonly PolygonMainnet: \"polygon-mainnet\";\r\n        readonly SolanaDevnet: \"solana-devnet\";\r\n        readonly SolanaMainnet: \"solana-mainnet\";\r\n        readonly ArbitrumMainnet: \"arbitrum-mainnet\";\r\n    };\r\n- **args** (object): The arguments to pass to the contract method\r\n- **abi** (array, optional): The contract ABI if needed for complex interactions\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"contractAddress\": \"<0x-prefixed-address>\",\r\n    \"method\": \"<method_name>\",\r\n    \"networkId\": \"<network_id>\",\r\n    \"args\": {\r\n        \"<arg_name>\": \"<arg_value>\"\r\n    },\r\n    \"abi\": [\r\n        // Optional ABI array\r\n    ]\r\n}\r\n\\`\\`\\`\r\n\r\nExample for reading the balance of an ERC20 token:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"contractAddress\": \"0x37f2131ebbc8f97717edc3456879ef56b9f4b97b\",\r\n    \"method\": \"balanceOf\",\r\n    \"networkId\": \"eth-mainnet\",\r\n    \"args\": {\r\n        \"account\": \"0xbcF7C64B880FA89a015970dC104E848d485f99A3\"\r\n    }\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n{{recentMessages}}\r\n`;\r\n","import {\r\n    Coinbase,\r\n    Trade,\r\n    Transfer,\r\n    Wallet,\r\n    WalletData,\r\n    Webhook,\r\n} from \"@coinbase/coinbase-sdk\";\r\nimport { elizaLogger, IAgentRuntime, settings } from \"@elizaos/core\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { EthereumTransaction } from \"@coinbase/coinbase-sdk/dist/client\";\r\nimport { fileURLToPath } from \"url\";\r\nimport { createArrayCsvWriter } from \"csv-writer\";\r\nimport { Transaction } from \"./types\";\r\n\r\n// Dynamically resolve the file path to the src/plugins directory\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\r\nconst tradeCsvFilePath = path.join(baseDir, \"trades.csv\");\r\nconst transactionCsvFilePath = path.join(baseDir, \"transactions.csv\");\r\nconst webhookCsvFilePath = path.join(baseDir, \"webhooks.csv\");\r\n\r\nexport async function initializeWallet(\r\n    runtime: IAgentRuntime,\r\n    networkId: string = Coinbase.networks.EthereumMainnet\r\n) {\r\n    let wallet: Wallet;\r\n    const storedSeed =\r\n        runtime.getSetting(\"COINBASE_GENERATED_WALLET_HEX_SEED\") ??\r\n        process.env.COINBASE_GENERATED_WALLET_HEX_SEED;\r\n\r\n    const storedWalletId =\r\n        runtime.getSetting(\"COINBASE_GENERATED_WALLET_ID\") ??\r\n        process.env.COINBASE_GENERATED_WALLET_ID;\r\n    if (!storedSeed || !storedWalletId) {\r\n        // No stored seed or wallet ID, creating a new wallet\r\n        wallet = await Wallet.create({ networkId });\r\n\r\n        // Export wallet data directly\r\n        const walletData: WalletData = wallet.export();\r\n        const walletAddress = await wallet.getDefaultAddress();\r\n        try {\r\n            const characterFilePath = `characters/${runtime.character.name.toLowerCase()}.character.json`;\r\n            const walletIDSave = await updateCharacterSecrets(\r\n                characterFilePath,\r\n                \"COINBASE_GENERATED_WALLET_ID\",\r\n                walletData.walletId\r\n            );\r\n            const seedSave = await updateCharacterSecrets(\r\n                characterFilePath,\r\n                \"COINBASE_GENERATED_WALLET_HEX_SEED\",\r\n                walletData.seed\r\n            );\r\n            if (walletIDSave && seedSave) {\r\n                elizaLogger.log(\"Successfully updated character secrets.\");\r\n            } else {\r\n                const seedFilePath = `characters/${runtime.character.name.toLowerCase()}-seed.txt`;\r\n                elizaLogger.error(\r\n                    `Failed to update character secrets so adding gitignored ${seedFilePath} file please add it your env or character file and delete:`\r\n                );\r\n                // save it to gitignored file\r\n                wallet.saveSeed(seedFilePath);\r\n            }\r\n            elizaLogger.log(\r\n                \"Wallet created and stored new wallet:\",\r\n                walletAddress\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error updating character secrets:\", error);\r\n            throw error;\r\n        }\r\n\r\n        // Logging wallet creation\r\n        elizaLogger.log(\"Created and stored new wallet:\", walletAddress);\r\n    } else {\r\n        // Importing existing wallet using stored seed and wallet ID\r\n        // Always defaults to base-mainnet we can't select the network here\r\n        wallet = await Wallet.import({\r\n            seed: storedSeed,\r\n            walletId: storedWalletId,\r\n        });\r\n        const networkId = wallet.getNetworkId();\r\n        elizaLogger.log(\"Imported existing wallet for network:\", networkId);\r\n\r\n        // Logging wallet import\r\n        elizaLogger.log(\r\n            \"Imported existing wallet:\",\r\n            await wallet.getDefaultAddress()\r\n        );\r\n    }\r\n\r\n    return wallet;\r\n}\r\n\r\n/**\r\n * Executes a trade and a charity transfer.\r\n * @param {IAgentRuntime} runtime - The runtime for wallet initialization.\r\n * @param {string} network - The network to use.\r\n * @param {number} amount - The amount to trade and transfer.\r\n * @param {string} sourceAsset - The source asset to trade.\r\n * @param {string} targetAsset - The target asset to trade.\r\n */\r\nexport async function executeTradeAndCharityTransfer(\r\n    runtime: IAgentRuntime,\r\n    network: string,\r\n    amount: number,\r\n    sourceAsset: string,\r\n    targetAsset: string\r\n) {\r\n    const wallet = await initializeWallet(runtime, network);\r\n\r\n    elizaLogger.log(\"Wallet initialized:\", {\r\n        network,\r\n        address: await wallet.getDefaultAddress(),\r\n    });\r\n\r\n    const charityAddress = getCharityAddress(network);\r\n    const charityAmount = charityAddress ? amount * 0.01 : 0;\r\n    const tradeAmount = charityAddress ? amount - charityAmount : amount;\r\n    const assetIdLowercase = sourceAsset.toLowerCase();\r\n    const tradeParams = {\r\n        amount: tradeAmount,\r\n        fromAssetId: assetIdLowercase,\r\n        toAssetId: targetAsset.toLowerCase(),\r\n    };\r\n\r\n    let transfer: Transfer;\r\n    if (charityAddress && charityAmount > 0) {\r\n        transfer = await executeTransfer(\r\n            wallet,\r\n            charityAmount,\r\n            assetIdLowercase,\r\n            charityAddress\r\n        );\r\n        elizaLogger.log(\"Charity Transfer successful:\", {\r\n            address: charityAddress,\r\n            transactionUrl: transfer.getTransactionLink(),\r\n        });\r\n        await appendTransactionsToCsv([\r\n            {\r\n                address: charityAddress,\r\n                amount: charityAmount,\r\n                status: \"Success\",\r\n                errorCode: null,\r\n                transactionUrl: transfer.getTransactionLink(),\r\n            },\r\n        ]);\r\n    }\r\n\r\n    const trade: Trade = await wallet.createTrade(tradeParams);\r\n    elizaLogger.log(\"Trade initiated:\", trade.toString());\r\n    await trade.wait();\r\n    elizaLogger.log(\"Trade completed successfully:\", trade.toString());\r\n    await appendTradeToCsv(trade);\r\n    return {\r\n        trade,\r\n        transfer,\r\n    };\r\n}\r\n\r\nexport async function appendTradeToCsv(trade: Trade) {\r\n    try {\r\n        const csvWriter = createArrayCsvWriter({\r\n            path: tradeCsvFilePath,\r\n            header: [\r\n                \"Network\",\r\n                \"From Amount\",\r\n                \"Source Asset\",\r\n                \"To Amount\",\r\n                \"Target Asset\",\r\n                \"Status\",\r\n                \"Transaction URL\",\r\n            ],\r\n            append: true,\r\n        });\r\n\r\n        const formattedTrade = [\r\n            trade.getNetworkId(),\r\n            trade.getFromAmount(),\r\n            trade.getFromAssetId(),\r\n            trade.getToAmount(),\r\n            trade.getToAssetId(),\r\n            trade.getStatus(),\r\n            trade.getTransaction().getTransactionLink() || \"\",\r\n        ];\r\n\r\n        elizaLogger.log(\"Writing trade to CSV:\", formattedTrade);\r\n        await csvWriter.writeRecords([formattedTrade]);\r\n        elizaLogger.log(\"Trade written to CSV successfully.\");\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error writing trade to CSV:\", error);\r\n    }\r\n}\r\n\r\nexport async function appendTransactionsToCsv(transactions: Transaction[]) {\r\n    try {\r\n        const csvWriter = createArrayCsvWriter({\r\n            path: transactionCsvFilePath,\r\n            header: [\r\n                \"Address\",\r\n                \"Amount\",\r\n                \"Status\",\r\n                \"Error Code\",\r\n                \"Transaction URL\",\r\n            ],\r\n            append: true,\r\n        });\r\n\r\n        const formattedTransactions = transactions.map((transaction) => [\r\n            transaction.address,\r\n            transaction.amount.toString(),\r\n            transaction.status,\r\n            transaction.errorCode || \"\",\r\n            transaction.transactionUrl || \"\",\r\n        ]);\r\n\r\n        elizaLogger.log(\"Writing transactions to CSV:\", formattedTransactions);\r\n        await csvWriter.writeRecords(formattedTransactions);\r\n        elizaLogger.log(\"All transactions written to CSV successfully.\");\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error writing transactions to CSV:\", error);\r\n    }\r\n}\r\n// create a function to append webhooks to a csv\r\nexport async function appendWebhooksToCsv(webhooks: Webhook[]) {\r\n    try {\r\n        // Ensure the CSV file exists\r\n        if (!fs.existsSync(webhookCsvFilePath)) {\r\n            elizaLogger.warn(\"CSV file not found. Creating a new one.\");\r\n            const csvWriter = createArrayCsvWriter({\r\n                path: webhookCsvFilePath,\r\n                header: [\r\n                    \"Webhook ID\",\r\n                    \"Network ID\",\r\n                    \"Event Type\",\r\n                    \"Event Filters\",\r\n                    \"Event Type Filter\",\r\n                    \"Notification URI\",\r\n                ],\r\n            });\r\n            await csvWriter.writeRecords([]); // Create an empty file with headers\r\n            elizaLogger.log(\"New CSV file created with headers.\");\r\n        }\r\n        const csvWriter = createArrayCsvWriter({\r\n            path: webhookCsvFilePath,\r\n            header: [\r\n                \"Webhook ID\",\r\n                \"Network ID\",\r\n                \"Event Type\",\r\n                \"Event Filters\",\r\n                \"Event Type Filter\",\r\n                \"Notification URI\",\r\n            ],\r\n            append: true,\r\n        });\r\n\r\n        const formattedWebhooks = webhooks.map((webhook) => [\r\n            webhook.getId(),\r\n            webhook.getNetworkId(),\r\n            webhook.getEventType(),\r\n            JSON.stringify(webhook.getEventFilters()),\r\n            JSON.stringify(webhook.getEventTypeFilter()),\r\n            webhook.getNotificationURI(),\r\n        ]);\r\n\r\n        elizaLogger.log(\"Writing webhooks to CSV:\", formattedWebhooks);\r\n        await csvWriter.writeRecords(formattedWebhooks);\r\n        elizaLogger.log(\"All webhooks written to CSV successfully.\");\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error writing webhooks to CSV:\", error);\r\n    }\r\n}\r\n\r\n/**\r\n * Updates a key-value pair in character.settings.secrets.\r\n * @param {string} characterfilePath - The file path to the character.\r\n * @param {string} key - The secret key to update or add.\r\n * @param {string} value - The new value for the secret key.\r\n */\r\nexport async function updateCharacterSecrets(\r\n    characterfilePath: string,\r\n    key: string,\r\n    value: string\r\n): Promise<boolean> {\r\n    try {\r\n        const characterFilePath = path.resolve(\r\n            process.cwd(),\r\n            characterfilePath\r\n        );\r\n\r\n        // Check if the character file exists\r\n        if (!fs.existsSync(characterFilePath)) {\r\n            elizaLogger.error(\"Character file not found:\", characterFilePath);\r\n            return false;\r\n        }\r\n\r\n        // Read the existing character file\r\n        const characterData = JSON.parse(\r\n            fs.readFileSync(characterFilePath, \"utf-8\")\r\n        );\r\n\r\n        // Ensure settings and secrets exist in the character file\r\n        if (!characterData.settings) {\r\n            characterData.settings = {};\r\n        }\r\n        if (!characterData.settings.secrets) {\r\n            characterData.settings.secrets = {};\r\n        }\r\n\r\n        // Update or add the key-value pair\r\n        characterData.settings.secrets[key] = value;\r\n\r\n        // Write the updated data back to the file\r\n        fs.writeFileSync(\r\n            characterFilePath,\r\n            JSON.stringify(characterData, null, 2),\r\n            \"utf-8\"\r\n        );\r\n\r\n        console.log(\r\n            `Updated ${key} in character.settings.secrets for ${characterFilePath}.`\r\n        );\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error updating character secrets:\", error);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const getAssetType = (transaction: EthereumTransaction) => {\r\n    // Check for ETH\r\n    if (transaction.value && transaction.value !== \"0\") {\r\n        return \"ETH\";\r\n    }\r\n\r\n    // Check for ERC-20 tokens\r\n    if (transaction.token_transfers && transaction.token_transfers.length > 0) {\r\n        return transaction.token_transfers\r\n            .map((transfer) => {\r\n                return transfer.token_id;\r\n            })\r\n            .join(\", \");\r\n    }\r\n\r\n    return \"N/A\";\r\n};\r\n\r\n/**\r\n * Fetches and formats wallet balances and recent transactions.\r\n *\r\n * @param {IAgentRuntime} runtime - The runtime for wallet initialization.\r\n * @param {string} networkId - The network ID (optional, defaults to ETH mainnet).\r\n * @returns {Promise<{balances: Array<{asset: string, amount: string}>, transactions: Array<any>}>} - An object with formatted balances and transactions.\r\n */\r\nexport async function getWalletDetails(\r\n    runtime: IAgentRuntime,\r\n    networkId: string = Coinbase.networks.EthereumMainnet\r\n): Promise<{\r\n    balances: Array<{ asset: string; amount: string }>;\r\n    transactions: Array<{\r\n        timestamp: string;\r\n        amount: string;\r\n        asset: string; // Ensure getAssetType is implemented\r\n        status: string;\r\n        transactionUrl: string;\r\n    }>;\r\n}> {\r\n    try {\r\n        // Initialize the wallet, defaulting to the specified network or ETH mainnet\r\n        const wallet = await initializeWallet(runtime, networkId);\r\n\r\n        // Fetch balances\r\n        const balances = await wallet.listBalances();\r\n        const formattedBalances = Array.from(balances, (balance) => ({\r\n            asset: balance[0],\r\n            amount: balance[1].toString(),\r\n        }));\r\n\r\n        // Fetch the wallet's recent transactions\r\n\r\n        const transactionsData = [];\r\n        const formattedTransactions = transactionsData.map((transaction) => {\r\n            const content = transaction.content();\r\n            return {\r\n                timestamp: content.block_timestamp || \"N/A\",\r\n                amount: content.value || \"N/A\",\r\n                asset: getAssetType(content) || \"N/A\", // Ensure getAssetType is implemented\r\n                status: transaction.getStatus(),\r\n                transactionUrl: transaction.getTransactionLink() || \"N/A\",\r\n            };\r\n        });\r\n\r\n        // Return formatted data\r\n        return {\r\n            balances: formattedBalances,\r\n            transactions: formattedTransactions,\r\n        };\r\n    } catch (error) {\r\n        console.error(\"Error fetching wallet details:\", error);\r\n        throw new Error(\"Unable to retrieve wallet details.\");\r\n    }\r\n}\r\n\r\n/**\r\n * Executes a transfer.\r\n * @param {Wallet} wallet - The wallet to use.\r\n * @param {number} amount - The amount to transfer.\r\n * @param {string} sourceAsset - The source asset to transfer.\r\n * @param {string} targetAddress - The target address to transfer to.\r\n */\r\nexport async function executeTransferAndCharityTransfer(\r\n    wallet: Wallet,\r\n    amount: number,\r\n    sourceAsset: string,\r\n    targetAddress: string,\r\n    network: string\r\n) {\r\n    const charityAddress = getCharityAddress(network);\r\n    const charityAmount = charityAddress ? amount * 0.01 : 0;\r\n    const transferAmount = charityAddress ? amount - charityAmount : amount;\r\n    const assetIdLowercase = sourceAsset.toLowerCase();\r\n\r\n    let charityTransfer: Transfer;\r\n    if (charityAddress && charityAmount > 0) {\r\n        charityTransfer = await executeTransfer(\r\n            wallet,\r\n            charityAmount,\r\n            assetIdLowercase,\r\n            charityAddress\r\n        );\r\n        elizaLogger.log(\r\n            \"Charity Transfer successful:\",\r\n            charityTransfer.toString()\r\n        );\r\n    }\r\n\r\n    const transferDetails = {\r\n        amount: transferAmount,\r\n        assetId: assetIdLowercase,\r\n        destination: targetAddress,\r\n        gasless: assetIdLowercase === \"usdc\" ? true : false,\r\n    };\r\n    elizaLogger.log(\"Initiating transfer:\", transferDetails);\r\n    const transfer = await wallet.createTransfer(transferDetails);\r\n    elizaLogger.log(\"Transfer initiated:\", transfer.toString());\r\n    await transfer.wait();\r\n\r\n    let responseText = `Transfer executed successfully:\r\n- Amount: ${transfer.getAmount()}\r\n- Asset: ${assetIdLowercase}\r\n- Destination: ${targetAddress}\r\n- Transaction URL: ${transfer.getTransactionLink() || \"\"}`;\r\n\r\n    if (charityTransfer) {\r\n        responseText += `\r\n- Charity Amount: ${charityTransfer.getAmount()}\r\n- Charity Transaction URL: ${charityTransfer.getTransactionLink() || \"\"}`;\r\n    } else {\r\n        responseText += \"\\n(Note: Charity transfer was not completed)\";\r\n    }\r\n\r\n    elizaLogger.log(responseText);\r\n\r\n    return {\r\n        transfer,\r\n        charityTransfer,\r\n        responseText,\r\n    };\r\n}\r\n\r\n/**\r\n * Executes a transfer.\r\n * @param {Wallet} wallet - The wallet to use.\r\n * @param {number} amount - The amount to transfer.\r\n * @param {string} sourceAsset - The source asset to transfer.\r\n * @param {string} targetAddress - The target address to transfer to.\r\n */\r\nexport async function executeTransfer(\r\n    wallet: Wallet,\r\n    amount: number,\r\n    sourceAsset: string,\r\n    targetAddress: string\r\n) {\r\n    const assetIdLowercase = sourceAsset.toLowerCase();\r\n    const transferDetails = {\r\n        amount,\r\n        assetId: assetIdLowercase,\r\n        destination: targetAddress,\r\n        gasless: assetIdLowercase === \"usdc\" ? true : false,\r\n    };\r\n    elizaLogger.log(\"Initiating transfer:\", transferDetails);\r\n    let transfer: Transfer | undefined;\r\n    try {\r\n        transfer = await wallet.createTransfer(transferDetails);\r\n        elizaLogger.log(\"Transfer initiated:\", transfer.toString());\r\n        await transfer.wait({\r\n            intervalSeconds: 1,\r\n            timeoutSeconds: 20,\r\n        });\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error executing transfer:\", error);\r\n    }\r\n    return transfer;\r\n}\r\n\r\n/**\r\n * Gets the charity address based on the network.\r\n * @param {string} network - The network to use.\r\n * @param {boolean} isCharitable - Whether charity donations are enabled\r\n * @throws {Error} If charity address for the network is not configured when charity is enabled\r\n */\r\nexport function getCharityAddress(\r\n    network: string,\r\n    isCharitable: boolean = false\r\n): string | null {\r\n    // Check both environment variable and passed parameter\r\n    const isCharityEnabled =\r\n        process.env.IS_CHARITABLE === \"true\" && isCharitable;\r\n\r\n    if (!isCharityEnabled) {\r\n        return null;\r\n    }\r\n    const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`;\r\n    const charityAddress = settings[networkKey];\r\n\r\n    if (!charityAddress) {\r\n        throw new Error(\r\n            `Charity address not configured for network ${network}. Please set ${networkKey} in your environment variables.`\r\n        );\r\n    }\r\n\r\n    return charityAddress;\r\n}\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObject,\r\n    ModelClass,\r\n    Provider,\r\n} from \"@elizaos/core\";\r\nimport {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    Plugin,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { ChargeContent, ChargeSchema, isChargeContent } from \"../types\";\r\nimport { chargeTemplate, getChargeTemplate } from \"../templates\";\r\nimport { getWalletDetails } from \"../utils\";\r\nimport { Coinbase } from \"@coinbase/coinbase-sdk\";\r\n\r\nconst url = \"https://api.commerce.coinbase.com/charges\";\r\ninterface ChargeRequest {\r\n    name: string;\r\n    description: string;\r\n    pricing_type: string;\r\n    local_price: {\r\n        amount: string;\r\n        currency: string;\r\n    };\r\n}\r\n\r\nexport async function createCharge(apiKey: string, params: ChargeRequest) {\r\n    elizaLogger.debug(\"Starting createCharge function\");\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-CC-Api-Key\": apiKey,\r\n            },\r\n            body: JSON.stringify(params),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to create charge: ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.data;\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error creating charge:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Function to fetch all charges\r\nexport async function getAllCharges(apiKey: string) {\r\n    elizaLogger.debug(\"Starting getAllCharges function\");\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-CC-Api-Key\": apiKey,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\r\n                `Failed to fetch all charges: ${response.statusText}`\r\n            );\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.data;\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error fetching charges:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Function to fetch details of a specific charge\r\nexport async function getChargeDetails(apiKey: string, chargeId: string) {\r\n    elizaLogger.debug(\"Starting getChargeDetails function\");\r\n    const getUrl = `${url}/${chargeId}`;\r\n\r\n    try {\r\n        const response = await fetch(getUrl, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-CC-Api-Key\": apiKey,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\r\n                `Failed to fetch charge details: ${response.statusText}`\r\n            );\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        elizaLogger.error(\r\n            `Error fetching charge details for ID ${chargeId}:`,\r\n            error\r\n        );\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const createCoinbaseChargeAction: Action = {\r\n    name: \"CREATE_CHARGE\",\r\n    similes: [\r\n        \"MAKE_CHARGE\",\r\n        \"INITIATE_CHARGE\",\r\n        \"GENERATE_CHARGE\",\r\n        \"CREATE_TRANSACTION\",\r\n        \"COINBASE_CHARGE\",\r\n        \"GENERATE_INVOICE\",\r\n        \"CREATE_PAYMENT\",\r\n        \"SETUP_BILLING\",\r\n        \"REQUEST_PAYMENT\",\r\n        \"CREATE_CHECKOUT\",\r\n        \"GET_CHARGE_STATUS\",\r\n        \"LIST_CHARGES\",\r\n    ],\r\n    description:\r\n        \"Create and manage payment charges using Coinbase Commerce. Supports fixed and dynamic pricing, multiple currencies (USD, EUR, USDC), and provides charge status tracking and management features.\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        const coinbaseCommerceKeyOk = !!runtime.getSetting(\r\n            \"COINBASE_COMMERCE_KEY\"\r\n        );\r\n\r\n        // Ensure Coinbase Commerce API key is available\r\n        return coinbaseCommerceKeyOk;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Composing state for message:\", message);\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const context = composeContext({\r\n            state,\r\n            template: chargeTemplate,\r\n        });\r\n\r\n        const chargeDetails = await generateObject({\r\n            runtime,\r\n            context,\r\n            modelClass: ModelClass.LARGE,\r\n            schema: ChargeSchema,\r\n        });\r\n        if (!isChargeContent(chargeDetails.object)) {\r\n            throw new Error(\"Invalid content\");\r\n        }\r\n        const charge = chargeDetails.object as ChargeContent;\r\n        if (!charge || !charge.price || !charge.type) {\r\n            callback(\r\n                {\r\n                    text: \"Invalid charge details provided.\",\r\n                },\r\n                []\r\n            );\r\n            return;\r\n        }\r\n\r\n        elizaLogger.info(\"Charge details received:\", chargeDetails);\r\n\r\n        // Initialize Coinbase Commerce client\r\n        elizaLogger.debug(\"Starting Coinbase Commerce client initialization\");\r\n        try {\r\n            // Create a charge\r\n            const chargeResponse = await createCharge(\r\n                runtime.getSetting(\"COINBASE_COMMERCE_KEY\"),\r\n                {\r\n                    local_price: {\r\n                        amount: charge.price.toString(),\r\n                        currency: charge.currency,\r\n                    },\r\n                    pricing_type: charge.type,\r\n                    name: charge.name,\r\n                    description: charge.description,\r\n                }\r\n            );\r\n\r\n            elizaLogger.info(\r\n                \"Coinbase Commerce charge created:\",\r\n                chargeResponse\r\n            );\r\n\r\n            callback(\r\n                {\r\n                    text: `Charge created successfully: ${chargeResponse.hosted_url}`,\r\n                    attachments: [\r\n                        {\r\n                            id: chargeResponse.id,\r\n                            url: chargeResponse.hosted_url,\r\n                            title: \"Coinbase Commerce Charge\",\r\n                            description: `Charge ID: ${chargeResponse.id}`,\r\n                            text: `Pay here: ${chargeResponse.hosted_url}`,\r\n                            source: \"coinbase\",\r\n                        },\r\n                    ],\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\r\n                \"Error creating Coinbase Commerce charge:\",\r\n                error\r\n            );\r\n            callback(\r\n                {\r\n                    text: \"Failed to create a charge. Please try again.\",\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create a charge for $100 USD for Digital Art NFT with description 'Exclusive digital artwork collection'\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Charge created successfully:\\n- Amount: $100 USD\\n- Name: Digital Art NFT\\n- Description: Exclusive digital artwork collection\\n- Type: fixed_price\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Set up a dynamic price charge for Premium Membership named 'VIP Access Pass'\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Charge created successfully:\\n- Type: dynamic_price\\n- Name: VIP Access Pass\\n- Description: Premium Membership\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Generate a payment request for 50 EUR for Workshop Registration\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Charge created successfully:\\n- Amount: 50 EUR\\n- Name: Workshop Registration\\n- Type: fixed_price\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create an invoice for 1000 USDC for Consulting Services\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Charge created successfully:\\n- Amount: 1000 USDC\\n- Name: Consulting Services\\n- Type: fixed_price\\n- Charge URL: https://commerce.coinbase.com/charges/...\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Check the status of charge abc-123-def\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Charge details retrieved:\\n- ID: abc-123-def\\n- Status: COMPLETED\\n- Amount: 100 USD\\n- Created: 2024-01-20T10:00:00Z\\n- Expires: 2024-01-21T10:00:00Z\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"List all active charges\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Active charges retrieved:\\n1. ID: abc-123 - $100 USD - Digital Art NFT\\n2. ID: def-456 - 50 EUR - Workshop\\n3. ID: ghi-789 - 1000 USDC - Consulting\\n\\nTotal active charges: 3\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n} as Action;\r\n\r\nexport const getAllChargesAction: Action = {\r\n    name: \"GET_ALL_CHARGES\",\r\n    similes: [\"FETCH_ALL_CHARGES\", \"RETRIEVE_ALL_CHARGES\", \"LIST_ALL_CHARGES\"],\r\n    description: \"Fetch all charges using Coinbase Commerce.\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const coinbaseCommerceKeyOk = !!runtime.getSetting(\r\n            \"COINBASE_COMMERCE_KEY\"\r\n        );\r\n\r\n        // Ensure Coinbase Commerce API key is available\r\n        return coinbaseCommerceKeyOk;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        try {\r\n            elizaLogger.info(\"Composing state for message:\", message);\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n            const charges = await getAllCharges(\r\n                runtime.getSetting(\"COINBASE_COMMERCE_KEY\")\r\n            );\r\n\r\n            elizaLogger.info(\"Fetched all charges:\", charges);\r\n\r\n            callback(\r\n                {\r\n                    text: `Successfully fetched all charges. Total charges: ${charges.length}`,\r\n                    attachments: charges,\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error fetching all charges:\", error);\r\n            callback(\r\n                {\r\n                    text: \"Failed to fetch all charges. Please try again.\",\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"Fetch all charges\" },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Successfully fetched all charges.\",\r\n                    action: \"GET_ALL_CHARGES\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n} as Action;\r\n\r\nexport const getChargeDetailsAction: Action = {\r\n    name: \"GET_CHARGE_DETAILS\",\r\n    similes: [\"FETCH_CHARGE_DETAILS\", \"RETRIEVE_CHARGE_DETAILS\", \"GET_CHARGE\"],\r\n    description: \"Fetch details of a specific charge using Coinbase Commerce.\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const coinbaseCommerceKeyOk = !!runtime.getSetting(\r\n            \"COINBASE_COMMERCE_KEY\"\r\n        );\r\n\r\n        // Ensure Coinbase Commerce API key is available\r\n        return coinbaseCommerceKeyOk;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Composing state for message:\", message);\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const context = composeContext({\r\n            state,\r\n            template: getChargeTemplate,\r\n        });\r\n        const chargeDetails = await generateObject({\r\n            runtime,\r\n            context,\r\n            modelClass: ModelClass.LARGE,\r\n            schema: ChargeSchema,\r\n        });\r\n        if (!isChargeContent(chargeDetails.object)) {\r\n            throw new Error(\"Invalid content\");\r\n        }\r\n        const charge = chargeDetails.object as ChargeContent;\r\n        if (!charge.id) {\r\n            callback(\r\n                {\r\n                    text: \"Missing charge ID. Please provide a valid charge ID.\",\r\n                },\r\n                []\r\n            );\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const chargeDetails = await getChargeDetails(\r\n                runtime.getSetting(\"COINBASE_COMMERCE_KEY\"),\r\n                charge.id\r\n            );\r\n\r\n            elizaLogger.info(\"Fetched charge details:\", chargeDetails);\r\n\r\n            const chargeData = chargeDetails.data;\r\n\r\n            callback(\r\n                {\r\n                    text: `Successfully fetched charge details for ID: ${charge.id}`,\r\n                    attachments: [\r\n                        {\r\n                            id: chargeData.id,\r\n                            url: chargeData.hosted_url,\r\n                            title: `Charge Details for ${charge.id}`,\r\n                            source: \"coinbase\",\r\n                            description: JSON.stringify(chargeDetails, null, 2),\r\n                            text: `Pay here: ${chargeData.hosted_url}`,\r\n                            contentType: \"application/json\",\r\n                        },\r\n                    ],\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\r\n                `Error fetching details for charge ID ${charge.id}:`,\r\n                error\r\n            );\r\n            callback(\r\n                {\r\n                    text: `Failed to fetch details for charge ID: ${charge.id}. Please try again.`,\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Fetch details of charge ID: 123456\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Successfully fetched charge details. {{charge.id}} for {{charge.amount}} {{charge.currency}} to {{charge.name}} for {{charge.description}}\",\r\n                    action: \"GET_CHARGE_DETAILS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n\r\nexport const chargeProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.debug(\"Starting chargeProvider.get function\");\r\n        const charges = await getAllCharges(\r\n            runtime.getSetting(\"COINBASE_COMMERCE_KEY\")\r\n        );\r\n        // Ensure API key is available\r\n        const coinbaseAPIKey =\r\n            runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n            process.env.COINBASE_API_KEY;\r\n        const coinbasePrivateKey =\r\n            runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n            process.env.COINBASE_PRIVATE_KEY;\r\n        const balances = [];\r\n        const transactions = [];\r\n        if (coinbaseAPIKey && coinbasePrivateKey) {\r\n            Coinbase.configure({\r\n                apiKeyName: coinbaseAPIKey,\r\n                privateKey: coinbasePrivateKey,\r\n            });\r\n            const { balances, transactions } = await getWalletDetails(runtime);\r\n            elizaLogger.info(\"Current Balances:\", balances);\r\n            elizaLogger.info(\"Last Transactions:\", transactions);\r\n        }\r\n        const formattedCharges = charges.map((charge) => ({\r\n            id: charge.id,\r\n            name: charge.name,\r\n            description: charge.description,\r\n            pricing: charge.pricing,\r\n        }));\r\n        elizaLogger.info(\"Charges:\", formattedCharges);\r\n        return { charges: formattedCharges, balances, transactions };\r\n    },\r\n};\r\n\r\nexport const coinbaseCommercePlugin: Plugin = {\r\n    name: \"coinbaseCommerce\",\r\n    description:\r\n        \"Integration with Coinbase Commerce for creating and managing charges.\",\r\n    actions: [\r\n        createCoinbaseChargeAction,\r\n        getAllChargesAction,\r\n        getChargeDetailsAction,\r\n    ],\r\n    evaluators: [],\r\n    providers: [chargeProvider],\r\n};\r\n","import { Coinbase } from \"@coinbase/coinbase-sdk\";\r\nimport {\r\n    Action,\r\n    Plugin,\r\n    elizaLogger,\r\n    IAgentRuntime,\r\n    Memory,\r\n    HandlerCallback,\r\n    State,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass,\r\n    Provider,\r\n} from \"@elizaos/core\";\r\nimport { executeTradeAndCharityTransfer, getWalletDetails } from \"../utils\";\r\nimport { tradeTemplate } from \"../templates\";\r\nimport { isTradeContent, TradeContent, TradeSchema } from \"../types\";\r\nimport { readFile } from \"fs/promises\";\r\nimport { parse } from \"csv-parse/sync\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nimport fs from \"fs\";\r\nimport { createArrayCsvWriter } from \"csv-writer\";\r\n\r\n// Dynamically resolve the file path to the src/plugins directory\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\r\nconst tradeCsvFilePath = path.join(baseDir, \"trades.csv\");\r\n\r\nexport const tradeProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.debug(\"Starting tradeProvider.get function\");\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n            elizaLogger.info(\"Reading CSV file from:\", tradeCsvFilePath);\r\n\r\n            // Check if the file exists; if not, create it with headers\r\n            if (!fs.existsSync(tradeCsvFilePath)) {\r\n                elizaLogger.warn(\"CSV file not found. Creating a new one.\");\r\n                const csvWriter = createArrayCsvWriter({\r\n                    path: tradeCsvFilePath,\r\n                    header: [\r\n                        \"Network\",\r\n                        \"From Amount\",\r\n                        \"Source Asset\",\r\n                        \"To Amount\",\r\n                        \"Target Asset\",\r\n                        \"Status\",\r\n                        \"Transaction URL\",\r\n                    ],\r\n                });\r\n                await csvWriter.writeRecords([]); // Create an empty file with headers\r\n                elizaLogger.info(\"New CSV file created with headers.\");\r\n            }\r\n\r\n            // Read and parse the CSV file\r\n            const csvData = await readFile(tradeCsvFilePath, \"utf-8\");\r\n            const records = parse(csvData, {\r\n                columns: true,\r\n                skip_empty_lines: true,\r\n            });\r\n\r\n            elizaLogger.info(\"Parsed CSV records:\", records);\r\n            const { balances, transactions } = await getWalletDetails(runtime);\r\n            elizaLogger.info(\"Current Balances:\", balances);\r\n            elizaLogger.info(\"Last Transactions:\", transactions);\r\n            return {\r\n                currentTrades: records.map((record: any) => ({\r\n                    network: record[\"Network\"] || undefined,\r\n                    amount: parseFloat(record[\"From Amount\"]) || undefined,\r\n                    sourceAsset: record[\"Source Asset\"] || undefined,\r\n                    toAmount: parseFloat(record[\"To Amount\"]) || undefined,\r\n                    targetAsset: record[\"Target Asset\"] || undefined,\r\n                    status: record[\"Status\"] || undefined,\r\n                    transactionUrl: record[\"Transaction URL\"] || \"\",\r\n                })),\r\n                balances,\r\n                transactions,\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in tradeProvider:\", error);\r\n            return [];\r\n        }\r\n    },\r\n};\r\n\r\nexport const executeTradeAction: Action = {\r\n    name: \"EXECUTE_TRADE\",\r\n    description:\r\n        \"Execute a trade between two assets using the Coinbase SDK and log the result.\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.info(\"Validating runtime for EXECUTE_TRADE...\");\r\n        return (\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\r\n                process.env.COINBASE_API_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\r\n                process.env.COINBASE_PRIVATE_KEY\r\n            )\r\n        );\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.debug(\"Starting EXECUTE_TRADE handler...\");\r\n\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: tradeTemplate,\r\n            });\r\n\r\n            const tradeDetails = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.LARGE,\r\n                schema: TradeSchema,\r\n            });\r\n\r\n            if (!isTradeContent(tradeDetails.object)) {\r\n                callback(\r\n                    {\r\n                        text: \"Invalid trade details. Ensure network, amount, source asset, and target asset are correctly specified.\",\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            const { network, amount, sourceAsset, targetAsset } =\r\n                tradeDetails.object as TradeContent;\r\n\r\n            const allowedNetworks = [\"base\", \"sol\", \"eth\", \"arb\", \"pol\"];\r\n            if (!allowedNetworks.includes(network)) {\r\n                callback(\r\n                    {\r\n                        text: `Invalid network. Supported networks are: ${allowedNetworks.join(\r\n                            \", \"\r\n                        )}.`,\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            const { trade, transfer } = await executeTradeAndCharityTransfer(\r\n                runtime,\r\n                network,\r\n                amount,\r\n                sourceAsset,\r\n                targetAsset\r\n            );\r\n\r\n            let responseText = `Trade executed successfully:\r\n- Network: ${network}\r\n- Amount: ${trade.getFromAmount()}\r\n- From: ${sourceAsset}\r\n- To: ${targetAsset}\r\n- Transaction URL: ${trade.getTransaction().getTransactionLink() || \"\"}\r\n- Charity Transaction URL: ${transfer.getTransactionLink() || \"\"}`;\r\n\r\n            if (transfer) {\r\n                responseText += `\\n- Charity Amount: ${transfer.getAmount()}`;\r\n            } else {\r\n                responseText += \"\\n(Note: Charity transfer was not completed)\";\r\n            }\r\n\r\n            callback({ text: responseText }, []);\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during trade execution:\", error);\r\n            callback(\r\n                {\r\n                    text: \"Failed to execute the trade. Please check the logs for more details.\",\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Swap 1 ETH for USDC on base network\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Trade executed successfully:\\n- Swapped 1 ETH for USDC on base network\\n- Transaction URL: https://basescan.io/tx/...\\n- Status: Completed\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Convert 1000 USDC to SOL on Solana\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Trade executed successfully:\\n- Converted 1000 USDC to SOL on Solana network\\n- Transaction URL: https://solscan.io/tx/...\\n- Status: Completed\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Exchange 5 WETH for ETH on Arbitrum\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Trade executed successfully:\\n- Exchanged 5 WETH for ETH on Arbitrum network\\n- Transaction URL: https://arbiscan.io/tx/...\\n- Status: Completed\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Trade 100 GWEI for USDC on Polygon\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Trade executed successfully:\\n- Traded 100 GWEI for USDC on Polygon network\\n- Transaction URL: https://polygonscan.com/tx/...\\n- Status: Completed\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Market buy ETH with 500 USDC on base\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Trade executed successfully:\\n- Bought ETH with 500 USDC on base network\\n- Transaction URL: https://basescan.io/tx/...\\n- Status: Completed\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Sell 2.5 SOL for USDC on Solana mainnet\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Trade executed successfully:\\n- Sold 2.5 SOL for USDC on Solana network\\n- Transaction URL: https://solscan.io/tx/...\\n- Status: Completed\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\r\n        \"EXECUTE_TRADE\", // Primary action name\r\n        \"SWAP_TOKENS\", // For token swaps\r\n        \"CONVERT_CURRENCY\", // For currency conversion\r\n        \"EXCHANGE_ASSETS\", // For asset exchange\r\n        \"MARKET_BUY\", // For buying assets\r\n        \"MARKET_SELL\", // For selling assets\r\n        \"TRADE_CRYPTO\", // Generic crypto trading\r\n    ],\r\n};\r\n\r\nexport const tradePlugin: Plugin = {\r\n    name: \"tradePlugin\",\r\n    description: \"Enables asset trading using the Coinbase SDK.\",\r\n    actions: [executeTradeAction],\r\n    providers: [tradeProvider],\r\n};\r\n","import { Coinbase, readContract, SmartContract } from \"@coinbase/coinbase-sdk\";\r\nimport {\r\n    Action,\r\n    Plugin,\r\n    elizaLogger,\r\n    IAgentRuntime,\r\n    Memory,\r\n    HandlerCallback,\r\n    State,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass,\r\n} from \"@elizaos/core\";\r\nimport { initializeWallet } from \"../utils\";\r\nimport {\r\n    contractInvocationTemplate,\r\n    tokenContractTemplate,\r\n    readContractTemplate,\r\n} from \"../templates\";\r\nimport {\r\n    ContractInvocationSchema,\r\n    TokenContractSchema,\r\n    isContractInvocationContent,\r\n    isTokenContractContent,\r\n    ReadContractSchema,\r\n    isReadContractContent,\r\n} from \"../types\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nimport { createArrayCsvWriter } from \"csv-writer\";\r\nimport fs from \"fs\";\r\nimport { ABI } from \"../constants\";\r\n\r\n// Dynamically resolve the file path to the src/plugins directory\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\r\nconst contractsCsvFilePath = path.join(baseDir, \"contracts.csv\");\r\n\r\n// Add this helper at the top level\r\nconst serializeBigInt = (value: any): any => {\r\n    if (typeof value === \"bigint\") {\r\n        return value.toString();\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.map(serializeBigInt);\r\n    }\r\n    if (typeof value === \"object\" && value !== null) {\r\n        return Object.fromEntries(\r\n            Object.entries(value).map(([k, v]) => [k, serializeBigInt(v)])\r\n        );\r\n    }\r\n    return value;\r\n};\r\n\r\nexport const deployTokenContractAction: Action = {\r\n    name: \"DEPLOY_TOKEN_CONTRACT\",\r\n    description:\r\n        \"Deploy an ERC20, ERC721, or ERC1155 token contract using the Coinbase SDK\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.info(\"Validating runtime for DEPLOY_TOKEN_CONTRACT...\");\r\n        return (\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\r\n                process.env.COINBASE_API_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\r\n                process.env.COINBASE_PRIVATE_KEY\r\n            )\r\n        );\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.debug(\"Starting DEPLOY_TOKEN_CONTRACT handler...\");\r\n\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n\r\n            // Ensure CSV file exists\r\n            if (!fs.existsSync(contractsCsvFilePath)) {\r\n                const csvWriter = createArrayCsvWriter({\r\n                    path: contractsCsvFilePath,\r\n                    header: [\r\n                        \"Contract Type\",\r\n                        \"Name\",\r\n                        \"Symbol\",\r\n                        \"Network\",\r\n                        \"Contract Address\",\r\n                        \"Transaction URL\",\r\n                        \"Base URI\",\r\n                        \"Total Supply\",\r\n                    ],\r\n                });\r\n                await csvWriter.writeRecords([]);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: tokenContractTemplate,\r\n            });\r\n\r\n            const contractDetails = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.SMALL,\r\n                schema: TokenContractSchema,\r\n            });\r\n            elizaLogger.info(\"Contract details:\", contractDetails.object);\r\n\r\n            if (!isTokenContractContent(contractDetails.object)) {\r\n                callback(\r\n                    {\r\n                        text: \"Invalid contract details. Please check the inputs.\",\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            const {\r\n                contractType,\r\n                name,\r\n                symbol,\r\n                network,\r\n                baseURI,\r\n                totalSupply,\r\n            } = contractDetails.object;\r\n            elizaLogger.info(\"Contract details:\", contractDetails.object);\r\n            const wallet = await initializeWallet(runtime, network);\r\n            let contract: SmartContract;\r\n            let deploymentDetails;\r\n\r\n            switch (contractType.toLowerCase()) {\r\n                case \"erc20\":\r\n                    contract = await wallet.deployToken({\r\n                        name,\r\n                        symbol,\r\n                        totalSupply: totalSupply || 1000000,\r\n                    });\r\n                    deploymentDetails = {\r\n                        contractType: \"ERC20\",\r\n                        totalSupply,\r\n                        baseURI: \"N/A\",\r\n                    };\r\n                    break;\r\n\r\n                case \"erc721\":\r\n                    contract = await wallet.deployNFT({\r\n                        name,\r\n                        symbol,\r\n                        baseURI: baseURI || \"\",\r\n                    });\r\n                    deploymentDetails = {\r\n                        contractType: \"ERC721\",\r\n                        totalSupply: \"N/A\",\r\n                        baseURI,\r\n                    };\r\n                    break;\r\n                default:\r\n                    throw new Error(\r\n                        `Unsupported contract type: ${contractType}`\r\n                    );\r\n            }\r\n\r\n            // Wait for deployment to complete\r\n            await contract.wait();\r\n            elizaLogger.info(\"Deployment details:\", deploymentDetails);\r\n            elizaLogger.info(\"Contract deployed successfully:\", contract);\r\n            // Log deployment to CSV\r\n            const csvWriter = createArrayCsvWriter({\r\n                path: contractsCsvFilePath,\r\n                header: [\r\n                    \"Contract Type\",\r\n                    \"Name\",\r\n                    \"Symbol\",\r\n                    \"Network\",\r\n                    \"Contract Address\",\r\n                    \"Transaction URL\",\r\n                    \"Base URI\",\r\n                    \"Total Supply\",\r\n                ],\r\n                append: true,\r\n            });\r\n            const transaction =\r\n                contract.getTransaction()?.getTransactionLink() || \"\";\r\n            const contractAddress = contract.getContractAddress();\r\n            await csvWriter.writeRecords([\r\n                [\r\n                    deploymentDetails.contractType,\r\n                    name,\r\n                    symbol,\r\n                    network,\r\n                    contractAddress,\r\n                    transaction,\r\n                    deploymentDetails.baseURI,\r\n                    deploymentDetails.totalSupply || \"\",\r\n                ],\r\n            ]);\r\n\r\n            callback(\r\n                {\r\n                    text: `Token contract deployed successfully:\r\n- Type: ${deploymentDetails.contractType}\r\n- Name: ${name}\r\n- Symbol: ${symbol}\r\n- Network: ${network}\r\n- Contract Address: ${contractAddress}\r\n- Transaction URL: ${transaction}\r\n${deploymentDetails.baseURI !== \"N/A\" ? `- Base URI: ${deploymentDetails.baseURI}` : \"\"}\r\n${deploymentDetails.totalSupply !== \"N/A\" ? `- Total Supply: ${deploymentDetails.totalSupply}` : \"\"}\r\n\r\nContract deployment has been logged to the CSV file.`,\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error deploying token contract:\", error);\r\n            callback(\r\n                {\r\n                    text: \"Failed to deploy token contract. Please check the logs for more details.\",\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deploy an ERC721 token named 'MyNFT' with symbol 'MNFT' on base network with URI 'https://pbs.twimg.com/profile_images/1848823420336934913/oI0-xNGe_400x400.jpg'\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Token contract deployed successfully:\r\n- Type: ERC20\r\n- Name: MyToken\r\n- Symbol: MTK\r\n- Network: base\r\n- Contract Address: 0x...\r\n- Transaction URL: https://basescan.org/tx/...\r\n- Total Supply: 1000000`,\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deploy an ERC721 token named 'MyNFT' with symbol 'MNFT' on the base network\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Token contract deployed successfully:\r\n- Type: ERC721\r\n- Name: MyNFT\r\n- Symbol: MNFT\r\n- Network: base\r\n- Contract Address: 0x...\r\n- Transaction URL: https://basescan.org/tx/...\r\n- URI: https://pbs.twimg.com/profile_images/1848823420336934913/oI0-xNGe_400x400.jpg`,\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"DEPLOY_CONTRACT\", \"CREATE_TOKEN\", \"MINT_TOKEN\", \"CREATE_NFT\"],\r\n};\r\n\r\n// Add to tokenContract.ts\r\nexport const invokeContractAction: Action = {\r\n    name: \"INVOKE_CONTRACT\",\r\n    description:\r\n        \"Invoke a method on a deployed smart contract using the Coinbase SDK\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.info(\"Validating runtime for INVOKE_CONTRACT...\");\r\n        return (\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\r\n                process.env.COINBASE_API_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\r\n                process.env.COINBASE_PRIVATE_KEY\r\n            )\r\n        );\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.debug(\"Starting INVOKE_CONTRACT handler...\");\r\n\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: contractInvocationTemplate,\r\n            });\r\n\r\n            const invocationDetails = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.LARGE,\r\n                schema: ContractInvocationSchema,\r\n            });\r\n            elizaLogger.info(\"Invocation details:\", invocationDetails.object);\r\n            if (!isContractInvocationContent(invocationDetails.object)) {\r\n                callback(\r\n                    {\r\n                        text: \"Invalid contract invocation details. Please check the inputs.\",\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            const {\r\n                contractAddress,\r\n                method,\r\n                args,\r\n                amount,\r\n                assetId,\r\n                networkId,\r\n            } = invocationDetails.object;\r\n            const wallet = await initializeWallet(runtime, networkId);\r\n\r\n            // Prepare invocation options\r\n            const invocationOptions = {\r\n                contractAddress,\r\n                method,\r\n                abi: ABI,\r\n                args: {\r\n                    ...args,\r\n                    amount: args.amount || amount, // Ensure amount is passed in args\r\n                },\r\n                networkId,\r\n                assetId,\r\n            };\r\n            elizaLogger.info(\"Invocation options:\", invocationOptions);\r\n            // Invoke the contract\r\n            const invocation = await wallet.invokeContract(invocationOptions);\r\n\r\n            // Wait for the transaction to be mined\r\n            await invocation.wait();\r\n\r\n            // Log the invocation to CSV\r\n            const csvWriter = createArrayCsvWriter({\r\n                path: contractsCsvFilePath,\r\n                header: [\r\n                    \"Contract Address\",\r\n                    \"Method\",\r\n                    \"Network\",\r\n                    \"Status\",\r\n                    \"Transaction URL\",\r\n                    \"Amount\",\r\n                    \"Asset ID\",\r\n                ],\r\n                append: true,\r\n            });\r\n\r\n            await csvWriter.writeRecords([\r\n                [\r\n                    contractAddress,\r\n                    method,\r\n                    networkId,\r\n                    invocation.getStatus(),\r\n                    invocation.getTransactionLink() || \"\",\r\n                    amount || \"\",\r\n                    assetId || \"\",\r\n                ],\r\n            ]);\r\n\r\n            callback(\r\n                {\r\n                    text: `Contract method invoked successfully:\r\n- Contract Address: ${contractAddress}\r\n- Method: ${method}\r\n- Network: ${networkId}\r\n- Status: ${invocation.getStatus()}\r\n- Transaction URL: ${invocation.getTransactionLink() || \"N/A\"}\r\n${amount ? `- Amount: ${amount}` : \"\"}\r\n${assetId ? `- Asset ID: ${assetId}` : \"\"}\r\n\r\nContract invocation has been logged to the CSV file.`,\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error invoking contract method:\", error);\r\n            callback(\r\n                {\r\n                    text: \"Failed to invoke contract method. Please check the logs for more details.\",\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Call the 'transfer' method on my ERC20 token contract at 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 with amount 100 to recepient 0xbcF7C64B880FA89a015970dC104E848d485f99A3\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Contract method invoked successfully:\r\n- Contract Address: 0x123...\r\n- Method: transfer\r\n- Network: base\r\n- Status: SUCCESS\r\n- Transaction URL: https://basescan.org/tx/...\r\n- Amount: 100\r\n- Asset ID: wei\r\n\r\nContract invocation has been logged to the CSV file.`,\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"CALL_CONTRACT\", \"EXECUTE_CONTRACT\", \"INTERACT_WITH_CONTRACT\"],\r\n};\r\n\r\nexport const readContractAction: Action = {\r\n    name: \"READ_CONTRACT\",\r\n    description:\r\n        \"Read data from a deployed smart contract using the Coinbase SDK\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.info(\"Validating runtime for READ_CONTRACT...\");\r\n        return (\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\r\n                process.env.COINBASE_API_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\r\n                process.env.COINBASE_PRIVATE_KEY\r\n            )\r\n        );\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.debug(\"Starting READ_CONTRACT handler...\");\r\n\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: readContractTemplate,\r\n            });\r\n\r\n            const readDetails = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.SMALL,\r\n                schema: ReadContractSchema,\r\n            });\r\n\r\n            if (!isReadContractContent(readDetails.object)) {\r\n                callback(\r\n                    {\r\n                        text: \"Invalid contract read details. Please check the inputs.\",\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            const { contractAddress, method, args, networkId, abi } =\r\n                readDetails.object;\r\n            elizaLogger.info(\"Reading contract:\", {\r\n                contractAddress,\r\n                method,\r\n                args,\r\n                networkId,\r\n                abi,\r\n            });\r\n\r\n            const result = await readContract({\r\n                networkId,\r\n                contractAddress,\r\n                method,\r\n                args,\r\n                abi: ABI as any,\r\n            });\r\n\r\n            // Serialize the result before using it\r\n            const serializedResult = serializeBigInt(result);\r\n\r\n            elizaLogger.info(\"Contract read result:\", serializedResult);\r\n\r\n            callback(\r\n                {\r\n                    text: `Contract read successful:\r\n- Contract Address: ${contractAddress}\r\n- Method: ${method}\r\n- Network: ${networkId}\r\n- Result: ${JSON.stringify(serializedResult, null, 2)}`,\r\n                },\r\n                []\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error reading contract:\", error);\r\n            callback(\r\n                {\r\n                    text: `Failed to read contract: ${error instanceof Error ? error.message : \"Unknown error\"}`,\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Read the balance of address 0xbcF7C64B880FA89a015970dC104E848d485f99A3 from the ERC20 contract at 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 on eth\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Contract read successful:\r\n- Contract Address: 0x37f2131ebbc8f97717edc3456879ef56b9f4b97b\r\n- Method: balanceOf\r\n- Network: eth\r\n- Result: \"1000000\"`,\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"READ_CONTRACT\", \"GET_CONTRACT_DATA\", \"QUERY_CONTRACT\"],\r\n};\r\n\r\nexport const tokenContractPlugin: Plugin = {\r\n    name: \"tokenContract\",\r\n    description:\r\n        \"Enables deployment, invocation, and reading of ERC20, ERC721, and ERC1155 token contracts using the Coinbase SDK\",\r\n    actions: [\r\n        deployTokenContractAction,\r\n        invokeContractAction,\r\n        readContractAction,\r\n    ],\r\n};\r\n","export const ABI = [\r\n    {\r\n        inputs: [],\r\n        name: \"name\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"string\",\r\n                internalType: \"string\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                name: \"spender\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"approve\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"bool\",\r\n                internalType: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"totalSupply\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                name: \"from\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"transferFrom\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"bool\",\r\n                internalType: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"decimals\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"uint8\",\r\n                internalType: \"uint8\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                name: \"account\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n        ],\r\n        name: \"balanceOf\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"symbol\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"string\",\r\n                internalType: \"string\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                name: \"to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"amount\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"transfer\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"bool\",\r\n                internalType: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                name: \"owner\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                name: \"spender\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n        ],\r\n        name: \"allowance\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                name: \"owner\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                name: \"spender\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                name: \"value\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Approval\",\r\n        type: \"event\",\r\n        anonymous: false,\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                name: \"from\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                name: \"to\",\r\n                type: \"address\",\r\n                internalType: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                name: \"value\",\r\n                type: \"uint256\",\r\n                internalType: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Transfer\",\r\n        type: \"event\",\r\n        anonymous: false,\r\n    },\r\n];\r\n","import { Coinbase, Webhook } from \"@coinbase/coinbase-sdk\";\r\nimport {\r\n    Action,\r\n    Plugin,\r\n    elizaLogger,\r\n    IAgentRuntime,\r\n    Memory,\r\n    HandlerCallback,\r\n    State,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass,\r\n    Provider,\r\n} from \"@elizaos/core\";\r\nimport { WebhookSchema, isWebhookContent, WebhookContent } from \"../types\";\r\nimport { webhookTemplate } from \"../templates\";\r\nimport { appendWebhooksToCsv } from \"../utils\";\r\n\r\nexport const webhookProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.debug(\"Starting webhookProvider.get function\");\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n\r\n            // List all webhooks\r\n            const resp = await Webhook.list();\r\n            elizaLogger.info(\"Listing all webhooks:\", resp.data);\r\n\r\n            return {\r\n                webhooks: resp.data.map((webhook: Webhook) => ({\r\n                    id: webhook.getId(),\r\n                    networkId: webhook.getNetworkId(),\r\n                    eventType: webhook.getEventType(),\r\n                    eventFilters: webhook.getEventFilters(),\r\n                    eventTypeFilter: webhook.getEventTypeFilter(),\r\n                    notificationURI: webhook.getNotificationURI(),\r\n                })),\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in webhookProvider:\", error);\r\n            return [];\r\n        }\r\n    },\r\n};\r\n\r\nexport const createWebhookAction: Action = {\r\n    name: \"CREATE_WEBHOOK\",\r\n    description: \"Create a new webhook using the Coinbase SDK.\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.info(\"Validating runtime for CREATE_WEBHOOK...\");\r\n        return (\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_API_KEY ||\r\n                process.env.COINBASE_API_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_PRIVATE_KEY ||\r\n                process.env.COINBASE_PRIVATE_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.character.settings.secrets?.COINBASE_NOTIFICATION_URI ||\r\n                process.env.COINBASE_NOTIFICATION_URI\r\n            )\r\n        );\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.debug(\"Starting CREATE_WEBHOOK handler...\");\r\n\r\n        try {\r\n            Coinbase.configure({\r\n                apiKeyName:\r\n                    runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                privateKey:\r\n                    runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY,\r\n            });\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: webhookTemplate,\r\n            });\r\n\r\n            const webhookDetails = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.LARGE,\r\n                schema: WebhookSchema,\r\n            });\r\n\r\n            if (!isWebhookContent(webhookDetails.object)) {\r\n                callback(\r\n                    {\r\n                        text: \"Invalid webhook details. Ensure network, URL, event type, and contract address are correctly specified.\",\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            const { networkId, eventType, eventFilters, eventTypeFilter } =\r\n                webhookDetails.object as WebhookContent;\r\n            const notificationUri =\r\n                runtime.getSetting(\"COINBASE_NOTIFICATION_URI\") ??\r\n                process.env.COINBASE_NOTIFICATION_URI;\r\n\r\n            if (!notificationUri) {\r\n                callback(\r\n                    {\r\n                        text: \"Notification URI is not set in the environment variables.\",\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n            elizaLogger.info(\"Creating webhook with details:\", {\r\n                networkId,\r\n                notificationUri,\r\n                eventType,\r\n                eventTypeFilter,\r\n                eventFilters,\r\n            });\r\n            const webhook = await Webhook.create({\r\n                networkId,\r\n                notificationUri,\r\n                eventType,\r\n                eventFilters,\r\n            });\r\n            elizaLogger.info(\r\n                \"Webhook created successfully:\",\r\n                webhook.toString()\r\n            );\r\n            callback(\r\n                {\r\n                    text: `Webhook created successfully: ${webhook.toString()}`,\r\n                },\r\n                []\r\n            );\r\n            await appendWebhooksToCsv([webhook]);\r\n            elizaLogger.info(\"Webhook appended to CSV successfully\");\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during webhook creation:\", error);\r\n            callback(\r\n                {\r\n                    text: \"Failed to create the webhook. Please check the logs for more details.\",\r\n                },\r\n                []\r\n            );\r\n        }\r\n    },\r\n    similes: [\"WEBHOOK\", \"NOTIFICATION\", \"EVENT\", \"TRIGGER\", \"LISTENER\"],\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create a webhook on base for address 0xbcF7C64B880FA89a015970dC104E848d485f99A3 on the event type: transfers\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Webhook created successfully: Webhook ID: {{webhookId}}, Network ID: {{networkId}}, Notification URI: {{notificationUri}}, Event Type: {{eventType}}`,\r\n                    action: \"CREATE_WEBHOOK\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n\r\nexport const webhookPlugin: Plugin = {\r\n    name: \"webhookPlugin\",\r\n    description: \"Manages webhooks using the Coinbase SDK.\",\r\n    actions: [createWebhookAction],\r\n    providers: [webhookProvider],\r\n};\r\n","import jwt from 'jsonwebtoken';\r\nimport { BASE_URL, ALGORITHM, JWT_ISSUER } from './constants';\r\nimport crypto from 'crypto';\r\n\r\nexport function generateToken(\r\n    requestMethod: string,\r\n    requestPath: string,\r\n    apiKey: string,\r\n    apiSecret: string\r\n): string {\r\n    const uri = `${requestMethod} ${BASE_URL}${requestPath}`;\r\n    const payload = {\r\n        iss: JWT_ISSUER,\r\n        nbf: Math.floor(Date.now() / 1000),\r\n        exp: Math.floor(Date.now() / 1000) + 120,\r\n        sub: apiKey,\r\n        uri,\r\n    };\r\n\r\n    const header = {\r\n        alg: ALGORITHM,\r\n        kid: apiKey,\r\n        nonce: crypto.randomBytes(16).toString('hex'),\r\n    };\r\n    const options: jwt.SignOptions = {\r\n        algorithm: ALGORITHM as jwt.Algorithm,\r\n        header: header,\r\n    };\r\n\r\n    return jwt.sign(payload, apiSecret as string, options);\r\n}\r\n","export const BASE_URL = 'api.coinbase.com';\r\nexport const API_PREFIX = '/api/v3/brokerage';\r\nexport const ALGORITHM = 'ES256';\r\nexport const VERSION = '0.1.0';\r\nexport const USER_AGENT = `coinbase-advanced-ts/${VERSION}`;\r\nexport const JWT_ISSUER = 'cdp';\r\n","import { generateToken } from '../jwt-generator';\r\nimport fetch, { Headers, RequestInit, Response } from 'node-fetch';\r\nimport { BASE_URL, USER_AGENT } from '../constants';\r\nimport { RequestOptions } from './types/request-types';\r\nimport { handleException } from './errors';\r\n\r\nexport class RESTBase {\r\n    private apiKey: string | undefined;\r\n    private apiSecret: string | undefined;\r\n\r\n    constructor(key?: string, secret?: string) {\r\n        if (!key || !secret) {\r\n            console.log(\r\n                'Could not authenticate. Only public endpoints accessible.'\r\n            );\r\n        }\r\n        this.apiKey = key;\r\n        this.apiSecret = secret;\r\n    }\r\n\r\n    request(options: RequestOptions): Promise<any> {\r\n        const { method, endpoint, isPublic } = options;\r\n        let { queryParams, bodyParams } = options;\r\n\r\n        queryParams = queryParams ? this.filterParams(queryParams) : {};\r\n\r\n        if (bodyParams !== undefined)\r\n            bodyParams = bodyParams ? this.filterParams(bodyParams) : {};\r\n\r\n        return this.prepareRequest(\r\n            method,\r\n            endpoint,\r\n            queryParams,\r\n            bodyParams,\r\n            isPublic\r\n        );\r\n    }\r\n\r\n    prepareRequest(\r\n        httpMethod: string,\r\n        urlPath: string,\r\n        queryParams?: Record<string, any>,\r\n        bodyParams?: Record<string, any>,\r\n        isPublic?: boolean\r\n    ) {\r\n        const headers: Headers = this.setHeaders(httpMethod, urlPath, isPublic);\r\n\r\n        const requestOptions: RequestInit = {\r\n            method: httpMethod,\r\n            headers: headers,\r\n            body: JSON.stringify(bodyParams),\r\n        };\r\n\r\n        const queryString = this.buildQueryString(queryParams);\r\n        const url = `https://${BASE_URL}${urlPath}${queryString}`;\r\n\r\n        return this.sendRequest(headers, requestOptions, url);\r\n    }\r\n\r\n    async sendRequest(\r\n        headers: Headers,\r\n        requestOptions: RequestInit,\r\n        url: string\r\n    ) {\r\n        const response: Response = await fetch(url, requestOptions);\r\n        const responseText = await response.text();\r\n        handleException(response, responseText, response.statusText);\r\n\r\n        return responseText;\r\n    }\r\n\r\n    setHeaders(httpMethod: string, urlPath: string, isPublic?: boolean) {\r\n        const headers: Headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        headers.append('User-Agent', USER_AGENT);\r\n        if (this.apiKey !== undefined && this.apiSecret !== undefined)\r\n            headers.append(\r\n                'Authorization',\r\n                `Bearer ${generateToken(\r\n                    httpMethod,\r\n                    urlPath,\r\n                    this.apiKey,\r\n                    this.apiSecret\r\n                )}`\r\n            );\r\n        else if (isPublic == undefined || isPublic == false)\r\n            throw new Error(\r\n                'Attempting to access authenticated endpoint with invalid API_KEY or API_SECRET.'\r\n            );\r\n\r\n        return headers;\r\n    }\r\n\r\n    filterParams(data: Record<string, any>) {\r\n        const filteredParams: Record<string, any> = {};\r\n\r\n        for (const key in data) {\r\n            if (data[key] !== undefined) {\r\n                filteredParams[key] = data[key];\r\n            }\r\n        }\r\n\r\n        return filteredParams;\r\n    }\r\n\r\n    buildQueryString(queryParams?: Record<string, any>): string {\r\n        if (!queryParams || Object.keys(queryParams).length === 0) {\r\n            return '';\r\n        }\r\n\r\n        const queryString = Object.entries(queryParams)\r\n            .flatMap(([key, value]) => {\r\n                if (Array.isArray(value)) {\r\n                    return value.map(\r\n                        (item) =>\r\n                            `${encodeURIComponent(key)}=${encodeURIComponent(item)}`\r\n                    );\r\n                } else {\r\n                    return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\r\n                }\r\n            })\r\n            .join('&');\r\n\r\n        return `?${queryString}`;\r\n    }\r\n}\r\n","import { Response } from 'node-fetch';\r\n\r\nclass CoinbaseError extends Error {\r\n    statusCode: number;\r\n    response: Response;\r\n\r\n    constructor(message: string, statusCode: number, response: Response) {\r\n        super(message);\r\n        this.name = 'CoinbaseError';\r\n        this.statusCode = statusCode;\r\n        this.response = response;\r\n    }\r\n}\r\n\r\nexport function handleException(\r\n    response: Response,\r\n    responseText: string,\r\n    reason: string\r\n) {\r\n    let message: string | undefined;\r\n\r\n    if (\r\n        (400 <= response.status && response.status <= 499) ||\r\n        (500 <= response.status && response.status <= 599)\r\n    ) {\r\n        if (\r\n            response.status == 403 &&\r\n            responseText.includes('\"error_details\":\"Missing required scopes\"')\r\n        ) {\r\n            message = `${response.status} Coinbase Error: Missing Required Scopes. Please verify your API keys include the necessary permissions.`;\r\n        } else\r\n            message = `${response.status} Coinbase Error: ${reason} ${responseText}`;\r\n\r\n        throw new CoinbaseError(message, response.status, response);\r\n    }\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    GetAccountRequest,\r\n    GetAccountResponse,\r\n    ListAccountsRequest,\r\n    ListAccountsResponse,\r\n} from './types/accounts-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [GET] Get Account\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getaccount\r\nexport function getAccount(\r\n    this: RESTBase,\r\n    { accountUuid }: GetAccountRequest\r\n): Promise<GetAccountResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/accounts/${accountUuid}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] List Accounts\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getaccounts\r\nexport function listAccounts(\r\n    this: RESTBase,\r\n    requestParams: ListAccountsRequest\r\n): Promise<ListAccountsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/accounts`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    CommitConvertTradeRequest,\r\n    CommitConvertTradeResponse,\r\n    CreateConvertQuoteRequest,\r\n    CreateConvertQuoteResponse,\r\n    GetConvertTradeRequest,\r\n    GetConvertTradeResponse,\r\n} from './types/converts-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [POST] Create Convert Quote\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_createconvertquote\r\nexport function createConvertQuote(\r\n    this: RESTBase,\r\n    requestParams: CreateConvertQuoteRequest\r\n): Promise<CreateConvertQuoteResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/convert/quote`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Convert Trade\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getconverttrade\r\nexport function getConvertTrade(\r\n    this: RESTBase,\r\n    { tradeId, ...requestParams }: GetConvertTradeRequest\r\n): Promise<GetConvertTradeResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/convert/trade/${tradeId}`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Commit Connvert Trade\r\n// https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_commitconverttrade\r\nexport function commitConvertTrade(\r\n    this: RESTBase,\r\n    { tradeId, ...requestParams }: CommitConvertTradeRequest\r\n): Promise<CommitConvertTradeResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/convert/trade/${tradeId}`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\n\r\nimport { method } from './types/request-types';\r\nimport { GetAPIKeyPermissionsResponse } from './types/dataAPI-types';\r\n\r\n// [GET] Get API Key Permissions\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getapikeypermissions\r\nexport function getAPIKeyPermissions(\r\n    this: RESTBase\r\n): Promise<GetAPIKeyPermissionsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/key_permissions`,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    GetTransactionsSummaryRequest,\r\n    GetTransactionsSummaryResponse,\r\n} from './types/fees-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [GET] Get Transaction Summary\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_commitconverttrade\r\nexport function getTransactionSummary(\r\n    this: RESTBase,\r\n    requestParams: GetTransactionsSummaryRequest\r\n): Promise<GetTransactionsSummaryResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/transaction_summary`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    CancelPendingFuturesSweep,\r\n    GetCurrentMarginWindowRequest,\r\n    GetCurrentMarginWindowResponse,\r\n    GetFuturesBalanceSummaryResponse,\r\n    GetFuturesPositionRequest,\r\n    GetFuturesPositionResponse,\r\n    GetIntradayMarginSettingResponse,\r\n    ListFuturesPositionsResponse,\r\n    ListFuturesSweepsResponse,\r\n    ScheduleFuturesSweepRequest,\r\n    ScheduleFuturesSweepResponse,\r\n    SetIntradayMarginSettingRequest,\r\n    SetIntradayMarginSettingResponse,\r\n} from './types/futures-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [GET] Get Futures Balance Summary\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmbalancesummary\r\nexport function getFuturesBalanceSummary(\r\n    this: RESTBase\r\n): Promise<GetFuturesBalanceSummaryResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/cfm/balance_summary`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Intraday Margin Setting\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintradaymarginsetting\r\nexport function getIntradayMarginSetting(\r\n    this: RESTBase\r\n): Promise<GetIntradayMarginSettingResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/cfm/intraday/margin_setting`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Set Intraday Margin Setting\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_setintradaymarginsetting\r\nexport function setIntradayMarginSetting(\r\n    this: RESTBase,\r\n    requestParams: SetIntradayMarginSettingRequest\r\n): Promise<SetIntradayMarginSettingResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/cfm/intraday/margin_setting`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Current Margin Window\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getcurrentmarginwindow\r\nexport function getCurrentMarginWindow(\r\n    this: RESTBase,\r\n    requestParams: GetCurrentMarginWindowRequest\r\n): Promise<GetCurrentMarginWindowResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/cfm/intraday/current_margin_window`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] List Futures Positions\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmpositions\r\nexport function listFuturesPositions(\r\n    this: RESTBase\r\n): Promise<ListFuturesPositionsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/cfm/positions`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Futures Position\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmposition\r\nexport function getFuturesPosition(\r\n    this: RESTBase,\r\n    { productId }: GetFuturesPositionRequest\r\n): Promise<GetFuturesPositionResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/cfm/positions/${productId}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Schedule Futures Sweep\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_schedulefcmsweep\r\nexport function scheduleFuturesSweep(\r\n    this: RESTBase,\r\n    requestParams: ScheduleFuturesSweepRequest\r\n): Promise<ScheduleFuturesSweepResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/cfm/sweeps/schedule`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] List Futures Sweeps\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfcmsweeps\r\nexport function listFuturesSweeps(\r\n    this: RESTBase\r\n): Promise<ListFuturesSweepsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/cfm/sweeps`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [DELETE] Cancel Pending Futures Sweep\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_cancelfcmsweep\r\nexport function cancelPendingFuturesSweep(\r\n    this: RESTBase\r\n): Promise<CancelPendingFuturesSweep> {\r\n    return this.request({\r\n        method: method.DELETE,\r\n        endpoint: `${API_PREFIX}/cfm/sweeps`,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    CancelOrdersRequest,\r\n    CancelOrdersResponse,\r\n    ClosePositionRequest,\r\n    ClosePositionResponse,\r\n    CreateOrderRequest,\r\n    CreateOrderResponse,\r\n    EditOrderPreviewRequest,\r\n    EditOrderPreviewResponse,\r\n    EditOrderRequest,\r\n    EditOrderResponse,\r\n    GetOrderRequest,\r\n    GetOrderResponse,\r\n    ListFillsRequest,\r\n    ListFillsResponse,\r\n    ListOrdersRequest,\r\n    ListOrdersResponse,\r\n    PreviewOrderRequest,\r\n    PreviewOrderResponse,\r\n} from './types/orders-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [POST] Create Order\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_postorder\r\nexport function createOrder(\r\n    this: RESTBase,\r\n    requestParams: CreateOrderRequest\r\n): Promise<CreateOrderResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/orders`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Cancel Orders\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_cancelorders\r\nexport function cancelOrders(\r\n    this: RESTBase,\r\n    requestParams: CancelOrdersRequest\r\n): Promise<CancelOrdersResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/orders/batch_cancel`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Edit Order\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_editorder\r\nexport function editOrder(\r\n    this: RESTBase,\r\n    requestParams: EditOrderRequest\r\n): Promise<EditOrderResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/orders/edit`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Edit Order Preview\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_previeweditorder\r\nexport function editOrderPreview(\r\n    this: RESTBase,\r\n    requestParams: EditOrderPreviewRequest\r\n): Promise<EditOrderPreviewResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/orders/edit_preview`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] List Orders\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_gethistoricalorders\r\nexport function listOrders(\r\n    this: RESTBase,\r\n    requestParams: ListOrdersRequest\r\n): Promise<ListOrdersResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/orders/historical/batch`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] List Fills\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getfills\r\nexport function listFills(\r\n    this: RESTBase,\r\n    requestParams: ListFillsRequest\r\n): Promise<ListFillsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/orders/historical/fills`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Order\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_gethistoricalorder\r\nexport function getOrder(\r\n    this: RESTBase,\r\n    { orderId }: GetOrderRequest\r\n): Promise<GetOrderResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/orders/historical/${orderId}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Preview Order\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_previeworder\r\nexport function previewOrder(\r\n    this: RESTBase,\r\n    requestParams: PreviewOrderRequest\r\n): Promise<PreviewOrderResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/orders/preview`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Close Position\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_closeposition\r\nexport function closePosition(\r\n    this: RESTBase,\r\n    requestParams: ClosePositionRequest\r\n): Promise<ClosePositionResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/orders/close_position`,\r\n        queryParams: undefined,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    GetPaymentMethodRequest,\r\n    GetPaymentMethodResponse,\r\n    ListPaymentMethodsResponse,\r\n} from './types/payments-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [GET] List Payment Methods\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpaymentmethods\r\nexport function listPaymentMethods(\r\n    this: RESTBase\r\n): Promise<ListPaymentMethodsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/payment_methods`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Payment Method\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpaymentmethod\r\nexport function getPaymentMethod(\r\n    this: RESTBase,\r\n    { paymentMethodId }: GetPaymentMethodRequest\r\n): Promise<GetPaymentMethodResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/payment_methods/${paymentMethodId}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    AllocatePortfolioRequest,\r\n    AllocatePortfolioResponse,\r\n    GetPerpetualsPortfolioSummaryRequest,\r\n    GetPerpetualsPortfolioSummaryResponse,\r\n    GetPerpetualsPositionRequest,\r\n    GetPerpetualsPositionResponse,\r\n    GetPortfolioBalancesRequest,\r\n    GetPortfolioBalancesResponse,\r\n    ListPerpetualsPositionsRequest,\r\n    ListPerpetualsPositionsResponse,\r\n    OptInOutMultiAssetCollateralRequest,\r\n    OptInOutMultiAssetCollateralResponse,\r\n} from './types/perpetuals-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [POST] Allocate Portfolio\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_allocateportfolio\r\nexport function allocatePortfolio(\r\n    this: RESTBase,\r\n    requestParams: AllocatePortfolioRequest\r\n): Promise<AllocatePortfolioResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/intx/allocate`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Perpetuals Portfolio Summary\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxportfoliosummary\r\nexport function getPerpetualsPortfolioSummary(\r\n    this: RESTBase,\r\n    { portfolioUuid }: GetPerpetualsPortfolioSummaryRequest\r\n): Promise<GetPerpetualsPortfolioSummaryResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/intx/portfolio/${portfolioUuid}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] List Perpetuals Positions\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxpositions\r\nexport function listPerpetualsPositions(\r\n    this: RESTBase,\r\n    { portfolioUuid }: ListPerpetualsPositionsRequest\r\n): Promise<ListPerpetualsPositionsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/intx/positions/${portfolioUuid}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Perpetuals Position\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxposition\r\nexport function getPerpertualsPosition(\r\n    this: RESTBase,\r\n    { portfolioUuid, symbol }: GetPerpetualsPositionRequest\r\n): Promise<GetPerpetualsPositionResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/intx/positions/${portfolioUuid}/${symbol}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Portfolio Balances\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getintxbalances\r\nexport function getPortfolioBalances(\r\n    this: RESTBase,\r\n    { portfolioUuid }: GetPortfolioBalancesRequest\r\n): Promise<GetPortfolioBalancesResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/intx/balances/${portfolioUuid}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Opt In or Out of Multi Asset Collateral\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_intxmultiassetcollateral\r\nexport function optInOutMultiAssetCollateral(\r\n    this: RESTBase,\r\n    requestParams: OptInOutMultiAssetCollateralRequest\r\n): Promise<OptInOutMultiAssetCollateralResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/intx/multi_asset_collateral`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    CreatePortfolioRequest,\r\n    CreatePortfolioResponse,\r\n    DeletePortfolioRequest,\r\n    DeletePortfolioResponse,\r\n    EditPortfolioRequest,\r\n    EditPortfolioResponse,\r\n    GetPortfolioBreakdownRequest,\r\n    GetPortfolioBreakdownResponse,\r\n    ListPortfoliosRequest,\r\n    ListPortfoliosResponse,\r\n    MovePortfolioFundsRequest,\r\n    MovePortfolioFundsResponse,\r\n} from './types/portfolios-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [GET] List Portfolios\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getportfolios\r\nexport function listPortfolios(\r\n    this: RESTBase,\r\n    requestParams: ListPortfoliosRequest\r\n): Promise<ListPortfoliosResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/portfolios`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Create Portfolio\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_createportfolio\r\nexport function createPortfolio(\r\n    this: RESTBase,\r\n    requestParams: CreatePortfolioRequest\r\n): Promise<CreatePortfolioResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/portfolios`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [POST] Move Portfolio Funds\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_moveportfoliofunds\r\nexport function movePortfolioFunds(\r\n    this: RESTBase,\r\n    requestParams: MovePortfolioFundsRequest\r\n): Promise<MovePortfolioFundsResponse> {\r\n    return this.request({\r\n        method: method.POST,\r\n        endpoint: `${API_PREFIX}/portfolios/move_funds`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Portfolio Breakdown\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getportfoliobreakdown\r\nexport function getPortfolioBreakdown(\r\n    this: RESTBase,\r\n    { portfolioUuid, ...requestParams }: GetPortfolioBreakdownRequest\r\n): Promise<GetPortfolioBreakdownResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/portfolios/${portfolioUuid}`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [DELETE] Delete Portfolio\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_deleteportfolio\r\nexport function deletePortfolio(\r\n    this: RESTBase,\r\n    { portfolioUuid }: DeletePortfolioRequest\r\n): Promise<DeletePortfolioResponse> {\r\n    return this.request({\r\n        method: method.DELETE,\r\n        endpoint: `${API_PREFIX}/portfolios/${portfolioUuid}`,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [PUT] Edit Portfolio\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_editportfolio\r\nexport function editPortfolio(\r\n    this: RESTBase,\r\n    { portfolioUuid, ...requestParams }: EditPortfolioRequest\r\n): Promise<EditPortfolioResponse> {\r\n    return this.request({\r\n        method: method.PUT,\r\n        endpoint: `${API_PREFIX}/portfolios/${portfolioUuid}`,\r\n        bodyParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    GetBestBidAskRequest,\r\n    GetBestBidAskResponse,\r\n    GetMarketTradesRequest,\r\n    GetMarketTradesResponse,\r\n    GetProductBookRequest,\r\n    GetProductBookResponse,\r\n    GetProductCandlesRequest,\r\n    GetProductCandlesResponse,\r\n    GetProductRequest,\r\n    GetProductResponse,\r\n    ListProductsRequest,\r\n    ListProductsResponse,\r\n} from './types/products-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [GET] Get Best Bid Ask\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getbestbidask\r\nexport function getBestBidAsk(\r\n    this: RESTBase,\r\n    requestParams: GetBestBidAskRequest\r\n): Promise<GetBestBidAskResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/best_bid_ask`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Product Book\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getproductbook\r\nexport function getProductBook(\r\n    this: RESTBase,\r\n    requestParams: GetProductBookRequest\r\n): Promise<GetProductBookResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/product_book`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] List Products\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getproducts\r\nexport function listProducts(\r\n    this: RESTBase,\r\n    requestParams: ListProductsRequest\r\n): Promise<ListProductsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/products`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Product\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getproduct\r\nexport function getProduct(\r\n    this: RESTBase,\r\n    { productId, ...requestParams }: GetProductRequest\r\n): Promise<GetProductResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/products/${productId}`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Product Candles\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getcandles\r\nexport function getProductCandles(\r\n    this: RESTBase,\r\n    { productId, ...requestParams }: GetProductCandlesRequest\r\n): Promise<GetProductCandlesResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/products/${productId}/candles`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n\r\n// [GET] Get Market Trades\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getmarkettrades\r\nexport function getMarketTrades(\r\n    this: RESTBase,\r\n    { productId, ...requestParams }: GetMarketTradesRequest\r\n): Promise<GetMarketTradesResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/products/${productId}/ticker`,\r\n        queryParams: requestParams,\r\n        isPublic: false,\r\n    });\r\n}\r\n","import { API_PREFIX } from '../constants';\r\nimport { RESTBase } from './rest-base';\r\nimport {\r\n    GetPublicMarketTradesRequest,\r\n    GetPublicMarketTradesResponse,\r\n    GetPublicProductBookRequest,\r\n    GetPublicProductBookResponse,\r\n    GetPublicProductCandlesRequest,\r\n    GetPublicProductCandlesResponse,\r\n    GetPublicProductRequest,\r\n    GetPublicProductResponse,\r\n    GetServerTimeResponse,\r\n    ListPublicProductsRequest,\r\n    ListPublicProductsResponse,\r\n} from './types/public-types';\r\nimport { method } from './types/request-types';\r\n\r\n// [GET] Get Server Time\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getservertime\r\nexport function getServerTime(this: RESTBase): Promise<GetServerTimeResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/time`,\r\n        isPublic: true,\r\n    });\r\n}\r\n\r\n// [GET] Get Public Product Book\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicproductbook\r\nexport function getPublicProductBook(\r\n    this: RESTBase,\r\n    requestParams: GetPublicProductBookRequest\r\n): Promise<GetPublicProductBookResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/market/product_book`,\r\n        queryParams: requestParams,\r\n        isPublic: true,\r\n    });\r\n}\r\n\r\n// [GET] List Public Products\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicproducts\r\nexport function listPublicProducts(\r\n    this: RESTBase,\r\n    requestParams: ListPublicProductsRequest\r\n): Promise<ListPublicProductsResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/market/products`,\r\n        queryParams: requestParams,\r\n        isPublic: true,\r\n    });\r\n}\r\n\r\n// [GET] Get Public Product\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicproduct\r\nexport function getPublicProduct(\r\n    this: RESTBase,\r\n    { productId }: GetPublicProductRequest\r\n): Promise<GetPublicProductResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/market/products/${productId}`,\r\n        isPublic: true,\r\n    });\r\n}\r\n\r\n// [GET] Get Public Product Candles\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpubliccandles\r\nexport function getPublicProductCandles(\r\n    this: RESTBase,\r\n    { productId, ...requestParams }: GetPublicProductCandlesRequest\r\n): Promise<GetPublicProductCandlesResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/market/products/${productId}/candles`,\r\n        queryParams: requestParams,\r\n        isPublic: true,\r\n    });\r\n}\r\n\r\n// [GET] Get Public Market Trades\r\n// Official Documentation: https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpublicmarkettrades\r\nexport function getPublicMarketTrades(\r\n    this: RESTBase,\r\n    { productId, ...requestParams }: GetPublicMarketTradesRequest\r\n): Promise<GetPublicMarketTradesResponse> {\r\n    return this.request({\r\n        method: method.GET,\r\n        endpoint: `${API_PREFIX}/products/${productId}/ticker`,\r\n        queryParams: requestParams,\r\n        isPublic: true,\r\n    });\r\n}\r\n","import { RESTBase } from './rest-base';\r\nimport * as Accounts from './accounts';\r\nimport * as Converts from './converts';\r\nimport * as DataAPI from './dataAPI';\r\nimport * as Fees from './fees';\r\nimport * as Futures from './futures';\r\nimport * as Orders from './orders';\r\nimport * as Payments from './payments';\r\nimport * as Perpetuals from './perpetuals';\r\nimport * as Portfolios from './portfolios';\r\nimport * as Products from './products';\r\nimport * as Public from './public';\r\n\r\nexport class RESTClient extends RESTBase {\r\n    constructor(key?: string | undefined, secret?: string | undefined) {\r\n        super(key, secret);\r\n    }\r\n\r\n    // =============== ACCOUNTS endpoints ===============\r\n    public getAccount = Accounts.getAccount.bind(this);\r\n    public listAccounts = Accounts.listAccounts.bind(this);\r\n\r\n    // =============== CONVERTS endpoints ===============\r\n    public createConvertQuote = Converts.createConvertQuote.bind(this);\r\n    public commitConvertTrade = Converts.commitConvertTrade.bind(this);\r\n    public getConvertTrade = Converts.getConvertTrade.bind(this);\r\n\r\n    // =============== DATA API endpoints ===============\r\n    public getAPIKeyPermissions = DataAPI.getAPIKeyPermissions.bind(this);\r\n\r\n    // =============== FEES endpoints ===============\r\n    public getTransactionSummary = Fees.getTransactionSummary.bind(this);\r\n\r\n    // =============== FUTURES endpoints ===============\r\n    public getFuturesBalanceSummary =\r\n        Futures.getFuturesBalanceSummary.bind(this);\r\n    public getIntradayMarginSetting =\r\n        Futures.getIntradayMarginSetting.bind(this);\r\n    public setIntradayMarginSetting =\r\n        Futures.setIntradayMarginSetting.bind(this);\r\n    public getCurrentMarginWindow = Futures.getCurrentMarginWindow.bind(this);\r\n    public listFuturesPositions = Futures.listFuturesPositions.bind(this);\r\n    public getFuturesPosition = Futures.getFuturesPosition.bind(this);\r\n    public scheduleFuturesSweep = Futures.scheduleFuturesSweep.bind(this);\r\n    public listFuturesSweeps = Futures.listFuturesSweeps.bind(this);\r\n    public cancelPendingFuturesSweep =\r\n        Futures.cancelPendingFuturesSweep.bind(this);\r\n\r\n    // =============== ORDERS endpoints ===============\r\n    public createOrder = Orders.createOrder.bind(this);\r\n    public cancelOrders = Orders.cancelOrders.bind(this);\r\n    public editOrder = Orders.editOrder.bind(this);\r\n    public editOrderPreview = Orders.editOrderPreview.bind(this);\r\n    public listOrders = Orders.listOrders.bind(this);\r\n    public listFills = Orders.listFills.bind(this);\r\n    public getOrder = Orders.getOrder.bind(this);\r\n    public previewOrder = Orders.previewOrder.bind(this);\r\n    public closePosition = Orders.closePosition.bind(this);\r\n\r\n    // =============== PAYMENTS endpoints ===============\r\n    public listPaymentMethods = Payments.listPaymentMethods.bind(this);\r\n    public getPaymentMethod = Payments.getPaymentMethod.bind(this);\r\n\r\n    // =============== PERPETUALS endpoints ===============\r\n    public allocatePortfolio = Perpetuals.allocatePortfolio.bind(this);\r\n    public getPerpetualsPortfolioSummary =\r\n        Perpetuals.getPerpetualsPortfolioSummary.bind(this);\r\n    public listPerpetualsPositions =\r\n        Perpetuals.listPerpetualsPositions.bind(this);\r\n    public getPerpetualsPosition = Perpetuals.getPerpertualsPosition.bind(this);\r\n    public getPortfolioBalances = Perpetuals.getPortfolioBalances.bind(this);\r\n    public optInOutMultiAssetCollateral =\r\n        Perpetuals.optInOutMultiAssetCollateral.bind(this);\r\n\r\n    // =============== PORTFOLIOS endpoints ===============\r\n    public listPortfolios = Portfolios.listPortfolios.bind(this);\r\n    public createPortfolio = Portfolios.createPortfolio.bind(this);\r\n    public deletePortfolio = Portfolios.deletePortfolio.bind(this);\r\n    public editPortfolio = Portfolios.editPortfolio.bind(this);\r\n    public movePortfolioFunds = Portfolios.movePortfolioFunds.bind(this);\r\n    public getPortfolioBreakdown = Portfolios.getPortfolioBreakdown.bind(this);\r\n\r\n    // =============== PRODUCTS endpoints ===============\r\n    public getBestBidAsk = Products.getBestBidAsk.bind(this);\r\n    public getProductBook = Products.getProductBook.bind(this);\r\n    public listProducts = Products.listProducts.bind(this);\r\n    public getProduct = Products.getProduct.bind(this);\r\n    public getProductCandles = Products.getProductCandles.bind(this);\r\n    public getMarketTrades = Products.getMarketTrades.bind(this);\r\n\r\n    // =============== PUBLIC endpoints ===============\r\n    public getServerTime = Public.getServerTime.bind(this);\r\n    public getPublicProductBook = Public.getPublicProductBook.bind(this);\r\n    public listPublicProducts = Public.listPublicProducts.bind(this);\r\n    public getPublicProduct = Public.getPublicProduct.bind(this);\r\n    public getPublicProductCandles = Public.getPublicProductCandles.bind(this);\r\n    public getPublicMarketTrades = Public.getPublicMarketTrades.bind(this);\r\n}\r\n","import { RESTClient } from \"../../advanced-sdk-ts/src/rest\";\r\nimport {\r\n    Action,\r\n    Plugin,\r\n    elizaLogger,\r\n    IAgentRuntime,\r\n    Memory,\r\n    HandlerCallback,\r\n    State,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass,\r\n    Provider,\r\n} from \"@elizaos/core\";\r\nimport { advancedTradeTemplate } from \"../templates\";\r\nimport { isAdvancedTradeContent, AdvancedTradeSchema } from \"../types\";\r\nimport { readFile } from \"fs/promises\";\r\nimport { parse } from \"csv-parse/sync\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nimport fs from \"fs\";\r\nimport { createArrayCsvWriter } from \"csv-writer\";\r\nimport {\r\n    OrderSide,\r\n    OrderConfiguration,\r\n} from \"../../advanced-sdk-ts/src/rest/types/common-types\";\r\nimport { CreateOrderResponse } from \"../../advanced-sdk-ts/src/rest/types/orders-types\";\r\n\r\n// File path setup remains the same\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst baseDir = path.resolve(__dirname, \"../../plugin-coinbase/src/plugins\");\r\nconst tradeCsvFilePath = path.join(baseDir, \"advanced_trades.csv\");\r\n\r\nconst tradeProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.debug(\"Starting tradeProvider function\");\r\n        try {\r\n            const client = new RESTClient(\r\n                runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY\r\n            );\r\n\r\n            // Get accounts and products information\r\n            let accounts, products;\r\n            try {\r\n                accounts = await client.listAccounts({});\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error fetching accounts:\", error);\r\n                return [];\r\n            }\r\n\r\n            try {\r\n                products = await client.listProducts({});\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error fetching products:\", error);\r\n                return [];\r\n            }\r\n\r\n            // Read CSV file logic remains the same\r\n            if (!fs.existsSync(tradeCsvFilePath)) {\r\n                const csvWriter = createArrayCsvWriter({\r\n                    path: tradeCsvFilePath,\r\n                    header: [\r\n                        \"Order ID\",\r\n                        \"Success\",\r\n                        \"Order Configuration\",\r\n                        \"Response\",\r\n                    ],\r\n                });\r\n                await csvWriter.writeRecords([]);\r\n            }\r\n\r\n            let csvData, records;\r\n            try {\r\n                csvData = await readFile(tradeCsvFilePath, \"utf-8\");\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error reading CSV file:\", error);\r\n                return [];\r\n            }\r\n\r\n            try {\r\n                records = parse(csvData, {\r\n                    columns: true,\r\n                    skip_empty_lines: true,\r\n                });\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error parsing CSV data:\", error);\r\n                return [];\r\n            }\r\n\r\n            return {\r\n                accounts: accounts.accounts,\r\n                products: products.products,\r\n                trades: records,\r\n            };\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in tradeProvider:\", error);\r\n            return [];\r\n        }\r\n    },\r\n};\r\n\r\nexport async function appendTradeToCsv(tradeResult: any) {\r\n    elizaLogger.debug(\"Starting appendTradeToCsv function\");\r\n    try {\r\n        const csvWriter = createArrayCsvWriter({\r\n            path: tradeCsvFilePath,\r\n            header: [\"Order ID\", \"Success\", \"Order Configuration\", \"Response\"],\r\n            append: true,\r\n        });\r\n        elizaLogger.info(\"Trade result:\", tradeResult);\r\n\r\n        // Format trade data based on success/failure\r\n        const formattedTrade = [\r\n            tradeResult.success_response?.order_id ||\r\n                tradeResult.failure_response?.order_id ||\r\n                \"\",\r\n            tradeResult.success,\r\n            // JSON.stringify(tradeResult.order_configuration || {}),\r\n            // JSON.stringify(tradeResult.success_response || tradeResult.failure_response || {})\r\n        ];\r\n\r\n        elizaLogger.info(\"Formatted trade for CSV:\", formattedTrade);\r\n        await csvWriter.writeRecords([formattedTrade]);\r\n        elizaLogger.info(\"Trade written to CSV successfully\");\r\n    } catch (error) {\r\n        elizaLogger.error(\"Error writing trade to CSV:\", error);\r\n        // Log the actual error for debugging\r\n        if (error instanceof Error) {\r\n            elizaLogger.error(\"Error details:\", error.message);\r\n        }\r\n    }\r\n}\r\n\r\nasync function hasEnoughBalance(\r\n    client: RESTClient,\r\n    currency: string,\r\n    amount: number,\r\n    side: string\r\n): Promise<boolean> {\r\n    elizaLogger.debug(\"Starting hasEnoughBalance function\");\r\n    try {\r\n        const response = await client.listAccounts({});\r\n        const accounts = JSON.parse(response);\r\n        elizaLogger.info(\"Accounts:\", accounts);\r\n        const checkCurrency = side === \"BUY\" ? \"USD\" : currency;\r\n        elizaLogger.info(\r\n            `Checking balance for ${side} order of ${amount} ${checkCurrency}`\r\n        );\r\n\r\n        // Find account with exact currency match\r\n        const account = accounts?.accounts.find(\r\n            (acc) =>\r\n                acc.currency === checkCurrency &&\r\n                (checkCurrency === \"USD\"\r\n                    ? acc.type === \"ACCOUNT_TYPE_FIAT\"\r\n                    : acc.type === \"ACCOUNT_TYPE_CRYPTO\")\r\n        );\r\n\r\n        if (!account) {\r\n            elizaLogger.error(`No ${checkCurrency} account found`);\r\n            return false;\r\n        }\r\n\r\n        const available = parseFloat(account.available_balance.value);\r\n        // Add buffer for fees only on USD purchases\r\n        const requiredAmount = side === \"BUY\" ? amount * 1.01 : amount;\r\n        elizaLogger.info(\r\n            `Required amount (including buffer): ${requiredAmount} ${checkCurrency}`\r\n        );\r\n\r\n        const hasBalance = available >= requiredAmount;\r\n        elizaLogger.info(`Has sufficient balance: ${hasBalance}`);\r\n\r\n        return hasBalance;\r\n    } catch (error) {\r\n        elizaLogger.error(\"Balance check failed with error:\", {\r\n            error: error instanceof Error ? error.message : \"Unknown error\",\r\n            currency,\r\n            amount,\r\n            side,\r\n        });\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const executeAdvancedTradeAction: Action = {\r\n    name: \"EXECUTE_ADVANCED_TRADE\",\r\n    description: \"Execute a trade using Coinbase Advanced Trading API\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        return (\r\n            !!(\r\n                runtime.getSetting(\"COINBASE_API_KEY\") ||\r\n                process.env.COINBASE_API_KEY\r\n            ) &&\r\n            !!(\r\n                runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ||\r\n                process.env.COINBASE_PRIVATE_KEY\r\n            )\r\n        );\r\n    },\r\n    similes: [\r\n        \"EXECUTE_ADVANCED_TRADE\",\r\n        \"ADVANCED_MARKET_ORDER\",\r\n        \"ADVANCED_LIMIT_ORDER\",\r\n        \"COINBASE_PRO_TRADE\",\r\n        \"PROFESSIONAL_TRADE\",\r\n    ],\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        let client: RESTClient;\r\n\r\n        // Initialize client\r\n        elizaLogger.debug(\"Starting advanced trade client initialization\");\r\n        try {\r\n            client = new RESTClient(\r\n                runtime.getSetting(\"COINBASE_API_KEY\") ??\r\n                    process.env.COINBASE_API_KEY,\r\n                runtime.getSetting(\"COINBASE_PRIVATE_KEY\") ??\r\n                    process.env.COINBASE_PRIVATE_KEY\r\n            );\r\n            elizaLogger.info(\"Advanced trade client initialized\");\r\n        } catch (error) {\r\n            elizaLogger.error(\"Client initialization failed:\", error);\r\n            callback(\r\n                {\r\n                    text: \"Failed to initialize trading client. Please check your API credentials.\",\r\n                },\r\n                []\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Generate trade details\r\n        let tradeDetails;\r\n        elizaLogger.debug(\"Starting trade details generation\");\r\n        try {\r\n            tradeDetails = await generateObject({\r\n                runtime,\r\n                context: composeContext({\r\n                    state,\r\n                    template: advancedTradeTemplate,\r\n                }),\r\n                modelClass: ModelClass.LARGE,\r\n                schema: AdvancedTradeSchema,\r\n            });\r\n            elizaLogger.info(\"Trade details generated:\", tradeDetails.object);\r\n        } catch (error) {\r\n            elizaLogger.error(\"Trade details generation failed:\", error);\r\n            callback(\r\n                {\r\n                    text: \"Failed to generate trade details. Please provide valid trading parameters.\",\r\n                },\r\n                []\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Validate trade content\r\n        if (!isAdvancedTradeContent(tradeDetails.object)) {\r\n            elizaLogger.error(\"Invalid trade content:\", tradeDetails.object);\r\n            callback(\r\n                {\r\n                    text: \"Invalid trade details. Please check your input parameters.\",\r\n                },\r\n                []\r\n            );\r\n            return;\r\n        }\r\n\r\n        const { productId, amount, side, orderType, limitPrice } =\r\n            tradeDetails.object;\r\n\r\n        // Configure order\r\n        let orderConfiguration: OrderConfiguration;\r\n        elizaLogger.debug(\"Starting order configuration\");\r\n        try {\r\n            if (orderType === \"MARKET\") {\r\n                orderConfiguration =\r\n                    side === \"BUY\"\r\n                        ? {\r\n                              market_market_ioc: {\r\n                                  quote_size: amount.toString(),\r\n                              },\r\n                          }\r\n                        : {\r\n                              market_market_ioc: {\r\n                                  base_size: amount.toString(),\r\n                              },\r\n                          };\r\n            } else {\r\n                if (!limitPrice) {\r\n                    throw new Error(\"Limit price is required for limit orders\");\r\n                }\r\n                orderConfiguration = {\r\n                    limit_limit_gtc: {\r\n                        baseSize: amount.toString(),\r\n                        limitPrice: limitPrice.toString(),\r\n                        postOnly: false,\r\n                    },\r\n                };\r\n            }\r\n            elizaLogger.info(\r\n                \"Order configuration created:\",\r\n                orderConfiguration\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Order configuration failed:\", error);\r\n            callback(\r\n                {\r\n                    text:\r\n                        error instanceof Error\r\n                            ? error.message\r\n                            : \"Failed to configure order parameters.\",\r\n                },\r\n                []\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Execute trade\r\n        let order: CreateOrderResponse;\r\n        try {\r\n            elizaLogger.debug(\"Executing the trade\");\r\n            if (\r\n                !(await hasEnoughBalance(\r\n                    client,\r\n                    productId.split(\"-\")[0],\r\n                    amount,\r\n                    side\r\n                ))\r\n            ) {\r\n                callback(\r\n                    {\r\n                        text: `Insufficient ${side === \"BUY\" ? \"USD\" : productId.split(\"-\")[0]} balance to execute this trade`,\r\n                    },\r\n                    []\r\n                );\r\n                return;\r\n            }\r\n\r\n            order = await client.createOrder({\r\n                clientOrderId: crypto.randomUUID(),\r\n                productId,\r\n                side: side === \"BUY\" ? OrderSide.BUY : OrderSide.SELL,\r\n                orderConfiguration,\r\n            });\r\n\r\n            elizaLogger.info(\"Trade executed successfully:\", order);\r\n        } catch (error) {\r\n            elizaLogger.error(\"Trade execution failed:\", error?.message);\r\n            callback(\r\n                {\r\n                    text: `Failed to execute trade: ${error instanceof Error ? error.message : \"Unknown error occurred\"}`,\r\n                },\r\n                []\r\n            );\r\n            return;\r\n        }\r\n        // Log trade to CSV\r\n        try {\r\n            // await appendTradeToCsv(order);\r\n            elizaLogger.info(\"Trade logged to CSV\");\r\n        } catch (csvError) {\r\n            elizaLogger.warn(\"Failed to log trade to CSV:\", csvError);\r\n            // Continue execution as this is non-critical\r\n        }\r\n\r\n        callback(\r\n            {\r\n                text: `Advanced Trade executed successfully:\r\n- Product: ${productId}\r\n- Type: ${orderType} Order\r\n- Side: ${side}\r\n- Amount: ${amount}\r\n- ${orderType === \"LIMIT\" ? `- Limit Price: ${limitPrice}\\n` : \"\"}- Order ID: ${order.order_id}\r\n- Status: ${order.success}\r\n- Order Id:  ${order.order_id}\r\n- Response: ${JSON.stringify(order.response)}\r\n- Order Configuration: ${JSON.stringify(order.order_configuration)}`,\r\n            },\r\n            []\r\n        );\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Place an advanced market order to buy $1 worth of BTC\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Advanced Trade executed successfully:\r\n- Product: BTC-USD\r\n- Type: Market Order\r\n- Side: BUY\r\n- Amount: 1000\r\n- Order ID: CB-ADV-12345\r\n- Success: true\r\n- Response: {\"success_response\":{}}\r\n- Order Configuration: {\"market_market_ioc\":{\"quote_size\":\"1000\"}}`,\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"Set a limit order to sell 0.5 ETH at $2000\" },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: `Advanced Trade executed successfully:\r\n- Product: ETH-USD\r\n- Type: Limit Order\r\n- Side: SELL\r\n- Amount: 0.5\r\n- Limit Price: 2000\r\n- Order ID: CB-ADV-67890\r\n- Success: true\r\n- Response: {\"success_response\":{}}\r\n- Order Configuration: {\"limit_limit_gtc\":{\"baseSize\":\"0.5\",\"limitPrice\":\"2000\",\"postOnly\":false}}`,\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n\r\nexport const advancedTradePlugin: Plugin = {\r\n    name: \"advancedTradePlugin\",\r\n    description: \"Enables advanced trading using Coinbase Advanced Trading API\",\r\n    actions: [executeAdvancedTradeAction],\r\n    providers: [tradeProvider],\r\n};\r\n","import { coinbaseMassPaymentsPlugin } from \"./plugins/massPayments\";\r\nimport { coinbaseCommercePlugin } from \"./plugins/commerce\";\r\nimport { tradePlugin } from \"./plugins/trade\";\r\nimport { tokenContractPlugin } from \"./plugins/tokenContract\";\r\nimport { webhookPlugin } from \"./plugins/webhooks\";\r\nimport { advancedTradePlugin } from \"./plugins/advancedTrade\";\r\n\r\nexport const plugins = {\r\n    coinbaseMassPaymentsPlugin,\r\n    coinbaseCommercePlugin,\r\n    tradePlugin,\r\n    tokenContractPlugin,\r\n    webhookPlugin,\r\n    advancedTradePlugin,\r\n};\r\n\r\nexport * from \"./plugins/massPayments\";\r\nexport * from \"./plugins/commerce\";\r\nexport * from \"./plugins/trade\";\r\nexport * from \"./plugins/tokenContract\";\r\nexport * from \"./plugins/webhooks\";\r\nexport * from \"./plugins/advancedTrade\";\r\n"],"mappings":"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","names":["Coinbase","elizaLogger","util","objectUtil","path","errorUtil","path","errorMap","ctx","result","issues","elements","processed","ZodFirstPartyTypeKind","path","fileURLToPath","fs","createArrayCsvWriter","Coinbase","networkId","csvWriter","__filename","fileURLToPath","__dirname","path","baseDir","elizaLogger","Coinbase","fs","createArrayCsvWriter","composeContext","elizaLogger","generateObject","ModelClass","Coinbase","elizaLogger","composeContext","generateObject","ModelClass","chargeDetails","balances","transactions","Coinbase","elizaLogger","composeContext","generateObject","ModelClass","readFile","parse","path","fileURLToPath","fs","createArrayCsvWriter","__filename","__dirname","baseDir","tradeCsvFilePath","elizaLogger","Coinbase","composeContext","generateObject","ModelClass","Coinbase","elizaLogger","composeContext","generateObject","ModelClass","path","fileURLToPath","createArrayCsvWriter","fs","__filename","fileURLToPath","__dirname","path","baseDir","elizaLogger","Coinbase","fs","csvWriter","createArrayCsvWriter","composeContext","generateObject","ModelClass","method","Coinbase","Webhook","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","Coinbase","Webhook","composeContext","generateObject","ModelClass","crypto","fetch","method","url","fetch","elizaLogger","composeContext","generateObject","ModelClass","readFile","parse","path","fileURLToPath","fs","createArrayCsvWriter","__filename","fileURLToPath","__dirname","path","baseDir","tradeCsvFilePath","tradeProvider","elizaLogger","fs","createArrayCsvWriter","readFile","parse","appendTradeToCsv","generateObject","composeContext","ModelClass"]}