{"version":3,"sources":["../src/services/teeLogService.ts","../src/types.ts","../src/adapters/sqliteTables.ts","../src/adapters/sqliteDAO.ts","../src/services/teeLogManager.ts","../../../node_modules/uuid/dist/esm-node/rng.js","../../../node_modules/uuid/dist/esm-node/stringify.js","../../../node_modules/uuid/dist/esm-node/native.js","../../../node_modules/uuid/dist/esm-node/v4.js","../src/plugins/teeLogPlugin.ts","../src/index.ts"],"sourcesContent":["import { IAgentRuntime, Service, ServiceType, ITeeLogService } from \"@elizaos/core\";\r\nimport { TEEMode } from \"@elizaos/plugin-tee\";\r\nimport { SqliteTeeLogDAO } from \"../adapters/sqliteDAO\";\r\nimport { TeeType, TeeLogDAO, TeeAgent, TeeLog, TeeLogQuery, PageQuery } from \"../types\";\r\nimport { TeeLogManager } from \"./teeLogManager\";\r\nimport Database from \"better-sqlite3\";\r\n\r\nexport class TeeLogService extends Service implements ITeeLogService {\r\n    private readonly dbPath = \"./data/tee_log.sqlite\";\r\n\r\n    private initialized: boolean = false;\r\n    private enableTeeLog: boolean = false;\r\n    private teeType: TeeType;\r\n    private teeMode: TEEMode = TEEMode.OFF; // Only used for plugin-tee with TDX dstack\r\n\r\n    private teeLogDAO: TeeLogDAO;\r\n    private teeLogManager: TeeLogManager;\r\n\r\n\r\n    getInstance(): TeeLogService {\r\n        return this;\r\n    }\r\n\r\n    static get serviceType(): ServiceType {\r\n        return ServiceType.TEE_LOG;\r\n    }\r\n\r\n    async initialize(runtime: IAgentRuntime): Promise<void> {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n\r\n        const enableValues = [\"true\", \"1\", \"yes\", \"enable\", \"enabled\", \"on\"];\r\n\r\n        const enableTeeLog = runtime.getSetting(\"ENABLE_TEE_LOG\");\r\n        if (enableTeeLog === null) {\r\n            throw new Error(\"ENABLE_TEE_LOG is not set.\");\r\n        }\r\n        this.enableTeeLog = enableValues.includes(enableTeeLog.toLowerCase());\r\n        if (!this.enableTeeLog) {\r\n            console.log(\"TEE log is not enabled.\");\r\n            return;\r\n        }\r\n\r\n        const runInSgx = runtime.getSetting(\"SGX\");\r\n        const teeMode = runtime.getSetting(\"TEE_MODE\");\r\n        const walletSecretSalt = runtime.getSetting(\"WALLET_SECRET_SALT\");\r\n\r\n        const useSgxGramine = runInSgx && enableValues.includes(runInSgx.toLowerCase());\r\n        const useTdxDstack = !teeMode && teeMode !== TEEMode.OFF && walletSecretSalt;\r\n\r\n        if (useSgxGramine && useTdxDstack) {\r\n            throw new Error(\"Cannot configure both SGX and TDX at the same time.\");\r\n        } else if (useSgxGramine) {\r\n            this.teeType = TeeType.SGX_GRAMINE;\r\n        } else if (useTdxDstack) {\r\n            this.teeType = TeeType.TDX_DSTACK;\r\n        } else {\r\n            throw new Error(\"Invalid TEE configuration.\");\r\n        }\r\n\r\n        const db = new Database(this.dbPath);\r\n        this.teeLogDAO = new SqliteTeeLogDAO(db);\r\n        await this.teeLogDAO.initialize();\r\n        this.teeLogManager = new TeeLogManager(this.teeLogDAO, this.teeType, this.teeMode);\r\n\r\n        const isRegistered = await this.teeLogManager.registerAgent(\r\n            runtime?.agentId,\r\n            runtime?.character?.name,\r\n        );\r\n        if (!isRegistered) {\r\n            throw new Error(`Failed to register agent ${runtime.agentId}`);\r\n        }\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    async log(agentId: string, roomId: string, userId: string, type: string, content: string): Promise<boolean> {\r\n        if (!this.enableTeeLog) {\r\n            return false;\r\n        }\r\n\r\n        return this.teeLogManager.log(agentId, roomId, userId, type, content);\r\n    }\r\n\r\n    async getAllAgents(): Promise<TeeAgent[]> {\r\n        if (!this.enableTeeLog) {\r\n            return [];\r\n        }\r\n\r\n        return this.teeLogManager.getAllAgents();\r\n    }\r\n\r\n    async getAgent(agentId: string): Promise<TeeAgent | undefined> {\r\n        if (!this.enableTeeLog) {\r\n            return undefined;\r\n        }\r\n\r\n        return this.teeLogManager.getAgent(agentId);\r\n    }\r\n\r\n    async getLogs(query: TeeLogQuery, page: number, pageSize: number): Promise<PageQuery<TeeLog[]>> {\r\n        if (!this.enableTeeLog) {\r\n            return {\r\n                data: [],\r\n                total: 0,\r\n                page: page,\r\n                pageSize: pageSize,\r\n            };\r\n        }\r\n\r\n        return this.teeLogManager.getLogs(query, page, pageSize);\r\n    }\r\n\r\n    async generateAttestation(userReport: string): Promise<string> {\r\n        return this.teeLogManager.generateAttestation(userReport);\r\n    }\r\n}\r\n\r\nexport default TeeLogService;\r\n","export enum TeeType {\r\n    SGX_GRAMINE = \"sgx_gramine\",\r\n    TDX_DSTACK = \"tdx_dstack\",\r\n}\r\n\r\n// Represents a log entry in the TeeLog table, containing details about agent activities.\r\nexport interface TeeLog {\r\n    id: string;\r\n    agentId: string;\r\n    roomId: string;\r\n    userId: string;\r\n    type: string;\r\n    content: string;\r\n    timestamp: number;\r\n    signature: string;\r\n}\r\n\r\nexport interface TeeLogQuery {\r\n    agentId?: string;\r\n    roomId?: string;\r\n    userId?: string;\r\n    type?: string;\r\n    containsContent?: string;\r\n    startTimestamp?: number;\r\n    endTimestamp?: number;\r\n}\r\n\r\n// Represents an agent in the TeeAgent table, containing details about the agent.\r\nexport interface TeeAgent {\r\n    id: string; // Primary key\r\n    // Allow duplicate agentId.\r\n    // This is to support the case where the same agentId is registered multiple times.\r\n    // Each time the agent restarts, we will generate a new keypair and attestation.\r\n    agentId: string;\r\n    agentName: string;\r\n    createdAt: number;\r\n    publicKey: string;\r\n    attestation: string;\r\n}\r\n\r\nexport interface PageQuery<Result = any> {\r\n    page: number;\r\n    pageSize: number;\r\n    total?: number;\r\n    data?: Result;\r\n}\r\n\r\nexport abstract class TeeLogDAO<DB = any> {\r\n    db: DB;\r\n\r\n    abstract initialize(): Promise<void>;\r\n\r\n    abstract addLog(log: TeeLog): Promise<boolean>;\r\n\r\n    abstract getPagedLogs(\r\n        query: TeeLogQuery,\r\n        page: number,\r\n        pageSize: number\r\n    ): Promise<PageQuery<TeeLog[]>>;\r\n\r\n    abstract addAgent(agent: TeeAgent): Promise<boolean>;\r\n\r\n    abstract getAgent(agentId: string): Promise<TeeAgent>;\r\n\r\n    abstract getAllAgents(): Promise<TeeAgent[]>;\r\n}","export const sqliteTables = `\r\nBEGIN TRANSACTION;\r\n\r\n-- Table: tee_logs\r\nCREATE TABLE IF NOT EXISTS \"tee_logs\" (\r\n    \"id\" TEXT PRIMARY KEY,\r\n    \"agentId\" TEXT NOT NULL,\r\n    \"roomId\" TEXT NOT NULL,\r\n    \"userId\" TEXT NOT NULL,\r\n    \"type\" TEXT NOT NULL,\r\n    \"content\" TEXT NOT NULL,\r\n    \"timestamp\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    \"signature\" TEXT NOT NULL\r\n);\r\n\r\n-- Table: tee_agents\r\nCREATE TABLE IF NOT EXISTS \"tee_agents\" (\r\n    \"id\" TEXT PRIMARY KEY,\r\n    \"agentId\" TEXT NOT NULL,\r\n    \"agentName\" TEXT NOT NULL,\r\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    \"publicKey\" TEXT NOT NULL,\r\n    \"attestation\" TEXT NOT NULL\r\n);\r\n\r\nCOMMIT;`;\r\n","import { Database } from \"better-sqlite3\";\r\nimport { TeeLogDAO, TeeAgent, TeeLog, TeeLogQuery, PageQuery } from \"../types.ts\";\r\nimport { sqliteTables } from \"./sqliteTables.ts\";\r\n\r\nexport class SqliteTeeLogDAO extends TeeLogDAO {\r\n    constructor(db: Database) {\r\n        super();\r\n        this.db = db;\r\n    }\r\n\r\n    async initialize(): Promise<void> {\r\n        this.db.exec(sqliteTables);\r\n    }\r\n\r\n    async addLog(log: TeeLog): Promise<boolean> {\r\n        const stmt = this.db.prepare(\r\n            \"INSERT INTO tee_logs (id, agentId, roomId, userId, type, content, timestamp, signature) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"\r\n        );\r\n        try {\r\n            stmt.run(log.id, log.agentId, log.roomId, log.userId, log.type, log.content, log.timestamp, log.signature);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error adding log to database\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async getPagedLogs(query: TeeLogQuery, page: number, pageSize: number): Promise<PageQuery<TeeLog[]>> {\r\n        if (page < 1) {\r\n            page = 1;\r\n        }\r\n        const offset = (page - 1) * pageSize;\r\n        const limit = pageSize;\r\n\r\n        const whereConditions = [];\r\n        const params = [];\r\n\r\n        if (query.agentId && query.agentId !== \"\") {\r\n            whereConditions.push(\"agentId = ?\");\r\n            params.push(query.agentId);\r\n        }\r\n        if (query.roomId && query.roomId !== \"\") {\r\n            whereConditions.push(\"roomId = ?\");\r\n            params.push(query.roomId);\r\n        }\r\n        if (query.userId && query.userId !== \"\") {\r\n            whereConditions.push(\"userId = ?\");\r\n            params.push(query.userId);\r\n        }\r\n        if (query.type && query.type !== \"\") {\r\n            whereConditions.push(\"type = ?\");\r\n            params.push(query.type);\r\n        }\r\n        if (query.containsContent && query.containsContent !== \"\") {\r\n            whereConditions.push(\"content LIKE ?\");\r\n            params.push(`%${query.containsContent}%`);\r\n        }\r\n        if (query.startTimestamp) {\r\n            whereConditions.push(\"timestamp >= ?\");\r\n            params.push(query.startTimestamp);\r\n        }\r\n        if (query.endTimestamp) {\r\n            whereConditions.push(\"timestamp <= ?\");\r\n            params.push(query.endTimestamp);\r\n        }\r\n\r\n        const whereClause =\r\n            whereConditions.length > 0 ? `WHERE ${whereConditions.join(\" AND \")}` : \"\";\r\n\r\n        try {\r\n            const total_stmt = this.db.prepare(\r\n                `SELECT COUNT(*) as total FROM tee_logs ${whereClause}`\r\n            );\r\n            const total = total_stmt.get(params).total;\r\n\r\n            const logs_stmt = this.db.prepare(\r\n                `SELECT * FROM tee_logs ${whereClause} ORDER BY timestamp ASC LIMIT ? OFFSET ?`\r\n            );\r\n            const logs = logs_stmt.all(...params, limit, offset);\r\n\r\n            return {\r\n                page,\r\n                pageSize,\r\n                total,\r\n                data: logs,\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error getting paged logs from database\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async addAgent(agent: TeeAgent): Promise<boolean> {\r\n        const stmt = this.db.prepare(\r\n            \"INSERT INTO tee_agents (id, agentId, agentName, createdAt, publicKey, attestation) VALUES (?, ?, ?, ?, ?, ?)\"\r\n        );\r\n        try {\r\n            stmt.run(agent.id, agent.agentId, agent.agentName, agent.createdAt, agent.publicKey, agent.attestation);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error adding agent to database\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async getAgent(agentId: string): Promise<TeeAgent | null> {\r\n        const stmt = this.db.prepare(\"SELECT * FROM tee_agents WHERE agentId = ? ORDER BY createdAt DESC LIMIT 1\");\r\n        try {\r\n            return stmt.get(agentId);\r\n        } catch (error) {\r\n            console.error(\"Error getting agent from database\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getAllAgents(): Promise<TeeAgent[]> {\r\n        const stmt = this.db.prepare(\"SELECT * FROM tee_agents\");\r\n        try {\r\n            return stmt.all();\r\n        } catch (error) {\r\n            console.error(\"Error getting all agents from database\", error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","import {\r\n    TEEMode,\r\n    RemoteAttestationProvider as TdxAttestationProvider,\r\n} from \"@elizaos/plugin-tee\";\r\nimport { SgxAttestationProvider } from \"@elizaos/plugin-sgx\";\r\nimport { TeeType, TeeLogDAO, TeeAgent, TeeLog, TeeLogQuery, PageQuery } from \"../types\";\r\nimport elliptic from \"elliptic\";\r\nimport { v4 } from \"uuid\";\r\n\r\nexport class TeeLogManager {\r\n    private teeLogDAO: TeeLogDAO;\r\n    private teeType: TeeType;\r\n    private teeMode: TEEMode; // Only used for plugin-tee with TDX dstack\r\n\r\n    // Map of agentId to its key pair\r\n    // These keypairs only store in memory.\r\n    // When the agent restarts, we will generate new keypair.\r\n    private keyPairs: Map<string, elliptic.ec.KeyPair> = new Map();\r\n\r\n    constructor(teeLogDAO: TeeLogDAO, teeType: TeeType, teeMode: TEEMode) {\r\n        this.teeLogDAO = teeLogDAO;\r\n        this.teeType = teeType;\r\n        this.teeMode = teeMode;\r\n    }\r\n\r\n    public async registerAgent(agentId: string, agentName: string): Promise<boolean> {\r\n        if (!agentId) {\r\n            throw new Error(\"Agent ID is required\");\r\n        }\r\n\r\n        const keyPair = this.generateKeyPair();\r\n        this.keyPairs.set(agentId, keyPair);\r\n\r\n        const publicKey = keyPair.getPublic().encode('hex', true);\r\n        const attestation = await this.generateAttestation(publicKey);\r\n\r\n        const new_agent = {\r\n            id: v4(),\r\n            agentId,\r\n            agentName: agentName || \"\",\r\n            createdAt: new Date().getTime(),\r\n            publicKey,\r\n            attestation,\r\n        };\r\n\r\n        console.log(\"registerAgent new_agent\", new_agent);\r\n\r\n        return this.teeLogDAO.addAgent(new_agent);\r\n    }\r\n\r\n    public async getAllAgents(): Promise<TeeAgent[]> {\r\n        return this.teeLogDAO.getAllAgents();\r\n    }\r\n\r\n    public async getAgent(agentId: string): Promise<TeeAgent | undefined> {\r\n        return this.teeLogDAO.getAgent(agentId);\r\n    }\r\n\r\n    public async log(agentId: string, roomId: string, userId: string, type: string, content: string): Promise<boolean> {\r\n        const keyPair = this.keyPairs.get(agentId);\r\n        if (!keyPair) {\r\n            throw new Error(`Agent ${agentId} not found`);\r\n        }\r\n\r\n        const timestamp = new Date().getTime();\r\n\r\n        // Join the information into a single string\r\n        const messageToSign = `${agentId}|${roomId}|${userId}|${type}|${content}|${timestamp}`;\r\n\r\n        // Sign the joined message\r\n        const signature = \"0x\" + keyPair.sign(messageToSign).toDER('hex');\r\n\r\n        return this.teeLogDAO.addLog({\r\n            id: v4(),\r\n            agentId,\r\n            roomId,\r\n            userId,\r\n            type,\r\n            content,\r\n            timestamp,\r\n            signature,\r\n        });\r\n    }\r\n\r\n    public async getLogs(query: TeeLogQuery, page: number, pageSize: number): Promise<PageQuery<TeeLog[]>> {\r\n        return this.teeLogDAO.getPagedLogs(query, page, pageSize);\r\n    }\r\n\r\n    public generateKeyPair(): elliptic.ec.KeyPair {\r\n        const ec = new elliptic.ec('secp256k1');\r\n        const key = ec.genKeyPair();\r\n        return key;\r\n    }\r\n\r\n    public async generateAttestation(userReport: string): Promise<string> {\r\n        if (this.teeType === TeeType.SGX_GRAMINE) {\r\n            const sgxAttestationProvider = new SgxAttestationProvider();\r\n            const sgxAttestation = await sgxAttestationProvider.generateAttestation(userReport);\r\n            return JSON.stringify(sgxAttestation);\r\n        } else if (this.teeType === TeeType.TDX_DSTACK) {\r\n            const tdxAttestationProvider = new TdxAttestationProvider();\r\n            const tdxAttestation = await tdxAttestationProvider.generateAttestation(userReport);\r\n            return JSON.stringify(tdxAttestation);\r\n        } else {\r\n            throw new Error(\"Invalid TEE type\");\r\n        }\r\n    }\r\n}\r\n","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { Plugin } from \"@elizaos/core\";\r\nimport { TeeLogService } from \"../services/teeLogService\";\r\n\r\nexport const teeLogPlugin: Plugin = {\r\n    name: \"TEE-log\",\r\n    description: \"Support verifiable logging for eliza running in TEE\",\r\n    actions: [],\r\n    providers: [],\r\n    evaluators: [],\r\n    services: [new TeeLogService()],\r\n    clients: [],\r\n};\r\n","import { teeLogPlugin } from './plugins/teeLogPlugin';\r\nimport { TeeLogService } from './services/teeLogService';\r\n\r\nexport * from './plugins/teeLogPlugin';\r\nexport * from './types';\r\nexport { TeeLogService };\r\n\r\nexport default teeLogPlugin;\r\n\r\n"],"mappings":"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","names":["TEEMode","TeeType","crypto","TEEMode"]}