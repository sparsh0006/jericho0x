{"version":3,"sources":["../src/actions/registerIP.ts","../src/functions/uploadJSONToIPFS.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/licenseIP.ts","../src/queries.ts","../src/actions/attachTerms.ts","../src/actions/getAvailableLicenses.ts","../src/lib/api.ts","../src/actions/getIPDetails.ts","../src/index.ts"],"sourcesContent":["import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport pinataSDK from \"@pinata/sdk\";\r\nimport { RegisterIpResponse } from \"@story-protocol/core-sdk\";\r\nimport { createHash } from \"crypto\";\r\nimport { uploadJSONToIPFS } from \"../functions/uploadJSONToIPFS\";\r\nimport { WalletProvider } from \"../providers/wallet\";\r\nimport { registerIPTemplate } from \"../templates\";\r\nimport { RegisterIPParams } from \"../types\";\r\n\r\nexport { registerIPTemplate };\r\n\r\nexport class RegisterIPAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async registerIP(\r\n        params: RegisterIPParams,\r\n        runtime: IAgentRuntime\r\n    ): Promise<RegisterIpResponse> {\r\n        const storyClient = this.walletProvider.getStoryClient();\r\n\r\n        // configure ip metadata\r\n        const ipMetadata = storyClient.ipAsset.generateIpMetadata({\r\n            title: params.title,\r\n            description: params.description,\r\n            ipType: params.ipType ? params.ipType : undefined,\r\n        });\r\n\r\n        // configure nft metadata\r\n        const nftMetadata = {\r\n            name: params.title,\r\n            description: params.description,\r\n        };\r\n\r\n        const pinataJWT = runtime.getSetting(\"PINATA_JWT\");\r\n        if (!pinataJWT) throw new Error(\"PINATA_JWT not configured\");\r\n        const pinata = new pinataSDK({ pinataJWTKey: pinataJWT });\r\n\r\n        // upload metadata to ipfs\r\n        const ipIpfsHash = await uploadJSONToIPFS(pinata, ipMetadata);\r\n        const ipHash = createHash(\"sha256\")\r\n            .update(JSON.stringify(ipMetadata))\r\n            .digest(\"hex\");\r\n        const nftIpfsHash = await uploadJSONToIPFS(pinata, nftMetadata);\r\n        const nftHash = createHash(\"sha256\")\r\n            .update(JSON.stringify(nftMetadata))\r\n            .digest(\"hex\");\r\n\r\n        // register ip\r\n        const response =\r\n            await storyClient.ipAsset.mintAndRegisterIpAssetWithPilTerms({\r\n                spgNftContract: \"0xC81B2cbEFD1aA0227bf513729580d3CF40fd61dF\",\r\n                terms: [],\r\n                ipMetadata: {\r\n                    ipMetadataURI: `https://ipfs.io/ipfs/${ipIpfsHash}`,\r\n                    ipMetadataHash: `0x${ipHash}`,\r\n                    nftMetadataURI: `https://ipfs.io/ipfs/${nftIpfsHash}`,\r\n                    nftMetadataHash: `0x${nftHash}`,\r\n                },\r\n                txOptions: { waitForTransaction: true },\r\n            });\r\n\r\n        return response;\r\n    }\r\n}\r\n\r\nexport const registerIPAction = {\r\n    name: \"REGISTER_IP\",\r\n    description: \"Register an NFT as an IP Asset on Story\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting REGISTER_IP handler...\");\r\n\r\n        // initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const registerIPContext = composeContext({\r\n            state,\r\n            template: registerIPTemplate,\r\n        });\r\n\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: registerIPContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        const walletProvider = new WalletProvider(runtime);\r\n        const action = new RegisterIPAction(walletProvider);\r\n        try {\r\n            const response = await action.registerIP(content, runtime);\r\n            callback?.({\r\n                text: `Successfully registered IP ID: ${response.ipId}. Transaction Hash: ${response.txHash}. View it on the explorer: https://explorer.story.foundation/ipa/${response.ipId}`,\r\n            });\r\n            return true;\r\n        } catch (e) {\r\n            elizaLogger.error(\"Error registering IP:\", e.message);\r\n            callback?.({ text: `Error registering IP: ${e.message}` });\r\n            return false;\r\n        }\r\n    },\r\n    template: registerIPTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I would like to register my IP.\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Sure! Please provide the title and description of your IP.\",\r\n                    action: \"REGISTER_IP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Register my IP titled 'My IP' with the description 'This is my IP'\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"REGISTER_IP\", \"REGISTER_NFT\"],\r\n};\r\n","import PinataClient from \"@pinata/sdk\";\r\n\r\nexport async function uploadJSONToIPFS(\r\n    pinata: PinataClient,\r\n    jsonMetadata: any\r\n): Promise<string> {\r\n    const { IpfsHash } = await pinata.pinJSONToIPFS(jsonMetadata);\r\n    return IpfsHash;\r\n}\r\n","import { IAgentRuntime, Provider, Memory, State } from \"@elizaos/core\";\r\nimport {\r\n    createPublicClient,\r\n    createWalletClient,\r\n    http,\r\n    formatUnits,\r\n    type PublicClient,\r\n    type WalletClient,\r\n    type Chain,\r\n    type HttpTransport,\r\n    type Address,\r\n    Account,\r\n    Transport,\r\n} from \"viem\";\r\nimport { storyOdyssey } from \"viem/chains\";\r\nimport type { SupportedChain, ChainMetadata } from \"../types\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport { StoryClient, StoryConfig } from \"@story-protocol/core-sdk\";\r\n\r\nexport const DEFAULT_CHAIN_CONFIGS: Record<SupportedChain, ChainMetadata> = {\r\n    odyssey: {\r\n        chainId: 1516,\r\n        name: \"Odyssey Testnet\",\r\n        chain: storyOdyssey,\r\n        rpcUrl: \"https://odyssey.storyrpc.io/\",\r\n        nativeCurrency: {\r\n            name: \"IP\",\r\n            symbol: \"IP\",\r\n            decimals: 18,\r\n        },\r\n        blockExplorerUrl: \"https://odyssey.storyscan.xyz\",\r\n    },\r\n} as const;\r\n\r\nexport class WalletProvider {\r\n    private storyClient: StoryClient;\r\n    private publicClient: PublicClient<\r\n        HttpTransport,\r\n        Chain,\r\n        Account | undefined\r\n    >;\r\n    private walletClient: WalletClient;\r\n    private address: Address;\r\n    runtime: IAgentRuntime;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\r\n        if (!privateKey) throw new Error(\"STORY_PRIVATE_KEY not configured\");\r\n\r\n        this.runtime = runtime;\r\n\r\n        const account = privateKeyToAccount(privateKey as Address);\r\n        this.address = account.address;\r\n\r\n        const config: StoryConfig = {\r\n            // @ts-ignore\r\n            account: account as Account,\r\n            // @ts-ignore\r\n            transport: hwttp(DEFAULT_CHAIN_CONFIGS.odyssey.rpcUrl) as Transport,\r\n            chainId: \"odyssey\",\r\n        };\r\n        this.storyClient = StoryClient.newClient(config);\r\n\r\n        const baseConfig = {\r\n            chain: storyOdyssey,\r\n            transport: http(DEFAULT_CHAIN_CONFIGS.odyssey.rpcUrl),\r\n        } as const;\r\n        this.publicClient = createPublicClient<HttpTransport>(\r\n            baseConfig\r\n        ) as PublicClient<HttpTransport, Chain, Account | undefined>;\r\n\r\n        this.walletClient = createWalletClient<HttpTransport>({\r\n            chain: storyOdyssey,\r\n            transport: http(DEFAULT_CHAIN_CONFIGS.odyssey.rpcUrl),\r\n            account: account,\r\n        });\r\n    }\r\n\r\n    getAddress(): Address {\r\n        return this.address;\r\n    }\r\n\r\n    async getWalletBalance(): Promise<string | null> {\r\n        try {\r\n            const balance = await this.publicClient.getBalance({\r\n                address: this.address,\r\n            });\r\n            return formatUnits(balance, 18);\r\n        } catch (error) {\r\n            console.error(\"Error getting wallet balance:\", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async connect(): Promise<`0x${string}`> {\r\n        return this.runtime.getSetting(\"STORY_PRIVATE_KEY\") as `0x${string}`;\r\n    }\r\n\r\n    getPublicClient(): PublicClient<HttpTransport, Chain, Account | undefined> {\r\n        return this.publicClient;\r\n    }\r\n\r\n    getWalletClient(): WalletClient {\r\n        if (!this.walletClient) throw new Error(\"Wallet not connected\");\r\n        return this.walletClient;\r\n    }\r\n\r\n    getStoryClient(): StoryClient {\r\n        if (!this.storyClient) throw new Error(\"StoryClient not connected\");\r\n        return this.storyClient;\r\n    }\r\n}\r\n\r\nexport const storyWalletProvider: Provider = {\r\n    async get(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state?: State\r\n    ): Promise<string | null> {\r\n        // Check if the user has a Story wallet\r\n        if (!runtime.getSetting(\"STORY_PRIVATE_KEY\")) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const walletProvider = new WalletProvider(runtime);\r\n            const address = walletProvider.getAddress();\r\n            const balance = await walletProvider.getWalletBalance();\r\n            return `Story Wallet Address: ${address}\\nBalance: ${balance} IP`;\r\n        } catch (error) {\r\n            console.error(\"Error in Story wallet provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n","export const registerIPTemplate = `Given the recent messages below:\r\n\r\n{{recentMessages}}\r\n\r\nExtract the following information about the requested IP registration:\r\n- Field \"title\": The title of your IP\r\n- Field \"description\": The description of your IP\r\n- Field \"ipType\": The type of your IP. Type of the IP Asset, can be defined arbitrarily by the\r\ncreator. I.e. “character”, “chapter”, “location”, “items”, \"music\", etc. If a user doesn't provide\r\nan ipType, you can infer it from the title and description. It should be one word.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. A user must explicitly provide a title and description.\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"title\": string,\r\n    \"description\": string,\r\n    \"ipType\": string\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const licenseIPTemplate = `Given the recent messages below:\r\n\r\n{{recentMessages}}\r\n\r\nExtract the following information about the requested IP licensing:\r\n- Field \"licensorIpId\": The IP Asset that you want to mint a license from\r\n- Field \"licenseTermsId\": The license terms that you want to mint a license for\r\n- Field \"amount\": The amount of licenses to mint\r\n\r\nRespond with a JSON markdown block containing only the extracted values. A user must explicitly provide a licensorIpId and licenseTermsId.\r\nIf they don't provide the amount, set it as null.\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"licensorIpId\": string,\r\n    \"licenseTermsId\": string,\r\n    \"amount\": number | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const getAvailableLicensesTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested IP licensing:\r\n- Field \"ipid\": The IP Asset that you want to mint a license from\r\n\r\nRespond with a JSON markdown block containing only the extracted values. A user must provide an ipId.\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"ipid\": string\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const getIPDetailsTemplate = `Given the recent messages below:\r\n\r\n{{recentMessages}}\r\n\r\nExtract the following information about the requested IP details:\r\n- Field \"ipId\": The IP Asset that you want to get details for\r\n\r\nRespond with a JSON markdown block containing only the extracted values. A user must provide an ipId.\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"ipId\": string\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const attachTermsTemplate = `Given the recent messages below:\r\n\r\n{{recentMessages}}\r\n\r\nExtract the following information about attaching license terms to an IP Asset:\r\n- Field \"ipId\": The IP Asset that you want to attach the license terms to\r\n- Field \"mintingFee\": The fee to mint this license from the IP Asset.\r\n- Field \"commercialUse\": Whether or not the IP Asset can be used commercially.\r\n- Field \"commercialRevShare\": The percentage of revenue that the IP Asset owner will receive\r\nfrom commercial use of the IP Asset. This must be between 0 and 100. If a user specifies\r\na commercialRevShare, then commercialUse must be set to true.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. A user must provide an ipId. If they don't provide\r\nthe others fields, set them as null.\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"ipId\": string,\r\n    \"mintingFee\": number | null,\r\n    \"commercialUse\": boolean | null,\r\n    \"commercialRevShare\": number | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider } from \"../providers/wallet\";\r\nimport { licenseIPTemplate } from \"../templates\";\r\nimport { LicenseIPParams } from \"../types\";\r\nimport { MintLicenseTokensResponse } from \"@story-protocol/core-sdk\";\r\nimport { hasIpAttachedLicenseTerms } from \"../queries\";\r\n\r\nexport { licenseIPTemplate };\r\n\r\nexport class LicenseIPAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async licenseIP(\r\n        params: LicenseIPParams\r\n    ): Promise<MintLicenseTokensResponse> {\r\n        const storyClient = this.walletProvider.getStoryClient();\r\n        const publicClient = this.walletProvider.getPublicClient();\r\n\r\n        const hasLicenseTerms = await hasIpAttachedLicenseTerms(publicClient, {\r\n            ipId: params.licensorIpId,\r\n            licenseTemplate: \"0x58E2c909D557Cd23EF90D14f8fd21667A5Ae7a93\",\r\n            licenseTermsId: BigInt(params.licenseTermsId),\r\n        });\r\n        // check if license terms are attached to the ip asset\r\n        if (!hasLicenseTerms) {\r\n            throw new Error(\"License terms are not attached to the IP Asset\");\r\n        }\r\n        const response = await storyClient.license.mintLicenseTokens({\r\n            licensorIpId: params.licensorIpId,\r\n            licenseTermsId: params.licenseTermsId,\r\n            amount: params.amount || 1,\r\n            txOptions: { waitForTransaction: true },\r\n        });\r\n\r\n        return response;\r\n    }\r\n}\r\n\r\nexport const licenseIPAction = {\r\n    name: \"LICENSE_IP\",\r\n    description: \"License an IP Asset on Story\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting LICENSE_IP handler...\");\r\n\r\n        // initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const licenseIPContext = composeContext({\r\n            state,\r\n            template: licenseIPTemplate,\r\n        });\r\n\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: licenseIPContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        const walletProvider = new WalletProvider(runtime);\r\n        const action = new LicenseIPAction(walletProvider);\r\n        try {\r\n            const response = await action.licenseIP(content);\r\n            callback?.({\r\n                text: `Successfully minted license tokens: ${response.licenseTokenIds.join(\", \")}. Transaction Hash: ${response.txHash}. View it on the block explorer: https://odyssey.storyscan.xyz/tx/${response.txHash}`,\r\n            });\r\n            return true;\r\n        } catch (e) {\r\n            elizaLogger.error(\"Error licensing IP:\", e.message);\r\n            callback?.({ text: `Error licensing IP: ${e.message}` });\r\n            return false;\r\n        }\r\n    },\r\n    template: licenseIPTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I would like to license an IP.\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Sure! Please provide the ipId of the IP you want to license and the license terms id you want to attach.\",\r\n                    action: \"LICENSE_IP\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"License an IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db with license terms 1\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"LICENSE\", \"LICENSE_IP\", \"LICENSE_IP_ASSET\"],\r\n};\r\n","import { Account, HttpTransport, Chain, Address, PublicClient } from \"viem\";\r\n\r\ntype LicenseRegistryHasIpAttachedLicenseTermsRequest = {\r\n    ipId: Address;\r\n    licenseTemplate: Address;\r\n    licenseTermsId: bigint;\r\n};\r\n\r\nexport const licenseRegistryAbi = [\r\n    {\r\n        type: \"constructor\",\r\n        inputs: [\r\n            {\r\n                name: \"licensingModule\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            { name: \"disputeModule\", internalType: \"address\", type: \"address\" },\r\n            { name: \"ipGraphAcl\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"authority\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"AccessManagedInvalidAuthority\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"caller\", internalType: \"address\", type: \"address\" },\r\n            { name: \"delay\", internalType: \"uint32\", type: \"uint32\" },\r\n        ],\r\n        name: \"AccessManagedRequiredDelay\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [{ name: \"caller\", internalType: \"address\", type: \"address\" }],\r\n        name: \"AccessManagedUnauthorized\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\r\n        name: \"AddressEmptyCode\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            {\r\n                name: \"implementation\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"ERC1967InvalidImplementation\",\r\n    },\r\n    { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\r\n    { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\r\n    { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"parentIpIds\",\r\n                internalType: \"address[]\",\r\n                type: \"address[]\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__AddParentIpToIPGraphFailed\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [],\r\n        name: \"LicenseRegistry__CallerNotLicensingModule\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"LicenseRegistry__DerivativeAlreadyRegistered\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"LicenseRegistry__DerivativeIpAlreadyHasChild\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"LicenseRegistry__DerivativeIpAlreadyHasLicense\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\r\n        name: \"LicenseRegistry__DerivativeIsParent\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__DuplicateLicense\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\r\n            { name: \"length\", internalType: \"uint256\", type: \"uint256\" },\r\n        ],\r\n        name: \"LicenseRegistry__IndexOutOfBounds\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\r\n        name: \"LicenseRegistry__IpExpired\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__LicenseTermsAlreadyAttached\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__LicenseTermsNotExists\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__LicensorIpHasNoLicenseTerms\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__NotLicenseTemplate\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\r\n        name: \"LicenseRegistry__ParentIpExpired\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__ParentIpHasNoLicenseTerms\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\r\n        name: \"LicenseRegistry__ParentIpTagged\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__ParentIpUnmatchedLicenseTemplate\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"newLicenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__UnmatchedLicenseTemplate\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"LicenseRegistry__UnregisteredLicenseTemplate\",\r\n    },\r\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroAccessManager\" },\r\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroDisputeModule\" },\r\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroIPGraphACL\" },\r\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroLicenseTemplate\" },\r\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroLicensingModule\" },\r\n    {\r\n        type: \"error\",\r\n        inputs: [],\r\n        name: \"LicensingModule__DerivativesCannotAddLicenseTerms\",\r\n    },\r\n    {\r\n        type: \"error\",\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"LicensingModule__LicenseTermsNotFound\",\r\n    },\r\n    { type: \"error\", inputs: [], name: \"NotInitializing\" },\r\n    { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\r\n    {\r\n        type: \"error\",\r\n        inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\r\n        name: \"UUPSUnsupportedProxiableUUID\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"authority\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: false,\r\n            },\r\n        ],\r\n        name: \"AuthorityUpdated\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: false,\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n            },\r\n        ],\r\n        name: \"DefaultLicenseTermsSet\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"ipId\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: true,\r\n            },\r\n            {\r\n                name: \"expireTime\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n                indexed: false,\r\n            },\r\n        ],\r\n        name: \"ExpirationTimeSet\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"version\",\r\n                internalType: \"uint64\",\r\n                type: \"uint64\",\r\n                indexed: false,\r\n            },\r\n        ],\r\n        name: \"Initialized\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: true,\r\n            },\r\n        ],\r\n        name: \"LicenseTemplateRegistered\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"ipId\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: true,\r\n            },\r\n            {\r\n                name: \"licensingConfig\",\r\n                internalType: \"struct Licensing.LicensingConfig\",\r\n                type: \"tuple\",\r\n                components: [\r\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\r\n                    {\r\n                        name: \"mintingFee\",\r\n                        internalType: \"uint256\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        name: \"licensingHook\",\r\n                        internalType: \"address\",\r\n                        type: \"address\",\r\n                    },\r\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\r\n                ],\r\n                indexed: false,\r\n            },\r\n        ],\r\n        name: \"LicensingConfigSetForIP\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"ipId\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: true,\r\n            },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: true,\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n                indexed: true,\r\n            },\r\n        ],\r\n        name: \"LicensingConfigSetForLicense\",\r\n    },\r\n    {\r\n        type: \"event\",\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                name: \"implementation\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n                indexed: true,\r\n            },\r\n        ],\r\n        name: \"Upgraded\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"DISPUTE_MODULE\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                internalType: \"contract IDisputeModule\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"EXPIRATION_TIME\",\r\n        outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"IP_GRAPH\",\r\n        outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"IP_GRAPH_ACL\",\r\n        outputs: [\r\n            { name: \"\", internalType: \"contract IPGraphACL\", type: \"address\" },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"LICENSING_MODULE\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                internalType: \"contract ILicensingModule\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"UPGRADE_INTERFACE_VERSION\",\r\n        outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"attachLicenseTermsToIp\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"authority\",\r\n        outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"exists\",\r\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\r\n        ],\r\n        name: \"getAttachedLicenseTerms\",\r\n        outputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\r\n        name: \"getAttachedLicenseTermsCount\",\r\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"getDefaultLicenseTerms\",\r\n        outputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\r\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\r\n        ],\r\n        name: \"getDerivativeIp\",\r\n        outputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"getDerivativeIpCount\",\r\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\r\n        name: \"getExpireTime\",\r\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"getLicensingConfig\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                internalType: \"struct Licensing.LicensingConfig\",\r\n                type: \"tuple\",\r\n                components: [\r\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\r\n                    {\r\n                        name: \"mintingFee\",\r\n                        internalType: \"uint256\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        name: \"licensingHook\",\r\n                        internalType: \"address\",\r\n                        type: \"address\",\r\n                    },\r\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\r\n                ],\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\r\n        ],\r\n        name: \"getParentIp\",\r\n        outputs: [\r\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"getParentIpCount\",\r\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"getParentLicenseTerms\",\r\n        outputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"hasDerivativeIps\",\r\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"hasIpAttachedLicenseTerms\",\r\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"accessManager\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"initialize\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"isConsumingScheduledOp\",\r\n        outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"isDerivativeIp\",\r\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\r\n        name: \"isExpiredNow\",\r\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"isParentIp\",\r\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"isRegisteredLicenseTemplate\",\r\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [],\r\n        name: \"proxiableUUID\",\r\n        outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\r\n        stateMutability: \"view\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"parentIpIds\",\r\n                internalType: \"address[]\",\r\n                type: \"address[]\",\r\n            },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsIds\",\r\n                internalType: \"uint256[]\",\r\n                type: \"uint256[]\",\r\n            },\r\n            { name: \"isUsingLicenseToken\", internalType: \"bool\", type: \"bool\" },\r\n        ],\r\n        name: \"registerDerivativeIp\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"registerLicenseTemplate\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"newAuthority\", internalType: \"address\", type: \"address\" },\r\n        ],\r\n        name: \"setAuthority\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            {\r\n                name: \"newLicenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"newLicenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"setDefaultLicenseTerms\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licensingConfig\",\r\n                internalType: \"struct Licensing.LicensingConfig\",\r\n                type: \"tuple\",\r\n                components: [\r\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\r\n                    {\r\n                        name: \"mintingFee\",\r\n                        internalType: \"uint256\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        name: \"licensingHook\",\r\n                        internalType: \"address\",\r\n                        type: \"address\",\r\n                    },\r\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\r\n                ],\r\n            },\r\n        ],\r\n        name: \"setLicensingConfigForIp\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                name: \"licensingConfig\",\r\n                internalType: \"struct Licensing.LicensingConfig\",\r\n                type: \"tuple\",\r\n                components: [\r\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\r\n                    {\r\n                        name: \"mintingFee\",\r\n                        internalType: \"uint256\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        name: \"licensingHook\",\r\n                        internalType: \"address\",\r\n                        type: \"address\",\r\n                    },\r\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\r\n                ],\r\n            },\r\n        ],\r\n        name: \"setLicensingConfigForLicense\",\r\n        outputs: [],\r\n        stateMutability: \"nonpayable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            {\r\n                name: \"newImplementation\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            { name: \"data\", internalType: \"bytes\", type: \"bytes\" },\r\n        ],\r\n        name: \"upgradeToAndCall\",\r\n        outputs: [],\r\n        stateMutability: \"payable\",\r\n    },\r\n    {\r\n        type: \"function\",\r\n        inputs: [\r\n            { name: \"licensorIpId\", internalType: \"address\", type: \"address\" },\r\n            {\r\n                name: \"licenseTemplate\",\r\n                internalType: \"address\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                name: \"licenseTermsId\",\r\n                internalType: \"uint256\",\r\n                type: \"uint256\",\r\n            },\r\n            { name: \"isMintedByIpOwner\", internalType: \"bool\", type: \"bool\" },\r\n        ],\r\n        name: \"verifyMintLicenseToken\",\r\n        outputs: [\r\n            {\r\n                name: \"\",\r\n                internalType: \"struct Licensing.LicensingConfig\",\r\n                type: \"tuple\",\r\n                components: [\r\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\r\n                    {\r\n                        name: \"mintingFee\",\r\n                        internalType: \"uint256\",\r\n                        type: \"uint256\",\r\n                    },\r\n                    {\r\n                        name: \"licensingHook\",\r\n                        internalType: \"address\",\r\n                        type: \"address\",\r\n                    },\r\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\r\n                ],\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n    },\r\n] as const;\r\n\r\nexport async function hasIpAttachedLicenseTerms(\r\n    publicClient: PublicClient<HttpTransport, Chain, Account | undefined>,\r\n    request: LicenseRegistryHasIpAttachedLicenseTermsRequest\r\n): Promise<boolean> {\r\n    return await publicClient.readContract({\r\n        abi: licenseRegistryAbi,\r\n        address: \"0xBda3992c49E98392e75E78d82B934F3598bA495f\",\r\n        functionName: \"hasIpAttachedLicenseTerms\",\r\n        args: [request.ipId, request.licenseTemplate, request.licenseTermsId],\r\n    });\r\n}\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { WalletProvider } from \"../providers/wallet\";\r\nimport { attachTermsTemplate } from \"../templates\";\r\nimport {\r\n    AttachLicenseTermsResponse,\r\n    LicenseTerms,\r\n    RegisterPILResponse,\r\n} from \"@story-protocol/core-sdk\";\r\nimport { AttachTermsParams } from \"../types\";\r\nimport { zeroAddress } from \"viem\";\r\n\r\nexport { attachTermsTemplate };\r\n\r\nexport class AttachTermsAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async attachTerms(params: AttachTermsParams): Promise<{\r\n        attachTermsResponse: AttachLicenseTermsResponse;\r\n        registerPilTermsResponse: RegisterPILResponse;\r\n    }> {\r\n        const storyClient = this.walletProvider.getStoryClient();\r\n\r\n        elizaLogger.log(\"params\", params);\r\n\r\n        const licenseTerms: LicenseTerms = {\r\n            transferable: true,\r\n            royaltyPolicy: params.commercialUse\r\n                ? \"0x28b4F70ffE5ba7A26aEF979226f77Eb57fb9Fdb6\"\r\n                : zeroAddress,\r\n            defaultMintingFee: params.mintingFee\r\n                ? BigInt(params.mintingFee)\r\n                : BigInt(0),\r\n            expiration: BigInt(0),\r\n            commercialUse: params.commercialUse || false,\r\n            commercialAttribution: false,\r\n            commercializerChecker: zeroAddress,\r\n            commercializerCheckerData: zeroAddress,\r\n            commercialRevShare: params.commercialUse\r\n                ? params.commercialRevShare\r\n                : 0,\r\n            commercialRevCeiling: BigInt(0),\r\n            derivativesAllowed: true,\r\n            derivativesAttribution: true,\r\n            derivativesApproval: false,\r\n            derivativesReciprocal: true,\r\n            derivativeRevCeiling: BigInt(0),\r\n            currency: \"0xC0F6E387aC0B324Ec18EAcf22EE7271207dCE3d5\",\r\n            uri: \"\",\r\n        };\r\n\r\n        const registerPilTermsResponse =\r\n            await storyClient.license.registerPILTerms({\r\n                ...licenseTerms,\r\n                txOptions: { waitForTransaction: true },\r\n            });\r\n\r\n        const attachTermsResponse =\r\n            await storyClient.license.attachLicenseTerms({\r\n                ipId: params.ipId,\r\n                licenseTermsId: registerPilTermsResponse.licenseTermsId,\r\n                txOptions: { waitForTransaction: true },\r\n            });\r\n\r\n        return { attachTermsResponse, registerPilTermsResponse };\r\n    }\r\n}\r\n\r\nexport const attachTermsAction = {\r\n    name: \"ATTACH_TERMS\",\r\n    description: \"Attach license terms to an IP Asset on Story\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting ATTACH_TERMS handler...\");\r\n\r\n        // initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const attachTermsContext = composeContext({\r\n            state,\r\n            template: attachTermsTemplate,\r\n        });\r\n\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: attachTermsContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        const walletProvider = new WalletProvider(runtime);\r\n        const action = new AttachTermsAction(walletProvider);\r\n        try {\r\n            const response = await action.attachTerms(content);\r\n            // if license terms were attached\r\n            if (response.attachTermsResponse.success) {\r\n                callback?.({\r\n                    text: `Successfully attached license terms: ${response.registerPilTermsResponse.licenseTermsId}. Transaction Hash: ${response.attachTermsResponse.txHash}. View it on the block explorer: https://odyssey.storyscan.xyz/tx/${response.attachTermsResponse.txHash}`,\r\n                });\r\n                return true;\r\n            }\r\n            // if license terms were already attached\r\n            callback?.({\r\n                text: `License terms ${response.registerPilTermsResponse.licenseTermsId} were already attached to IP Asset ${content.ipId}`,\r\n            });\r\n            return true;\r\n        } catch (e) {\r\n            elizaLogger.error(\"Error licensing IP:\", e.message);\r\n            callback?.({ text: `Error licensing IP: ${e.message}` });\r\n            return false;\r\n        }\r\n    },\r\n    template: attachTermsTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I would like to attach license terms to my IP.\",\r\n                    action: \"ATTACH_TERMS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Sure! What is the ipId? You should also tell me if you want to add a minting fee, or if you want to enable commercial use of your IP. If so, you can add a revenue share as well.\",\r\n                    action: \"ATTACH_TERMS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Attach commercial, 10% rev share license terms to IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"ATTACH_TERMS\", \"ATTACH_TERMS_TO_IP\"],\r\n};\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { getAvailableLicensesTemplate, licenseIPTemplate } from \"../templates\";\r\nimport { Address } from \"viem\";\r\nimport { IPLicenseDetails, RESOURCE_TYPE } from \"../types/api\";\r\nimport { API_KEY, API_URL } from \"../lib/api\";\r\nimport { storyOdyssey } from \"viem/chains\";\r\n\r\nexport { licenseIPTemplate };\r\n\r\n// Types for request/response\r\ntype GetAvailableLicensesParams = {\r\n    ipid: Address;\r\n};\r\n\r\ntype GetAvailableLicensesResponse = {\r\n    data: IPLicenseDetails[];\r\n};\r\n\r\n/**\r\n * Class to handle fetching available licenses for an IP asset from Story Protocol\r\n */\r\nexport class GetAvailableLicensesAction {\r\n    // Default query options for license terms\r\n    private readonly defaultQueryOptions = {\r\n        pagination: { limit: 10, offset: 0 },\r\n        orderBy: \"blockNumber\",\r\n        orderDirection: \"desc\",\r\n    };\r\n\r\n    async getAvailableLicenses(\r\n        params: GetAvailableLicensesParams\r\n    ): Promise<GetAvailableLicensesResponse> {\r\n        elizaLogger.log(\r\n            \"Fetching from\",\r\n            `${API_URL}/${RESOURCE_TYPE.IP_LICENSE_DETAILS}`\r\n        );\r\n\r\n        const response = await fetch(\r\n            `${API_URL}/${RESOURCE_TYPE.IP_LICENSE_DETAILS}`,\r\n            {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"x-api-key\": API_KEY,\r\n                    \"x-chain\": storyOdyssey.id.toString(),\r\n                },\r\n                cache: \"no-cache\",\r\n                body: JSON.stringify({\r\n                    ip_ids: [params.ipid],\r\n                    options: this.defaultQueryOptions,\r\n                }),\r\n            }\r\n        );\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        try {\r\n            const text = await response.text();\r\n            const licenseDetailsResponse = JSON.parse(text);\r\n            elizaLogger.log(\"licenseDetailsResponse\", licenseDetailsResponse);\r\n            return licenseDetailsResponse;\r\n        } catch (e) {\r\n            elizaLogger.error(\"Failed to parse response\");\r\n            throw new Error(`Failed to parse JSON response: ${e.message}`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Formats a license's terms into a human-readable string\r\n */\r\nconst formatLicenseTerms = (license: IPLicenseDetails): string => {\r\n    const terms = license.terms;\r\n    return `License ID: ${license.id}\r\n- Terms:\r\n  • Commercial Use: ${terms.commercialUse ? \"Allowed\" : \"Not Allowed\"}\r\n  • Commercial Attribution: ${terms.commercialAttribution ? \"Required\" : \"Not Required\"}\r\n  • Derivatives: ${terms.derivativesAllowed ? \"Allowed\" : \"Not Allowed\"}\r\n  • Derivatives Attribution: ${terms.derivativesAttribution ? \"Required\" : \"Not Required\"}\r\n  • Derivatives Approval: ${terms.derivativesApproval ? \"Required\" : \"Not Required\"}\r\n  • Revenue Share: ${terms.commercialRevenueShare ? terms.commercialRevenueShare + \"%\" : \"Not Required\"}\r\n`;\r\n};\r\n\r\n/**\r\n * Main action configuration for getting available licenses\r\n */\r\nexport const getAvailableLicensesAction = {\r\n    name: \"GET_AVAILABLE_LICENSES\",\r\n    description: \"Get available licenses for an IP Asset on Story\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting GET_AVAILABLE_LICENSES handler...\");\r\n\r\n        // Initialize or update state\r\n        state = !state\r\n            ? ((await runtime.composeState(message)) as State)\r\n            : await runtime.updateRecentMessageState(state);\r\n\r\n        // Generate parameters from context\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: composeContext({\r\n                state,\r\n                template: getAvailableLicensesTemplate,\r\n            }),\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        // Fetch and format license data\r\n        const action = new GetAvailableLicensesAction();\r\n        try {\r\n            const response = await action.getAvailableLicenses(content);\r\n            const formattedResponse = response.data\r\n                .map(formatLicenseTerms)\r\n                .join(\"\\n\");\r\n\r\n            callback?.({\r\n                text: formattedResponse,\r\n                action: \"GET_AVAILABLE_LICENSES\",\r\n                source: \"Story Protocol API\",\r\n            });\r\n            return true;\r\n        } catch (e) {\r\n            elizaLogger.error(\"Error fetching available licenses:\", e.message);\r\n            callback?.({\r\n                text: `Error fetching available licenses: ${e.message}`,\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: getAvailableLicensesTemplate,\r\n    validate: async () => true,\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get available licenses for an IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db\",\r\n                    action: \"GET_AVAILABLE_LICENSES\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\r\n        \"AVAILABLE_LICENSES\",\r\n        \"AVAILABLE_LICENSES_FOR_IP\",\r\n        \"AVAILABLE_LICENSES_FOR_ASSET\",\r\n    ],\r\n};\r\n","import {\r\n    IPLicenseTerms,\r\n    PILTerms,\r\n    QUERY_ORDER_BY,\r\n    QUERY_ORDER_DIRECTION,\r\n    QueryOptions,\r\n    RESOURCE_TYPE,\r\n    ResourceType,\r\n    Trait,\r\n} from \"../types/api\";\r\nimport { elizaLogger } from \"@elizaos/core\";\r\n\r\nimport { camelize } from \"./utils\";\r\nconst API_BASE_URL = process.env.STORY_API_BASE_URL;\r\nconst API_VERSION = \"v2\";\r\nexport const API_URL = `${API_BASE_URL}/${API_VERSION}`;\r\nexport const API_KEY = process.env.STORY_API_KEY || \"\";\r\n\r\nexport async function getResource(\r\n    resourceName: ResourceType,\r\n    resourceId: string,\r\n    options?: QueryOptions\r\n) {\r\n    try {\r\n        elizaLogger.log(\r\n            `Fetching resource ${API_URL}/${resourceName}/${resourceId}`\r\n        );\r\n        const res = await fetch(`${API_URL}/${resourceName}/${resourceId}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-api-key\": API_KEY as string,\r\n                \"x-chain\": \"1516\",\r\n            },\r\n        });\r\n        if (res.ok) {\r\n            elizaLogger.log(\"Response is ok\");\r\n            return res.json();\r\n        } else {\r\n            elizaLogger.log(\"Response is not ok\");\r\n            elizaLogger.log(JSON.stringify(res));\r\n            throw new Error(`HTTP error! status: ${res.status}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function listResource(\r\n    resourceName: ResourceType,\r\n    options?: QueryOptions\r\n) {\r\n    try {\r\n        const _options = {\r\n            pagination: {\r\n                limit: 10,\r\n                offset: 0,\r\n            },\r\n            orderBy: QUERY_ORDER_BY.BLOCK_NUMBER,\r\n            orderDirection: QUERY_ORDER_DIRECTION.DESC,\r\n            ...options,\r\n        };\r\n        elizaLogger.log(`Calling Story API ${resourceName}`);\r\n        elizaLogger.log(`STORY_API_KEY: ${API_KEY}`);\r\n        elizaLogger.log(`API_URL: ${API_URL}`);\r\n        elizaLogger.log(`API_VERSION: ${API_VERSION}`);\r\n        elizaLogger.log(`_options: ${JSON.stringify(_options)}`);\r\n        const res = await fetch(`${API_URL}/${resourceName}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-api-key\": API_KEY as string,\r\n                \"x-chain\": \"1516\",\r\n            },\r\n            cache: \"no-cache\",\r\n            ...(_options && { body: JSON.stringify({ options: _options }) }),\r\n        });\r\n        if (res.ok) {\r\n            elizaLogger.log(\"Response is ok\");\r\n            elizaLogger.log(res.ok);\r\n            return res.json();\r\n        } else {\r\n            elizaLogger.log(\"Response is not ok\");\r\n            elizaLogger.log(res);\r\n            return res;\r\n        }\r\n    } catch (error) {\r\n        elizaLogger.log(\"List resource Error\");\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function fetchLicenseTermsDetails(data: IPLicenseTerms[]) {\r\n    const requests = data.map((item) =>\r\n        getResource(RESOURCE_TYPE.LICENSE_TERMS, item.licenseTermsId)\r\n    );\r\n    const results = await Promise.all(requests);\r\n\r\n    return results\r\n        .filter((value) => !!value)\r\n        .map((result) => {\r\n            return {\r\n                ...result.data,\r\n                licenseTerms: convertLicenseTermObject(\r\n                    result.data.licenseTerms\r\n                ),\r\n            };\r\n        });\r\n}\r\n\r\ntype LicenseTerms = Partial<PILTerms>;\r\n\r\nexport function convertLicenseTermObject(licenseTerms: Trait[]): LicenseTerms {\r\n    return licenseTerms.reduce((acc, option: Trait): LicenseTerms => {\r\n        const key = camelize(option.trait_type) as keyof PILTerms;\r\n        acc[key] =\r\n            option.value === \"true\"\r\n                ? true\r\n                : option.value === \"false\"\r\n                  ? false\r\n                  : (option.value as any);\r\n        return acc as LicenseTerms;\r\n    }, {});\r\n}\r\n","import {\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    ModelClass,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { getIPDetailsTemplate } from \"../templates\";\r\nimport { Address } from \"viem\";\r\nimport { Asset, RESOURCE_TYPE } from \"../types/api\";\r\nimport { API_URL, getResource } from \"../lib/api\";\r\n\r\nexport { getIPDetailsTemplate };\r\n\r\n// Types for the action parameters and response\r\ntype GetIPDetailsParams = {\r\n    ipId: Address;\r\n};\r\n\r\ntype GetIPDetailsResponse = {\r\n    data: Asset;\r\n};\r\n\r\n/**\r\n * Class handling IP details retrieval from Story Protocol\r\n */\r\nclass GetIPDetailsAction {\r\n    async getIPDetails(\r\n        params: GetIPDetailsParams\r\n    ): Promise<GetIPDetailsResponse> {\r\n        elizaLogger.log(\"Fetching from\", `${API_URL}/${RESOURCE_TYPE.ASSET}`);\r\n        return (await getResource(\r\n            RESOURCE_TYPE.ASSET,\r\n            params.ipId\r\n        )) as GetIPDetailsResponse;\r\n    }\r\n}\r\n\r\n/**\r\n * Formats IP asset details into a readable string\r\n */\r\nconst formatIPDetails = (data: Asset): string => `IP Asset Details:\r\nID: ${data.id}\r\nNFT Name: ${data.nftMetadata.name}\r\nToken Contract: ${data.nftMetadata.tokenContract}\r\nToken ID: ${data.nftMetadata.tokenId}\r\nImage URL: ${data.nftMetadata.imageUrl}\r\n\r\nRelationships:\r\n• Ancestors: ${data.ancestorCount}\r\n• Descendants: ${data.descendantCount}\r\n• Parents: ${data.parentCount || 0}\r\n• Children: ${data.childCount || 0}\r\n• Roots: ${data.rootCount || 0}\r\n\r\nCreated:\r\nBlock #${data.blockNumber}\r\nTimestamp: ${data.blockTimestamp}`;\r\n\r\n/**\r\n * Main action configuration for getting IP details\r\n */\r\nexport const getIPDetailsAction = {\r\n    name: \"GET_IP_DETAILS\",\r\n    description: \"Get details for an IP Asset on Story\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting GET_IP_DETAILS handler...\");\r\n\r\n        // Initialize or update state\r\n        state = !state\r\n            ? ((await runtime.composeState(message)) as State)\r\n            : await runtime.updateRecentMessageState(state);\r\n\r\n        // Generate content using template\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: composeContext({ state, template: getIPDetailsTemplate }),\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        // Fetch and format IP details\r\n        const action = new GetIPDetailsAction();\r\n        try {\r\n            const response = await action.getIPDetails(content);\r\n            const formattedResponse = formatIPDetails(response.data);\r\n\r\n            callback?.({\r\n                text: formattedResponse,\r\n                action: \"GET_IP_DETAILS\",\r\n                source: \"Story Protocol API\",\r\n            });\r\n            return true;\r\n        } catch (e) {\r\n            elizaLogger.error(\"Error fetching IP details:\", e.message);\r\n            callback?.({\r\n                text: `Error fetching IP details: ${e.message}`,\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    template: getIPDetailsTemplate,\r\n    validate: async () => true,\r\n    // Example usage of the action\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get details for an IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db\",\r\n                    action: \"GET_IP_DETAILS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"IP_DETAILS\", \"IP_DETAILS_FOR_ASSET\", \"IP_DETAILS_FOR_IP\"],\r\n};\r\n","export * from \"./actions/registerIP\";\r\nexport * from \"./actions/licenseIP\";\r\nexport * from \"./actions/attachTerms\";\r\nexport * from \"./actions/getAvailableLicenses\";\r\nexport * from \"./actions/getIPDetails\";\r\nexport * from \"./providers/wallet\";\r\nexport * from \"./types\";\r\n\r\nimport { Plugin } from \"@elizaos/core\";\r\nimport { storyWalletProvider } from \"./providers/wallet\";\r\nimport { registerIPAction } from \"./actions/registerIP\";\r\nimport { licenseIPAction } from \"./actions/licenseIP\";\r\nimport { getAvailableLicensesAction } from \"./actions/getAvailableLicenses\";\r\nimport { getIPDetailsAction } from \"./actions/getIPDetails\";\r\nimport { attachTermsAction } from \"./actions/attachTerms\";\r\n\r\nexport const storyPlugin: Plugin = {\r\n    name: \"story\",\r\n    description: \"Story integration plugin\",\r\n    providers: [storyWalletProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [\r\n        registerIPAction,\r\n        licenseIPAction,\r\n        attachTermsAction,\r\n        getAvailableLicensesAction,\r\n        getIPDetailsAction,\r\n    ],\r\n};\r\n\r\nexport default storyPlugin;\r\n"],"mappings":"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","names":["composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","elizaLogger","storyOdyssey","elizaLogger","storyOdyssey","generateObjectDeprecated","composeContext","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","generateObjectDeprecated","composeContext","ModelClass"]}