{"version":3,"sources":["../src/actions/transfer.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Action,\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    IAgentRuntime,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\r\nimport { bn } from \"fuels\";\r\nimport { transferTemplate } from \"../templates\";\r\n\r\ntype TransferParams = {\r\n    toAddress: string;\r\n    amount: string;\r\n};\r\n\r\nexport class TransferAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async transfer(params: TransferParams) {\r\n        try {\r\n            const { toAddress, amount } = params;\r\n            const res = await this.walletProvider.wallet.transfer(\r\n                toAddress,\r\n                bn.parseUnits(amount)\r\n            );\r\n            const tx = await res.waitForResult();\r\n            return tx;\r\n        } catch (error) {\r\n            throw new Error(`Transfer failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nconst buildTransferDetails = async (state: State, runtime: IAgentRuntime) => {\r\n    const context = composeContext({\r\n        state,\r\n        template: transferTemplate,\r\n    });\r\n\r\n    const transferDetails = (await generateObjectDeprecated({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.SMALL,\r\n    })) as TransferParams;\r\n\r\n    return transferDetails;\r\n};\r\n\r\nexport const transferAction: Action = {\r\n    name: \"transfer\",\r\n    description: \"Transfer Fuel ETH between addresses on Fuel Ignition\",\r\n    handler: async (runtime, message, state, options, callback) => {\r\n        const walletProvider = await initWalletProvider(runtime);\r\n        const action = new TransferAction(walletProvider);\r\n\r\n        const paramOptions = await buildTransferDetails(state, runtime);\r\n\r\n        try {\r\n            const transferResp = await action.transfer(paramOptions);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully transferred ${paramOptions.amount} ETH to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.id}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: transferResp.id,\r\n                        amount: paramOptions.amount,\r\n                        recipient: paramOptions.toAddress,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error during token transfer:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    // template: transferTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"FUEL_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"I'll help you transfer 1 ETH to 0x8F8afB12402C9a4bD9678Bec363E51360142f8443FB171655eEd55dB298828D1\",\r\n                    action: \"SEND_TOKENS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Transfer 1 ETH to 0x8F8afB12402C9a4bD9678Bec363E51360142f8443FB171655eEd55dB298828D1\",\r\n                    action: \"SEND_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"TRANSFER_FUEL_ETH\"],\r\n};\r\n","import type { IAgentRuntime, Provider, Memory, State } from \"@elizaos/core\";\r\nimport { Provider as FuelProvider, Wallet, WalletUnlocked } from \"fuels\";\r\n\r\nexport class WalletProvider {\r\n    wallet: WalletUnlocked;\r\n\r\n    constructor(privateKey: `0x${string}`, provider: FuelProvider) {\r\n        this.wallet = Wallet.fromPrivateKey(privateKey, provider);\r\n    }\r\n\r\n    getAddress(): string {\r\n        return this.wallet.address.toB256();\r\n    }\r\n\r\n    async getBalance() {\r\n        const balance = await this.wallet.getBalance();\r\n        return balance.format();\r\n    }\r\n}\r\n\r\nexport const initWalletProvider = async (runtime: IAgentRuntime) => {\r\n    const privateKey = runtime.getSetting(\"FUEL_PRIVATE_KEY\");\r\n    if (!privateKey) {\r\n        throw new Error(\"FUEL_PRIVATE_KEY is missing\");\r\n    }\r\n    const fuelProviderUrl =\r\n        runtime.getSetting(\"FUEL_PROVIDER_URL\") ||\r\n        \"https://mainnet.fuel.network/v1/graphql\";\r\n\r\n    const provider = await FuelProvider.create(fuelProviderUrl);\r\n    return new WalletProvider(privateKey as `0x${string}`, provider);\r\n};\r\n\r\nexport const fuelWalletProvider: Provider = {\r\n    async get(\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State\r\n    ): Promise<string | null> {\r\n        const walletProvider = await initWalletProvider(runtime);\r\n        const balance = await walletProvider.getBalance();\r\n        return `Fuel Wallet Address: ${walletProvider.getAddress()}\\nBalance: ${balance} ETH`;\r\n    },\r\n};\r\n","export const transferTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested transfer:\r\n- Amount to transfer: Must be a string representing the amount in ETH (only number without coin symbol, e.g., \"0.1\")\r\n- Recipient address: Must be a valid Fuel wallet address starting with \"0x\"\r\n\r\nRespond with a JSON markdown block containing only the extracted values. All fields except 'token' are required:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"amount\": string,\r\n    \"toAddress\": string,\r\n}\r\n\\`\\`\\`\r\n`;\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { transferAction } from \"./actions/transfer\";\r\nimport { fuelWalletProvider } from \"./providers/wallet\";\r\n\r\nexport const fuelPlugin: Plugin = {\r\n    name: \"fuel\",\r\n    description: \"Fuel blockchain integration plugin\",\r\n    providers: [fuelWalletProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [transferAction],\r\n};\r\n\r\nexport default fuelPlugin;\r\n"],"mappings":"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","names":[]}