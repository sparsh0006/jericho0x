{"version":3,"sources":["../src/providers/sgxAttestationProvider.ts","../src/plugins/sgxPlugin.ts","../src/index.ts"],"sourcesContent":["import { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\r\nimport { SgxAttestation } from \"../types/attestation\";\r\nimport { promises as fs } from 'fs';\r\nimport { createHash } from 'crypto';\r\n\r\n// Function to calculate SHA-256 and return a Buffer (32 bytes)\r\nfunction calculateSHA256(input: string): Buffer {\r\n    const hash = createHash('sha256');\r\n    hash.update(input);\r\n    return hash.digest();\r\n}\r\n\r\nclass SgxAttestationProvider {\r\n    private readonly SGX_QUOTE_MAX_SIZE: number = 8192 * 4;\r\n    private readonly SGX_TARGET_INFO_SIZE: number = 512;\r\n\r\n    private readonly MY_TARGET_INFO_PATH: string = \"/dev/attestation/my_target_info\";\r\n    private readonly TARGET_INFO_PATH: string = \"/dev/attestation/target_info\";\r\n    private readonly USER_REPORT_DATA_PATH: string = \"/dev/attestation/user_report_data\";\r\n    private readonly QUOTE_PATH: string = \"/dev/attestation/quote\";\r\n\r\n    constructor() {}\r\n\r\n    async generateAttestation(\r\n        reportData: string\r\n    ): Promise<SgxAttestation> {\r\n        // Hash the report data to generate the raw user report.\r\n        // The resulting hash value is 32 bytes long.\r\n        // Ensure that the length of the raw user report does not exceed 64 bytes.\r\n        const rawUserReport = calculateSHA256(reportData);\r\n\r\n        try {\r\n            // Check if the gramine attestation device file exists\r\n            await fs.access(this.MY_TARGET_INFO_PATH);\r\n\r\n            const quote = await this.generateQuoteByGramine(rawUserReport);\r\n            const attestation: SgxAttestation = {\r\n                quote: quote,\r\n                timestamp: Date.now(),\r\n            };\r\n            // console.log(\"SGX remote attestation: \", attestation);\r\n            return attestation;\r\n        } catch (error) {\r\n            console.error(\"Error generating SGX remote attestation:\", error);\r\n            throw new Error(\r\n                `Failed to generate SGX Quote: ${\r\n                    error instanceof Error ? error.message : \"Unknown error\"\r\n                }`\r\n            );\r\n        }\r\n    }\r\n\r\n    async generateQuoteByGramine(\r\n        rawUserReport: Buffer\r\n    ): Promise<string> {\r\n        if (rawUserReport.length > 64) {\r\n            throw new Error(\"the length of rawUserReport exceeds 64 bytes\");\r\n        }\r\n\r\n        const myTargetInfo = await fs.readFile(this.MY_TARGET_INFO_PATH);\r\n        if (myTargetInfo.length !== this.SGX_TARGET_INFO_SIZE) {\r\n            throw new Error(\"Invalid my_target_info length\");\r\n        }\r\n\r\n        await fs.writeFile(this.TARGET_INFO_PATH, myTargetInfo);\r\n        await fs.writeFile(this.USER_REPORT_DATA_PATH, rawUserReport);\r\n\r\n        // Read quote\r\n        const quoteData = await fs.readFile(this.QUOTE_PATH);\r\n        if (quoteData.length > this.SGX_QUOTE_MAX_SIZE) {\r\n            throw new Error(\"Invalid quote length\");\r\n        }\r\n\r\n        const realLen = quoteData.lastIndexOf(0);\r\n        if (realLen === -1) {\r\n            throw new Error(\"quote without EOF\");\r\n        }\r\n\r\n        return '0x' + quoteData.subarray(0, realLen + 1).toString('hex');\r\n    }\r\n}\r\n\r\nconst sgxAttestationProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory, _state?: State) => {\r\n        const provider = new SgxAttestationProvider();\r\n        const agentId = runtime.agentId;\r\n\r\n        try {\r\n            // console.log(\"Generating attestation for agent: \", agentId);\r\n            const attestation = await provider.generateAttestation(agentId);\r\n            return `Your Agent's remote attestation is: ${JSON.stringify(attestation)}`;\r\n        } catch (error) {\r\n            console.error(\"Error in remote attestation provider:\", error);\r\n            throw new Error(\r\n                `Failed to generate SGX Quote: ${\r\n                    error instanceof Error ? error.message : \"Unknown error\"\r\n                }`\r\n            );\r\n        }\r\n    },\r\n};\r\n\r\nexport { sgxAttestationProvider, SgxAttestationProvider };\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { sgxAttestationProvider } from \"../providers/sgxAttestationProvider\";\r\n\r\nexport const sgxPlugin: Plugin = {\r\n    name: \"sgx\",\r\n    description: \"Intel SGX plugin for Eliza, providing SGX attestation\",\r\n    actions: [],\r\n    providers: [sgxAttestationProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    clients: [],\r\n};\r\n","import { sgxPlugin } from './plugins/sgxPlugin';\r\n\r\n\r\n\r\nexport * from './plugins/sgxPlugin';\r\nexport * from './providers/sgxAttestationProvider';\r\nexport * from './types/attestation';\r\n\r\n\r\nexport default sgxPlugin;\r\n"],"mappings":";AAEA,SAAS,YAAY,UAAU;AAC/B,SAAS,kBAAkB;AAG3B,SAAS,gBAAgB,OAAuB;AAC5C,QAAM,OAAO,WAAW,QAAQ;AAChC,OAAK,OAAO,KAAK;AACjB,SAAO,KAAK,OAAO;AACvB;AAEA,IAAM,yBAAN,MAA6B;AAAA,EACR,qBAA6B,OAAO;AAAA,EACpC,uBAA+B;AAAA,EAE/B,sBAA8B;AAAA,EAC9B,mBAA2B;AAAA,EAC3B,wBAAgC;AAAA,EAChC,aAAqB;AAAA,EAEtC,cAAc;AAAA,EAAC;AAAA,EAEf,MAAM,oBACF,YACuB;AAIvB,UAAM,gBAAgB,gBAAgB,UAAU;AAEhD,QAAI;AAEA,YAAM,GAAG,OAAO,KAAK,mBAAmB;AAExC,YAAM,QAAQ,MAAM,KAAK,uBAAuB,aAAa;AAC7D,YAAM,cAA8B;AAAA,QAChC;AAAA,QACA,WAAW,KAAK,IAAI;AAAA,MACxB;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,cAAQ,MAAM,4CAA4C,KAAK;AAC/D,YAAM,IAAI;AAAA,QACN,iCACI,iBAAiB,QAAQ,MAAM,UAAU,eAC7C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,uBACF,eACe;AACf,QAAI,cAAc,SAAS,IAAI;AAC3B,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AAEA,UAAM,eAAe,MAAM,GAAG,SAAS,KAAK,mBAAmB;AAC/D,QAAI,aAAa,WAAW,KAAK,sBAAsB;AACnD,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACnD;AAEA,UAAM,GAAG,UAAU,KAAK,kBAAkB,YAAY;AACtD,UAAM,GAAG,UAAU,KAAK,uBAAuB,aAAa;AAG5D,UAAM,YAAY,MAAM,GAAG,SAAS,KAAK,UAAU;AACnD,QAAI,UAAU,SAAS,KAAK,oBAAoB;AAC5C,YAAM,IAAI,MAAM,sBAAsB;AAAA,IAC1C;AAEA,UAAM,UAAU,UAAU,YAAY,CAAC;AACvC,QAAI,YAAY,IAAI;AAChB,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACvC;AAEA,WAAO,OAAO,UAAU,SAAS,GAAG,UAAU,CAAC,EAAE,SAAS,KAAK;AAAA,EACnE;AACJ;AAEA,IAAM,yBAAmC;AAAA,EACrC,KAAK,OAAO,SAAwB,UAAkB,WAAmB;AACrE,UAAM,WAAW,IAAI,uBAAuB;AAC5C,UAAM,UAAU,QAAQ;AAExB,QAAI;AAEA,YAAM,cAAc,MAAM,SAAS,oBAAoB,OAAO;AAC9D,aAAO,uCAAuC,KAAK,UAAU,WAAW,CAAC;AAAA,IAC7E,SAAS,OAAO;AACZ,cAAQ,MAAM,yCAAyC,KAAK;AAC5D,YAAM,IAAI;AAAA,QACN,iCACI,iBAAiB,QAAQ,MAAM,UAAU,eAC7C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACjGO,IAAM,YAAoB;AAAA,EAC7B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC;AAAA,EACV,WAAW,CAAC,sBAAsB;AAAA,EAClC,YAAY,CAAC;AAAA,EACb,UAAU,CAAC;AAAA,EACX,SAAS,CAAC;AACd;;;ACFA,IAAO,gBAAQ;","names":[]}