{"version":3,"sources":["../src/actions.ts","../src/wallet.ts","../src/index.ts"],"sourcesContent":["import { getOnChainTools } from \"@goat-sdk/adapter-vercel-ai\";\r\nimport { MODE, USDC, erc20 } from \"@goat-sdk/plugin-erc20\";\r\nimport { kim } from \"@goat-sdk/plugin-kim\";\r\nimport { sendETH } from \"@goat-sdk/wallet-evm\";\r\nimport { WalletClientBase } from \"@goat-sdk/core\";\r\n\r\nimport {\r\n    generateText,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    composeContext,\r\n} from \"@elizaos/core\";\r\n\r\nexport async function getOnChainActions(wallet: WalletClientBase) {\r\n    const actionsWithoutHandler = [\r\n        {\r\n            name: \"SWAP_TOKENS\",\r\n            description: \"Swap two different tokens using KIM protocol\",\r\n            similes: [],\r\n            validate: async () => true,\r\n            examples: [],\r\n        },\r\n        // 1. Add your actions here\r\n    ];\r\n\r\n    const tools = await getOnChainTools({\r\n        wallet: wallet,\r\n        // 2. Configure the plugins you need to perform those actions\r\n        plugins: [sendETH(), erc20({ tokens: [USDC, MODE] }), kim()],\r\n    });\r\n\r\n    // 3. Let GOAT handle all the actions\r\n    return actionsWithoutHandler.map((action) => ({\r\n        ...action,\r\n        handler: getActionHandler(action.name, action.description, tools),\r\n    }));\r\n}\r\n\r\nfunction getActionHandler(\r\n    actionName: string,\r\n    actionDescription: string,\r\n    tools\r\n) {\r\n    return async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State | undefined,\r\n        options?: Record<string, unknown>,\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        let currentState = state ?? (await runtime.composeState(message));\r\n        currentState = await runtime.updateRecentMessageState(currentState);\r\n\r\n        try {\r\n            // 1. Call the tools needed\r\n            const context = composeActionContext(\r\n                actionName,\r\n                actionDescription,\r\n                currentState\r\n            );\r\n            const result = await generateText({\r\n                runtime,\r\n                context,\r\n                tools,\r\n                maxSteps: 10,\r\n                // Uncomment to see the log each tool call when debugging\r\n                // onStepFinish: (step) => {\r\n                //     console.log(step.toolResults);\r\n                // },\r\n                modelClass: ModelClass.LARGE,\r\n            });\r\n\r\n            // 2. Compose the response\r\n            const response = composeResponseContext(result, currentState);\r\n            const responseText = await generateResponse(runtime, response);\r\n\r\n            callback?.({\r\n                text: responseText,\r\n                content: {},\r\n            });\r\n            return true;\r\n        } catch (error) {\r\n            const errorMessage =\r\n                error instanceof Error ? error.message : String(error);\r\n\r\n            // 3. Compose the error response\r\n            const errorResponse = composeErrorResponseContext(\r\n                errorMessage,\r\n                currentState\r\n            );\r\n            const errorResponseText = await generateResponse(\r\n                runtime,\r\n                errorResponse\r\n            );\r\n\r\n            callback?.({\r\n                text: errorResponseText,\r\n                content: { error: errorMessage },\r\n            });\r\n            return false;\r\n        }\r\n    };\r\n}\r\n\r\nfunction composeActionContext(\r\n    actionName: string,\r\n    actionDescription: string,\r\n    state: State\r\n): string {\r\n    const actionTemplate = `\r\n# Knowledge\r\n{{knowledge}}\r\n\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n\r\n# Action: ${actionName}\r\n${actionDescription}\r\n\r\n{{recentMessages}}\r\n\r\nBased on the action chosen and the previous messages, execute the action and respond to the user using the tools you were given.\r\n`;\r\n    return composeContext({ state, template: actionTemplate });\r\n}\r\n\r\nfunction composeResponseContext(result: unknown, state: State): string {\r\n    const responseTemplate = `\r\n    # Action Examples\r\n{{actionExamples}}\r\n(Action examples are for reference only. Do not use the information from them in your response.)\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\nHere is the result:\r\n${JSON.stringify(result)}\r\n\r\n{{actions}}\r\n\r\nRespond to the message knowing that the action was successful and these were the previous messages:\r\n{{recentMessages}}\r\n  `;\r\n    return composeContext({ state, template: responseTemplate });\r\n}\r\n\r\nfunction composeErrorResponseContext(\r\n    errorMessage: string,\r\n    state: State\r\n): string {\r\n    const errorResponseTemplate = `\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\n{{actions}}\r\n\r\nRespond to the message knowing that the action failed.\r\nThe error was:\r\n${errorMessage}\r\n\r\nThese were the previous messages:\r\n{{recentMessages}}\r\n    `;\r\n    return composeContext({ state, template: errorResponseTemplate });\r\n}\r\n\r\nasync function generateResponse(\r\n    runtime: IAgentRuntime,\r\n    context: string\r\n): Promise<string> {\r\n    return generateText({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.SMALL,\r\n    });\r\n}\r\n","import { WalletClientBase } from \"@goat-sdk/core\";\r\nimport { viem } from \"@goat-sdk/wallet-viem\";\r\nimport { createWalletClient, http } from \"viem\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport { mode } from \"viem/chains\";\r\n\r\n// Add the chain you want to use, remember to update also\r\n// the EVM_PROVIDER_URL to the correct one for the chain\r\nexport const chain = mode;\r\n\r\nexport function getWalletClient(\r\n    getSetting: (key: string) => string | undefined\r\n) {\r\n    const privateKey = getSetting(\"EVM_PRIVATE_KEY\");\r\n    if (!privateKey) return null;\r\n\r\n    const provider = getSetting(\"EVM_PROVIDER_URL\");\r\n    if (!provider) throw new Error(\"EVM_PROVIDER_URL not configured\");\r\n\r\n    const wallet = createWalletClient({\r\n        account: privateKeyToAccount(privateKey as `0x${string}`),\r\n        chain: chain,\r\n        transport: http(provider),\r\n    });\r\n\r\n    return viem(wallet);\r\n}\r\n\r\nexport function getWalletProvider(walletClient: WalletClientBase) {\r\n    return {\r\n        async get(): Promise<string | null> {\r\n            try {\r\n                const address = walletClient.getAddress();\r\n                const balance = await walletClient.balanceOf(address);\r\n                return `EVM Wallet Address: ${address}\\nBalance: ${balance} ETH`;\r\n            } catch (error) {\r\n                console.error(\"Error in EVM wallet provider:\", error);\r\n                return null;\r\n            }\r\n        },\r\n    };\r\n}\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { getOnChainActions } from \"./actions\";\r\nimport { getWalletClient, getWalletProvider } from \"./wallet\";\r\n\r\nasync function createGoatPlugin(\r\n    getSetting: (key: string) => string | undefined\r\n): Promise<Plugin> {\r\n    const walletClient = getWalletClient(getSetting);\r\n    const actions = await getOnChainActions(walletClient);\r\n\r\n    return {\r\n        name: \"[GOAT] Onchain Actions\",\r\n        description: \"Mode integration plugin\",\r\n        providers: [getWalletProvider(walletClient)],\r\n        evaluators: [],\r\n        services: [],\r\n        actions: actions,\r\n    };\r\n}\r\n\r\nexport default createGoatPlugin;\r\n"],"mappings":"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","names":[]}