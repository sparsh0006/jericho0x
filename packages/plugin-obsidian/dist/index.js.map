{"version":3,"sources":["../src/actions/search.ts","../src/helper.ts","../src/providers/obsidianClient.ts","../src/enviroment.ts","../src/types/index.ts","../src/actions/listNotes.ts","../src/actions/vault.ts","../src/actions/vaultDirectory.ts","../src/actions/createKnowledge.ts","../src/actions/noteTraversal.ts","../src/templates/traversal.ts","../src/actions/activeNote.ts","../src/templates/summary.ts","../src/actions/note.ts","../src/templates/note.ts","../src/actions/file.ts","../src/templates/file.ts","../src/actions/saveFile.ts","../src/actions/openFile.ts","../src/actions/updateFile.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { getObsidian, markdownToPlaintext, processUserInput }  from \"../helper\";\r\nimport { isSearchQuery } from \"../types\";\r\n\r\nexport const searchAction: Action = {\r\n    name: \"SEARCH\",\r\n    similes: [\r\n        \"FIND\",\r\n        \"QUERY\",\r\n        \"LOOKUP\",\r\n        \"QUICK_SEARCH\",\r\n        \"BASIC_SEARCH\",\r\n        \"FAST_SEARCH\",\r\n        \"SEARCH_KEYWORD\",\r\n        \"OR_SEARCH\",\r\n        \"FIND_KEYWORDS\",\r\n        \"SEARCH_KEYWORDS\",\r\n        \"FULL_SEARCH\",\r\n        \"FULL_SEARCH_VAULT\",\r\n        \"FULL_SEARCH_NOTES\",\r\n        \"FULL_SEARCH_FILES\",\r\n        \"SERCH_ALL\",\r\n        \"SEARCH_ALL_NOTES\",\r\n        \"SEARCH_ALL_FILES\",\r\n        \"SEARCH_VAULT\",\r\n        \"SEARCH_NOTES\",\r\n        \"FIND_NOTES\",\r\n        \"FIND_FILES\",\r\n        \"FIND_ALL\",\r\n        \"FIND_ALL_NOTES\",\r\n        \"FIND_ALL_FILES\",\r\n        \"QUERY_VAULT\",\r\n        \"QUERY_ALL\",\r\n        \"QUERY_ALL_NOTES\",\r\n        \"QUERY_ALL_FILES\",\r\n        \"DATAVIEW_QUERY\",\r\n        \"DQL\",\r\n    ],\r\n    description:\r\n        \"Search the Obsidian vault using plain text, Dataview queries, or JSONLogic. Format: 'Search QUERY' or 'Query TABLE field FROM folder'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting search handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            let query = \"\";\r\n            let queryFormat: 'plaintext' | 'dataview' | 'jsonlogic' = 'plaintext';\r\n            let searchOptions: {\r\n                contextLength?: number;\r\n                ignoreCase?: boolean;\r\n            } = {\r\n                contextLength: 150,\r\n                ignoreCase: true,\r\n            };\r\n\r\n            // Initialize or update state for context generation\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const searchContext = await processUserInput(message.content.text as string, state, runtime);\r\n\r\n            elizaLogger.debug(\"Search context:\", JSON.stringify(searchContext.query, null, 2));\r\n\r\n            if (!isSearchQuery(searchContext)) {\r\n                elizaLogger.error(\r\n                    \"Invalid search query:\",\r\n                    searchContext\r\n                );\r\n                return null;\r\n            }\r\n\r\n            // Extract query and format from various text patterns\r\n            if (searchContext.queryFormat === 'dataview') {\r\n                query = searchContext.query;\r\n                queryFormat = 'dataview';\r\n\r\n                // Merge provided options with defaults\r\n                if (searchContext.options) {\r\n                    searchOptions = {\r\n                        ...searchOptions,\r\n                        ...searchContext.options as typeof searchOptions,\r\n                    };\r\n                } /*else {\r\n                    // Extract folders if specified in the format \"FROM folder1, folder2\"\r\n                    const fromMatch = query.match(/FROM\\s+\"([^\"]+)\"(?:\\s*,\\s*\"([^\"]+)\")*$/i);\r\n                    if (fromMatch) {\r\n                        searchOptions.searchIn = fromMatch\r\n                            .slice(1)\r\n                            .filter(Boolean)\r\n                            .map(folder => folder.trim());\r\n                    }\r\n                }*/\r\n\r\n            } else if (searchContext.queryFormat === 'jsonlogic') {\r\n                queryFormat = 'jsonlogic';\r\n                query = searchContext.query;\r\n                // Merge provided options with defaults\r\n                if (searchContext.options) {\r\n                    searchOptions = {\r\n                        ...searchOptions,\r\n                        ...searchContext.options as typeof searchOptions,\r\n                    };\r\n                }\r\n            } else {\r\n                query = searchContext.query;\r\n                // Merge provided options with defaults\r\n                if (searchContext.options) {\r\n                    searchOptions = {\r\n                        ...searchOptions,\r\n                        ...searchContext.options as typeof searchOptions,\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (!query) {\r\n                throw new Error(\r\n                    \"Search query is required. Use format: 'Search QUERY' or 'Query TABLE field FROM folder'\"\r\n                );\r\n            }\r\n\r\n            elizaLogger.info(`Searching vault with ${queryFormat} query: ${typeof query === 'string' ? query : JSON.stringify(query)}`);\r\n\r\n            if (queryFormat === 'plaintext') {\r\n            const results = await obsidian.search(\r\n                query,\r\n                queryFormat,\r\n                searchOptions\r\n            );\r\n\r\n            elizaLogger.info(`Found ${results.length} matching notes`);\r\n\r\n            // Format the results into a readable string\r\n            const formattedResults = results.length > 0\r\n                ? results.map(result => {\r\n\r\n                const matches = result.matches\r\n                    .map(item => `${markdownToPlaintext(item.context.substring(item.match.start, searchOptions.contextLength || 150)).trim()}...`)\r\n                    .join('\\n');\r\n\r\nreturn `\r\n#### ✅ ${result.filename} (**Score:** ${result.score})\\n${matches}`;\r\n\r\n                }).join('\\n\\n')\r\n                : \"**No matching notes found**\";\r\n\r\n\r\n                elizaLogger.info(\"Formatted results:\", formattedResults);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Found **${results.length}** matches:\\n\\n${formattedResults}`,\r\n                    metadata: {\r\n                        count: results.length,\r\n                        results: results,\r\n                        query: query,\r\n                        queryFormat: queryFormat,\r\n                        searchOptions: searchOptions,\r\n                    },\r\n                });\r\n            }\r\n\r\n        } else {\r\n\r\n            const results = await obsidian.search(\r\n                query,\r\n                queryFormat,\r\n                searchOptions\r\n            );\r\n\r\n            elizaLogger.info(`Found ${results.length} matching notes`);\r\n\r\n            // Format the results into a readable string\r\n            const formattedResults = results.length > 0\r\n                ? results.map(result => {\r\nreturn `\r\n#### ✅ ${result.filename}`;\r\n\r\n                }).join('\\n\\n')\r\n                : \"**No matching notes found**\";\r\n\r\n\r\n                elizaLogger.info(\"Formatted results:\", formattedResults);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Found **${results.length}** matches:\\n\\n${formattedResults}`,\r\n                    metadata: {\r\n                        count: results.length,\r\n                        results: results,\r\n                        query: query,\r\n                        queryFormat: queryFormat,\r\n                        searchOptions: searchOptions,\r\n                    },\r\n                });\r\n            }\r\n\r\n\r\n        }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error searching vault:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error searching vault: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Search project management\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Search <keyword>\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Find <keyword>\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Search project OR management\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Find meeting notes OR agenda\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Quick search todo OR task OR deadline\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"TABLE file.name FROM \\\"Notes\\\"\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"DQL FROM \\\"Daily Notes\\\" WHERE date = today\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SEARCH\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n\r\nexport default searchAction;\r\n","import { IAgentRuntime, AgentRuntime, ModelClass, Memory, MemoryManager } from \"@elizaos/core\";\r\nimport { elizaLogger, composeContext, generateObject, stringToUuid } from \"@elizaos/core\";\r\n//import fileTypeChecker from \"file-type-checker\";\r\nimport { lookup } from 'mrmime';\r\nimport { ObsidianProvider } from \"./providers/obsidianClient\";\r\nimport { validateObsidianConfig } from \"./enviroment\";\r\nimport { searchQuerySchema, NoteHierarchy, NoteContent } from \"./types\";\r\n\r\nlet obsidianInstance: ObsidianProvider | undefined;\r\n\r\nexport async function getObsidian(runtime: IAgentRuntime): Promise<ObsidianProvider> {\r\n    if (!obsidianInstance) {\r\n        elizaLogger.debug(\"Creating new ObsidianProvider instance\");\r\n        const config = await validateObsidianConfig(runtime);\r\n        obsidianInstance = await ObsidianProvider.create(\r\n            runtime as AgentRuntime,\r\n            parseInt(config.OBSIDIAN_API_PORT),\r\n            config.OBSIDIAN_API_TOKEN,\r\n            config.OBSIDIAN_API_URL\r\n        );\r\n    }\r\n    return obsidianInstance;\r\n}\r\n\r\n\r\n// Extract outgoing links from the note content\r\nexport function extractLinks(noteContent: NoteContent): string[] {\r\n    const linkRegex = /\\[\\[(.*?)\\]\\]/g;\r\n    const links: string[] = [];\r\n    let match: RegExpExecArray | null;\r\n    while ((match = linkRegex.exec(noteContent.content)) !== null) {\r\n        if (match[1] && !lookup(match[1])) {\r\n            links.push(`${noteContent.path.split(\"/\")[0]}/${match[1]}.md`);\r\n        } else {\r\n            links.push(match[1]);\r\n        }\r\n    }\r\n    return links;\r\n}\r\n\r\n// Store the hierarchical link data in the AI agent's memory\r\nexport async function storeHierarchyInMemory(runtime: IAgentRuntime, message: Memory, hierarchy: NoteHierarchy) {\r\n    const memory: Memory = {\r\n        id: stringToUuid(hierarchy.path),\r\n        roomId: message.roomId,\r\n        userId: message.userId,\r\n        agentId: runtime.agentId,\r\n        content: {\r\n            text: JSON.stringify(hierarchy),\r\n            type: 'note_traversal',\r\n            metadata: {\r\n                path: hierarchy.path,\r\n                timestamp: new Date().toISOString()\r\n            }\r\n        }\r\n    };\r\n    const memoryManager = new MemoryManager({\r\n        runtime,\r\n        tableName: \"obsidian\",\r\n    });\r\n\r\n    await memoryManager.createMemory(memory);\r\n    elizaLogger.info(`Stored hierarchy for note ${hierarchy.path} in memory`);\r\n}\r\n\r\n// Retrieve and utilize the stored hierarchy\r\nexport async function retrieveHierarchyFromMemory(runtime: IAgentRuntime, message: Memory, notePath: string): Promise<NoteHierarchy | null> {\r\n\r\n    const memoryManager = new MemoryManager({\r\n        runtime,\r\n        tableName: \"obsidian\",\r\n    });\r\n\r\n    try {\r\n        const memories = await memoryManager.getMemories({\r\n            roomId: message.roomId,\r\n            count: 10,\r\n            start: 0,\r\n            end: Date.now(),\r\n        });\r\n\r\n        if (memories && memories.length > 0) {\r\n            const memory = memories[0];\r\n            const hierarchy: NoteHierarchy = JSON.parse(memory.content.text);\r\n            elizaLogger.info(`Retrieved hierarchy for note ${notePath} from memory`);\r\n            return hierarchy;\r\n        }\r\n        return null;\r\n    } catch (error) {\r\n        elizaLogger.error(`Failed to retrieve hierarchy from memory: ${error.message}`);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Converts markdown text to plaintext by removing common markdown syntax\r\n *\r\n * This function handles the following markdown elements:\r\n * - Headers (# through ######)\r\n * - Bold and italic markers (* and _)\r\n * - Code blocks (both inline and multi-line)\r\n * - Links and images\r\n * - Blockquotes\r\n * - Horizontal rules\r\n * - Ordered and unordered lists\r\n *\r\n * @param markdown - The markdown text to convert\r\n * @returns The plaintext version of the markdown\r\n */\r\nexport function markdownToPlaintext(markdown: string): string {\r\n    // Handle empty or invalid input\r\n    if (!markdown || typeof markdown !== 'string') {\r\n        return '';\r\n    }\r\n\r\n    let text = markdown;\r\n\r\n    // Remove code blocks with their content intact\r\n    text = text.replace(/```[\\s\\S]*?```/g, (match) => {\r\n        // Remove only the backticks, preserve the code content\r\n        return match.slice(3, -3).trim();\r\n    });\r\n\r\n    // Remove inline code\r\n    text = text.replace(/`([^`]+)`/g, '$1');\r\n\r\n    // Remove headers while preserving content\r\n    text = text.replace(/^#{1,6}\\s+(.*)$/gm, '$1');\r\n\r\n    // Remove bold and italic markers\r\n    text = text.replace(/[*_]{1,2}([^*_]+)[*_]{1,2}/g, '$1');\r\n\r\n    // Replace horizontal rules with newlines\r\n    text = text.replace(/^[\\s-*_]{3,}$/gm, '\\n');\r\n\r\n    // Remove blockquotes markers\r\n    text = text.replace(/^>\\s+/gm, '');\r\n\r\n    // Handle links - keep text, remove URL\r\n    text = text.replace(/\\[([^\\]]+)\\]\\([)]+\\)/g, '$1');\r\n\r\n    // Remove image markdown completely\r\n    text = text.replace(/!\\[([^\\]]*)\\]\\([)]+\\)/g, '');\r\n\r\n    // Handle lists - remove markers but preserve content\r\n    text = text.replace(/^[\\s-]*[-+*]\\s+/gm, '');  // Unordered lists\r\n    text = text.replace(/^\\s*\\d+\\.\\s+/gm, '');     // Ordered lists\r\n\r\n    // Clean up excessive whitespace\r\n    text = text.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n');  // Multiple blank lines to double\r\n    text = text.trim();\r\n\r\n    return text;\r\n}\r\n\r\n/**\r\n * Removes code block delimiters from a given string.\r\n * Specifically, it removes opening and closing triple backticks (```) and any language identifiers.\r\n *\r\n * @param input - The string containing code block delimiters.\r\n * @returns The string with code block delimiters removed.\r\n */\r\nexport function removeCodeBlockDelimiters(input: string): string {\r\n    // Regular expression to match opening ``` with optional language identifier and closing ```\r\n    const codeBlockRegex = /^```[a-zA-Z]*\\n([\\s\\S]*?)\\n```$/gm;\r\n\r\n    // Replace the matched code block delimiters with the captured content\r\n    return input.replace(codeBlockRegex, '$1');\r\n  }\r\n\r\n\r\n// Define example prompts to guide the LLM in generating the correct structure\r\nconst EXAMPLE_SEARCH_PROMPTS = [\r\n    {\r\n        input: \"Search typescript in the notes\",\r\n        output: {\r\n            query: \"typescript\",\r\n            queryFormat: \"plaintext\",\r\n            options: { contextLength: 150 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Find wisdom or mastering in all files\",\r\n        output: {\r\n            query: \"wisdom OR mastering\",\r\n            queryFormat: \"plaintext\",\r\n            options: { contextLength: 150 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Find markdown files containing 'react' or 'typescript'\",\r\n        output: {\r\n            query: {\r\n                and: [\r\n                    { or: [{ in: [\"react\", { var: \"content\" }] }, { in: [\"typescript\", { var: \"content\" }] }] }\r\n                ]\r\n            },\r\n            queryFormat: \"jsonlogic\",\r\n            options: { contextLength: 200 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Search for files with regex pattern 'def.*main'\",\r\n        output: {\r\n            query: {\r\n                and: [\r\n                    { or: [{ regexp: [\"def.*main\", { var: \"content\" }] }] }\r\n                ]\r\n            },\r\n            queryFormat: \"jsonlogic\",\r\n            options: { contextLength: 200 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Search for markdown files with regex pattern '<div[^>]*>'\",\r\n        output: {\r\n            query: {\r\n                and: [\r\n                    { or: [{ regexp: [\"<div[^>]*>\", { var: \"content\" }] }] }\r\n                ]\r\n            },\r\n            queryFormat: \"jsonlogic\",\r\n            options: { contextLength: 200 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Find markdown files with filenames containing 'project'\",\r\n        output: {\r\n            query: {\r\n                and: [\r\n                    { in: [\"project\", { var: \"path\" }] }\r\n                ]\r\n            },\r\n            queryFormat: \"jsonlogic\",\r\n            options: { contextLength: 200 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Search for markdown files with filenames matching regex pattern '^notes_.*\\\\.md$'\",\r\n        output: {\r\n            query: {\r\n                and: [\r\n                    { regexp: [\"^notes_.*\\\\.md$\", { var: \"path\" }] }\r\n                ]\r\n            },\r\n            queryFormat: \"jsonlogic\",\r\n            options: { contextLength: 200 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Find markdown files with filenames containing 'summary' or 'report'\",\r\n        output: {\r\n            query: {\r\n                and: [\r\n                    { or: [{ in: [\"summary\", { var: \"path\" }] }, { in: [\"report\", { var: \"path\" }] }] }\r\n                ]\r\n            },\r\n            queryFormat: \"jsonlogic\",\r\n            options: { contextLength: 200 }\r\n        }\r\n    },\r\n    {\r\n        input: \"Select TABLE file.mtime FROM #Projects IN Projects/ AND Archive/Projects\",\r\n        output: {\r\n            query: \"TABLE file.mtime FROM #Projects\",\r\n            queryFormat: \"dataview\",\r\n            options: {\r\n                searchIn: [\"Projects/\", \"Archive/Projects/\"]\r\n            }\r\n        }\r\n    }\r\n];\r\n\r\n/**\r\n * Constructs a detailed prompt for the LLM to generate search parameters\r\n * @param userInput - The natural language search query from the user\r\n * @returns A formatted prompt string with examples and instructions\r\n */\r\nfunction constructSearchPrompt(userInput: string): string {\r\n    const examplePrompts = EXAMPLE_SEARCH_PROMPTS.map(example =>\r\n        `Input: \"${example.input}\"\\nOutput: ${JSON.stringify(example.output, null, 2)}`\r\n    ).join('\\n\\n');\r\n\r\n    return `Respond with a JSON block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nFollow these rules:\r\n1. Use the exact structure shown in the examples\r\n2. The query is relevant to the user's request\r\n3. Use space-separated terms for combined search (default: 'plaintext')\r\n4. Use OR operator when searching for alternatives (default: 'plaintext')\r\n5. Always include query.and and query.or as an array (default: \"jsonlogic\")\r\n6. Use appropriate glob patterns for file types when appropriate (default: \"jsonlogic\")\r\n7. Choose between contains and regexp based on the search requirements (default: \"jsonlogic\")\r\n8. The format of the query - queryFormat (string): Must be one of: 'plaintext', 'dataview', or 'jsonlogic'. (default: 'plaintext')\r\n9. When the prompt have \"containing\" or \"contains\", use \"in\" operator. DO NOT use \"contains\" operator (this is a strictly requirement) (default: \"jsonlogic\")\r\n10. When the prompt have \"matching\" or \"match\", use \"regexp\" operator (default: \"jsonlogic\")\r\n11. Maintain contextLength at 150\r\n\r\nExamples:\r\n${examplePrompts}\r\n\r\nNow, convert this request:\r\n\"${userInput}\"\r\n\r\nRespond ONLY with a JSON block containing only the extracted values.`;\r\n}\r\n\r\n/**\r\n * Calls the LLM API to process the user's search request\r\n * @param prompt - The formatted prompt string\r\n * @returns A Promise resolving to the JSON string response\r\n */\r\nasync function genereteSearchParameters(prompt: string, state: any, runtime: IAgentRuntime): Promise<string> {\r\n    try {\r\n\r\n        const context = composeContext({\r\n            state,\r\n            template: prompt,\r\n        });\r\n\r\n        //TODO: temperature: 0.2 - Make this dynamic\r\n        const searchContext = await generateObject({\r\n            runtime,\r\n            context,\r\n            modelClass: ModelClass.MEDIUM,\r\n            schema: searchQuerySchema,\r\n            stop: [\"\\n\\n\"]\r\n        }) as any;\r\n\r\n        /*if (!isSearchQuery(searchContext.object)) {\r\n            elizaLogger.error(\r\n                \"Invalid search query:\",\r\n                searchContext.object\r\n            );\r\n            return null;\r\n        }*/\r\n\r\n        // Attempt to parse the completion as JSON to verify structure\r\n        const parsedCompletion = searchContext.object; //JSON.parse(JSON.stringify(searchContext.object, null, 2));\r\n        elizaLogger.info(\"Parsed completion:\", JSON.stringify(parsedCompletion , null, 2));\r\n        return JSON.stringify(parsedCompletion);\r\n\r\n    } catch (error) {\r\n        console.error('Error calling LLM API:', error);\r\n        // Return a basic fallback response that matches the schema\r\n        return \"**No matching notes found**\";\r\n    }\r\n}\r\n\r\n// Function to process user input\r\nexport async function processUserInput(userInput: string, state: any, runtime: IAgentRuntime): Promise<any> {\r\n    // Construct the prompt for the LLM\r\n    const prompt = constructSearchPrompt(userInput);\r\n\r\n    // Call the LLM API (this is a placeholder; replace with actual API call)\r\n    const llmResponse = await genereteSearchParameters(prompt, state, runtime);\r\n\r\n    // Attempt to parse the LLM's response as JSON\r\n    try {\r\n      const parsedResponse = JSON.parse(llmResponse);\r\n\r\n      // Validate the parsed response against the schema\r\n      const validatedResponse = searchQuerySchema.parse(parsedResponse);\r\n\r\n      return validatedResponse;\r\n    } catch (error) {\r\n      console.error('Failed to parse or validate LLM response:', error);\r\n      return null;\r\n    }\r\n  }\r\n","import { NoteContent, ResultNoteApi, ResultNoteSearchApi, ServerInfo } from \"../types\";\r\nimport { createHash } from \"crypto\";\r\nimport {\r\n    elizaLogger,\r\n    AgentRuntime,\r\n    knowledge,\r\n    stringToUuid,\r\n} from \"@elizaos/core\";\r\n\r\nexport class ObsidianProvider {\r\n    private connected: boolean = false;\r\n    private runtime: AgentRuntime;\r\n    private static instance: ObsidianProvider | null = null;\r\n\r\n    private constructor(\r\n        private port: number = 27123,\r\n        private token: string,\r\n        private host_url: string\r\n    ) {}\r\n\r\n    /**\r\n     * Creates an instance of the ObsidianProvider class.\r\n     * @param runtime - The agent runtime.\r\n     * @param port - The port number to use for the Obsidian server.\r\n     * @param token - The authentication token for the Obsidian server.\r\n     * @param host_url - The URL of the Obsidian server.\r\n     * @returns An instance of the ObsidianProvider class.\r\n     */\r\n    static async create(\r\n        runtime: AgentRuntime,\r\n        port: number,\r\n        token: string,\r\n        host_url: string = `http://127.0.0.1:${port}`\r\n    ): Promise<ObsidianProvider> {\r\n        if (!this.instance) {\r\n            this.instance = new ObsidianProvider(port, token, host_url);\r\n            await this.instance.connect();\r\n            this.instance.runtime = runtime;\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    /**\r\n     * Opens a file in Obsidian by its path.\r\n     * @param filePath - The path to the file within the vault.\r\n     * @returns A promise that resolves when the file is successfully opened.\r\n     */\r\n    async connect(): Promise<void> {\r\n        if (this.connected) return;\r\n\r\n        try {\r\n            const response = await fetch(`${this.host_url}/`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${this.token}`,\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const serverInfo: ServerInfo = await response.json();\r\n\r\n            if (!serverInfo.authenticated) {\r\n                throw new Error(\"Failed to authenticate with Obsidian API\");\r\n            }\r\n\r\n            this.connected = true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to connect to Obsidian:\", error.message);\r\n            this.connected = false;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of all notes within the vault.\r\n     * @returns A promise that resolves to an array of note paths.\r\n     */\r\n    async listNotes(): Promise<string[]> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${this.host_url}/vault/`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${this.token}`,\r\n                    accept: \"application/json\",\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const notes: string[] = await response.json();\r\n            return notes;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to list notes:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the content of a specific note.\r\n     * @param path - The path to the note within the vault.\r\n     * @returns A promise that resolves to the content of the note.\r\n     */\r\n    async getNote(path: string): Promise<NoteContent> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/vault/${encodeURIComponent(\r\n                    path\r\n                )}`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        accept: \"application/vnd.olrapi.note+json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const noteContent: NoteContent = await response.json();\r\n            return noteContent;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to fetch note content:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the content of the currently active note.\r\n     * @returns A promise that resolves to the content of the active note.\r\n     */\r\n    async getActiveNote(): Promise<NoteContent> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/active/`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        accept: \"application/vnd.olrapi.note+json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 404) {\r\n                    throw new Error(\"No active file found in Obsidian\");\r\n                }\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const noteContent: NoteContent = await response.json();\r\n            return noteContent;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to fetch active note content:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the content of a note to the vault.\r\n     * @param path - The path to the note within the vault.\r\n     * @param content - The content to save to the note.\r\n     * @param createDirectories - Whether to create directories if they don't exist.\r\n     * @returns A promise that resolves when the note is successfully saved.\r\n     */\r\n    async saveNote(\r\n        path: string,\r\n        content: string,\r\n        createDirectories: boolean = true\r\n    ): Promise<void> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/vault/${encodeURIComponent(path)}`,\r\n                {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        \"Content-Type\": \"text/markdown\",\r\n                        \"X-Create-Directories\": createDirectories.toString(),\r\n                    },\r\n                    body: content,\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to save note:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of all files within the vault.\r\n     * @returns A promise that resolves to an array of file paths.\r\n     */\r\n    async listFiles(): Promise<string[]> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${this.host_url}/vault/`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${this.token}`,\r\n                    accept: \"application/json\",\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const vault: Record<string, string[]> = await response.json();\r\n            return vault.files as string[];\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to list files:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of all files within a specific directory.\r\n     * @param directoryPath - The path to the directory within the vault.\r\n     * @returns A promise that resolves to an array of file paths.\r\n     */\r\n    async listDirectoryFiles(directoryPath: string): Promise<string[]> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        if (directoryPath.match(/\\/$/)) {\r\n            directoryPath = `${directoryPath.replace(/\\/$/, \"\")}`;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/vault/${encodeURIComponent(directoryPath)}/`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        accept: \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const vaultDirectory: Record<string, string[]> = await response.json();\r\n            return vaultDirectory.files as string[];\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to list directory contents:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the content of a specific file from the vault.\r\n     * @param path - The path to the file within the vault.\r\n     * @returns A promise that resolves to the content of the file.\r\n     */\r\n    async readFile(path: string): Promise<string> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/vault/${encodeURIComponent(path)}`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        accept: \"text/markdown\",\r\n                        \"Content-Type\": \"text/markdown\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const content: string = await response.text();\r\n            return content;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to read file content:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Opens a file in Obsidian by its path.\r\n     * @param filePath - The path to the file within the vault.\r\n     * @returns A promise that resolves when the file is successfully opened.\r\n     */\r\n    async openFile(filePath: string): Promise<void> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/open/${encodeURIComponent(filePath)}`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            elizaLogger.success(`Successfully opened file: ${filePath}`);\r\n        } catch (error) {\r\n            elizaLogger.error(`Failed to open file '${filePath}':`, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the content of a file to the vault.\r\n     * Note: Obsidian will create a new document at the path you have specified if such a document did not already exist\r\n     * @param path - The path to the file within the vault.\r\n     * @param content - The content to save to the file.\r\n     * @param createDirectories - Whether to create directories if they don't exist.\r\n     * @returns A promise that resolves when the file is successfully saved.\r\n     */\r\n    async saveFile(\r\n        path: string,\r\n        content: string,\r\n        createDirectories: boolean = true\r\n    ): Promise<void> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/vault/${encodeURIComponent(path)}`,\r\n                {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        \"Content-Type\": \"text/markdown\",\r\n                        \"X-Create-Directories\": createDirectories.toString(),\r\n                    },\r\n                    body: content,\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to save file:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inserts content into a specific section of a file.\r\n     * @param path - The path to the file within the vault.\r\n     * @param content - The content to insert into the file.\r\n     * @param lineNumber - The line number to insert the content at.\r\n     * @returns A promise that resolves when the file is successfully patched.\r\n     */\r\n    async patchFile(\r\n        path: string,\r\n        content: string,\r\n        lineNumber: number = 0\r\n    ): Promise<void> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/vault/${encodeURIComponent(path)}`,\r\n                {\r\n                    method: \"PATCH\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ content, line: lineNumber }),\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to patch file content:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of all available Obsidian commands.\r\n     * @returns A promise that resolves to an array of command objects, each containing an ID and name.\r\n     */\r\n    async listCommands(): Promise<{ id: string; name: string }[]> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/commands/`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        accept: \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const commands: { id: string; name: string }[] = await response.json();\r\n            return commands;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to list commands:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes an Obsidian command by its command ID.\r\n     * @param commandId - The ID of the command to execute.\r\n     * @returns A promise that resolves when the command is successfully executed.\r\n     */\r\n    async executeCommand(commandId: string): Promise<void> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${this.host_url}/commands/execute`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${this.token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ commandId }),\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to execute command:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches for notes in the vault based on the provided query and options.\r\n     * @param query - The query to search for. Can be a string or an object.\r\n     * @param queryFormat - The format of the query (plaintext, dataview, or jsonlogic).\r\n     * @param options - Additional options for the search.\r\n     * @returns A promise that resolves to an array of search results.\r\n     */\r\n    async search(\r\n        query: string | object,\r\n        queryFormat: 'plaintext' | 'dataview' | 'jsonlogic' = 'plaintext',\r\n        options: {\r\n            contextLength?: number;\r\n            ignoreCase?: boolean;\r\n            isRegex?: boolean;\r\n            searchIn?: string[];\r\n        } = {}\r\n    ): Promise<ResultNoteApi[]|ResultNoteSearchApi[]> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        //ignoreCase = true, isRegex = false, searchIn = []\r\n        const { contextLength = 100 } = options;\r\n\r\n        // Determine Content-Type and body based on queryFormat\r\n        let contentType: string;\r\n        let body: string;\r\n\r\n        switch (queryFormat) {\r\n            case 'dataview':\r\n                contentType = 'application/vnd.olrapi.dataview.dql+txt';\r\n                if (typeof query !== 'string') {\r\n                    throw new Error('Dataview query must be a string.');\r\n                }\r\n                body = query;\r\n                break;\r\n            case 'jsonlogic':\r\n                contentType = 'application/vnd.olrapi.jsonlogic+json';\r\n                if (typeof query !== 'object') {\r\n                    throw new Error('JsonLogic query must be an object.');\r\n                }\r\n                body = JSON.stringify(query);\r\n                break;\r\n            case 'plaintext':\r\n            default:\r\n                contentType = 'application/json';\r\n                if (typeof query !== 'string') {\r\n                    throw new Error('Plaintext query must be a string.');\r\n                }\r\n                body = query;\r\n                break;\r\n        }\r\n\r\n        try {\r\n\r\n            elizaLogger.log(\r\n                `Processing search query with format ${queryFormat}:`,\r\n                body\r\n            );\r\n\r\n            if (queryFormat === 'dataview' || queryFormat === 'jsonlogic') {\r\n\r\n            const response = await fetch(`${this.host_url}/search`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${this.token}`,\r\n                    'Content-Type': contentType,\r\n                    Accept: 'application/json',\r\n                },\r\n                body: body,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const results: ResultNoteSearchApi[] = await response.json();\r\n            return results;\r\n\r\n        } else {\r\n\r\n            const response = await fetch(`${this.host_url}/search/simple?query=${encodeURIComponent(body)}&contextLength=${contextLength}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${this.token}`,\r\n                    'Content-Type': contentType,\r\n                    Accept: 'application/json',\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const results: ResultNoteApi[] = await response.json();\r\n            return results;\r\n        }\r\n\r\n        } catch (error) {\r\n            elizaLogger.error('Search failed:', error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Searches for notes in the vault based on the provided query and options.\r\n     * @param query - The query to search for. Can be a string or an object.\r\n     * @param queryFormat - The format of the query (plaintext, dataview, or jsonlogic).\r\n     * @param options - Additional options for the search.\r\n     * @returns A promise that resolves to an array of search results.\r\n     */\r\n    async searchKeywords(\r\n        query: string,\r\n        contextLength: number = 100\r\n    ): Promise<ResultNoteApi[]> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        // Split on OR to get main chunks\r\n        const orQueries = query.split(/\\s+OR\\s+/).map((q) => q.trim());\r\n\r\n        elizaLogger.log(\r\n            `Processing search query with OR operator:`,\r\n            orQueries\r\n        );\r\n\r\n        try {\r\n            const allResults: ResultNoteApi[] = [];\r\n\r\n            // Handle each OR chunk separately\r\n            for (const orQuery of orQueries) {\r\n                const response = await fetch(\r\n                    `${this.host_url}/search/simple/?query=${encodeURIComponent(orQuery)}&contextLength=${contextLength}`,\r\n                    {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            Authorization: `Bearer ${this.token}`,\r\n                            accept: \"application/json\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n\r\n                const results: ResultNoteApi[] = await response.json();\r\n                allResults.push(...results);\r\n            }\r\n\r\n            // Remove duplicates based on filename\r\n            const uniqueResults = Array.from(\r\n                new Map(\r\n                    allResults.map((item) => [item.filename, item])\r\n                ).values()\r\n            );\r\n\r\n            elizaLogger.success(`Found ${uniqueResults.length} unique results`);\r\n            elizaLogger.debug(\"Search results:\", uniqueResults);\r\n            return uniqueResults;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Obsidian search failed:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Recursively scans directories and builds a list of all files\r\n     * @param directory - The directory to scan, empty string for root\r\n     * @returns Array of file paths in format 'directory/file.md'\r\n     */\r\n    private async scanDirectoryRecursively(directory: string = ''): Promise<string[]> {\r\n        const allFiles: string[] = [];\r\n        const dirsToProcess: string[] = [directory];\r\n        const processedDirs = new Set<string>();\r\n\r\n        while (dirsToProcess.length > 0) {\r\n            const currentDir = dirsToProcess.shift()!;\r\n\r\n            if (processedDirs.has(currentDir)) {\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                elizaLogger.debug(`Scanning directory: ${currentDir}`);\r\n                const items = await this.listDirectoryFiles(currentDir);\r\n\r\n                for (const item of items) {\r\n                    if (item.endsWith('/')) {\r\n                        // It's a directory, add to processing queue\r\n                        const fullPath = currentDir ? `${currentDir}${item}` : item;\r\n                        if (!processedDirs.has(fullPath)) {\r\n                            dirsToProcess.push(fullPath);\r\n                        }\r\n                    } else if (item.endsWith('.md')) {\r\n                        // It's a markdown file, add to results\r\n                        const filePath = currentDir ? `${currentDir}${item}` : item;\r\n                        allFiles.push(filePath);\r\n                    }\r\n                }\r\n\r\n                processedDirs.add(currentDir);\r\n            } catch (error) {\r\n                elizaLogger.error(`Error scanning directory ${currentDir}:`, error);\r\n            }\r\n        }\r\n\r\n        return allFiles;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all files in the vault.\r\n     * @returns A promise that resolves to an array of file paths.\r\n     */\r\n    async getAllFiles(): Promise<string[]> {\r\n        if (!this.connected) {\r\n            await this.connect();\r\n        }\r\n\r\n        try {\r\n            elizaLogger.debug(\"Starting file scanning process\");\r\n\r\n            // Get root files and directories\r\n            const rootItems = await this.listFiles();\r\n            const allFiles: string[] = [];\r\n\r\n            // Process root level markdown files\r\n            const rootMdFiles = rootItems.filter(item => item.endsWith('.md'));\r\n            allFiles.push(...rootMdFiles);\r\n\r\n            // Process directories\r\n            const directories = rootItems.filter(item => item.endsWith('/'));\r\n            for (const dir of directories) {\r\n                const dirFiles = await this.scanDirectoryRecursively(dir);\r\n                allFiles.push(...dirFiles);\r\n            }\r\n\r\n            elizaLogger.info(`Completed scanning. Found ${allFiles.length} files in vault`);\r\n\r\n            // Remove any duplicates\r\n            const uniqueFiles = [...new Set(allFiles)];\r\n\r\n            return uniqueFiles;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in getAllFiles:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates memories from all files in the vault.\r\n     * @returns A promise that resolves to the number of memories created.\r\n     */\r\n    async createMemoriesFromFiles(): Promise<number> {\r\n        try {\r\n            elizaLogger.info(\"Starting to create memories from vault files\");\r\n            const allFiles = await this.getAllFiles();\r\n\r\n            elizaLogger.debug(\"All files:\", allFiles);\r\n            elizaLogger.success(`Found ${allFiles.length} files in vault`);\r\n            //return allFiles;\r\n\r\n            for (const file of allFiles) {\r\n                try {\r\n                    // Only process markdown files\r\n                    if (!file.endsWith('.md')) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Get the file content\r\n                    const content = await this.getNote(file);\r\n                    if (!content) {\r\n                        elizaLogger.warn(`No content found for file: ${file}`);\r\n                        continue;\r\n                    }\r\n\r\n                    const contentHash = createHash(\"sha256\")\r\n                        .update(JSON.stringify(content))\r\n                        .digest(\"hex\");\r\n\r\n                    const knowledgeId = stringToUuid(\r\n                        `obsidian-${file}`\r\n                    );\r\n\r\n                    const existingDocument =\r\n                        await this.runtime.documentsManager.getMemoryById(knowledgeId);\r\n\r\n                    if (\r\n                        existingDocument &&\r\n                        existingDocument.content[\"hash\"] === contentHash\r\n                    ) {\r\n                        elizaLogger.debug(`Skipping unchanged file: ${file}`);\r\n                        continue;\r\n                    }\r\n\r\n                    elizaLogger.info(\r\n                        `Processing knowledge for ${this.runtime.character.name} - ${file}`\r\n                    );\r\n\r\n                    await knowledge.set(this.runtime, {\r\n                        id: knowledgeId,\r\n                        content: {\r\n                            text: content.content,\r\n                            hash: contentHash,\r\n                            source: \"obsidian\",\r\n                            attachments: [],\r\n                            metadata: {\r\n                                path: file,\r\n                                tags: content.tags,\r\n                                frontmatter: content.frontmatter,\r\n                                stats: content.stat\r\n                            },\r\n                        },\r\n                    });\r\n\r\n                    // delay to avoid throttling\r\n                    await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n                } catch (error) {\r\n                    elizaLogger.error(`Error processing file ${file}:`, error);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            elizaLogger.success(\"Finished creating memories from vault notes\");\r\n\r\n            return allFiles.length;\r\n\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in createMemoriesFromFiles:\", error);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the client is connected to Obsidian.\r\n     * @returns `true` if the client is connected, `false` otherwise.\r\n     */\r\n    isConnected(): boolean {\r\n        return this.connected;\r\n    }\r\n\r\n    /**\r\n     * Closes the connection to Obsidian.\r\n     */\r\n    close() {\r\n        this.connected = false;\r\n        ObsidianProvider.instance = null;\r\n    }\r\n}\r\n","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nexport const obsidianEnvSchema = z\r\n    .object({\r\n        OBSIDIAN_API_URL: z.string().nullable().optional(),\r\n        OBSIDIAN_API_PORT: z.string().default(\"27123\"),\r\n        OBSIDIAN_API_TOKEN: z.string(),\r\n    })\r\n    .refine((data) => !!data.OBSIDIAN_API_TOKEN, {\r\n        message: \"OBSIDIAN_API_TOKEN is required\",\r\n    });\r\n\r\nexport type ObsidianConfig = z.infer<typeof obsidianEnvSchema>;\r\n\r\nexport async function validateObsidianConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<ObsidianConfig> {\r\n    try {\r\n        const config = {\r\n            OBSIDIAN_API_URL:\r\n                runtime.getSetting(\"OBSIDIAN_API_URL\") ||\r\n                process.env.OBSIDIAN_API_URL ||\r\n                null,\r\n            OBSIDIAN_API_PORT:\r\n                runtime.getSetting(\"OBSIDIAN_API_PORT\") ||\r\n                process.env.OBSIDIAN_API_PORT ||\r\n                \"27123\",\r\n            OBSIDIAN_API_TOKEN:\r\n                runtime.getSetting(\"OBSIDIAN_API_TOKEN\") ||\r\n                process.env.OBSIDIAN_API_TOKEN,\r\n        };\r\n\r\n        return obsidianEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `Obsidian configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport interface SearchMatchApi {\r\n    match: {\r\n        start: number;\r\n        end: number;\r\n    };\r\n    context: string;\r\n}\r\n\r\nexport const noteSchema = z.object({\r\n    tags: z.array(z.string()).optional(),\r\n    frontmatter: z.record(z.unknown()).optional(),\r\n    stat: z.object({\r\n        ctime: z.number(),\r\n        mtime: z.number(),\r\n        size: z.number(),\r\n    }).nullable().optional(),\r\n    path: z.string(),\r\n    content: z.string().nullable().optional(),\r\n});\r\n\r\nexport type NoteContent = z.infer<typeof noteSchema>;\r\n\r\nexport const isValidNote = (note: unknown): note is NoteContent => {\r\n    return noteSchema.safeParse(note).success;\r\n};\r\n\r\nexport const fileSchema = z.object({\r\n    path: z.string(),\r\n    content: z.string().nullable().optional(),\r\n    stat: z.object({\r\n        ctime: z.number(),\r\n        mtime: z.number(),\r\n        size: z.number(),\r\n    }).nullable().optional()\r\n});\r\n\r\nexport type FileContent = z.infer<typeof fileSchema>;\r\n\r\nexport const isValidFile = (file: unknown): file is FileContent => {\r\n    return fileSchema.safeParse(file).success;\r\n};\r\n\r\nexport interface ResultNoteApi {\r\n    filename: string;\r\n    matches: SearchMatchApi[];\r\n    score: number;\r\n}\r\n\r\nexport interface ResultNoteSearchApi {\r\n    filename: string;\r\n    result: boolean;\r\n}\r\n\r\nexport interface ServerInfo {\r\n    authenticated: boolean;\r\n    ok: boolean;\r\n    service: string;\r\n    versions: {\r\n        obsidian: string;\r\n        self: string;\r\n    };\r\n}\r\n\r\nexport interface Command {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface PatchContent {\r\n    content: string;\r\n    line: number;\r\n}\r\n\r\n/*\r\nexport interface NoteHierarchy {\r\n    path: string;\r\n    content: string;\r\n    links: NoteHierarchy[];\r\n}\r\n*/\r\n\r\nexport const noteHierarchySchema = z.object({\r\n    path: z.string(),\r\n    content: z.string().nullable().optional(),\r\n    links: z.lazy(() => z.array(noteHierarchySchema)).nullable().optional()\r\n});\r\n\r\nexport type NoteHierarchy = z.infer<typeof noteHierarchySchema>;\r\n\r\nexport const isValidNoteHierarchy = (hierarchy: unknown): hierarchy is NoteHierarchy => {\r\n    return noteHierarchySchema.safeParse(hierarchy).success;\r\n};\r\n\r\nexport const searchKeywordSchema = z.object({\r\n    query: z.string().min(1).describe(\"The keywords to search for\"),\r\n    options: z\r\n        .object({\r\n            vault: z.string().optional(),\r\n            includeExcerpt: z.boolean().optional(),\r\n            limit: z.number().optional(),\r\n        })\r\n        .optional(),\r\n});\r\n\r\nexport type SearchKeyword = z.infer<typeof searchKeywordSchema>;\r\n\r\nexport function isSearchKeyword(obj: any): obj is SearchKeyword {\r\n    return searchKeywordSchema.safeParse(obj).success;\r\n}\r\n\r\nexport type QueryFormat = 'plaintext' | 'dataview' | 'jsonlogic';\r\n\r\nexport interface SearchOptions {\r\n    contextLength?: number;\r\n    ignoreCase?: boolean;\r\n    searchIn?: string[] | null;\r\n}\r\n\r\nexport interface SearchQuery {\r\n    query?: string;\r\n    queryFormat?: QueryFormat;\r\n    options?: SearchOptions;\r\n}\r\n\r\nexport const searchOptionsSchema = z.object({\r\n    contextLength: z.number().optional(),\r\n    ignoreCase: z.boolean().nullable().optional().default(true),\r\n    searchIn: z.array(z.string()).nullable().optional().default([]),\r\n});\r\n\r\nexport const searchQuerySchema = z.object({\r\n    query: z.union([z.string(), z.record(z.unknown())]).describe(\"The query to search for\"),\r\n    queryFormat: z.enum(['plaintext', 'dataview', 'jsonlogic']).describe(\"The format of the query\"),\r\n    options: searchOptionsSchema.optional().describe(\"Search options\"),\r\n});\r\n\r\nexport const isSearchQuery = (obj: unknown): obj is SearchQuery => {\r\n    return searchQuerySchema.safeParse(obj).success;\r\n};\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { getObsidian }  from \"../helper\";\r\n\r\nexport const listNotesAction: Action = {\r\n    name: \"LIST_NOTES\",\r\n    similes: [\r\n        \"LIST_NOTES\",\r\n        \"SHOW_NOTES\",\r\n        \"GET_NOTES\",\r\n        \"FETCH_NOTES\",\r\n        \"VIEW_NOTES\",\r\n        \"DISPLAY_NOTES\",\r\n        \"ENUMERATE_NOTES\",\r\n    ],\r\n    description:\r\n        \"List all markdown notes in the Obsidian vault. Use format: 'List notes' or 'Show all notes'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting list notes handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            elizaLogger.info(\"Fetching list of notes from vault\");\r\n            const notes: string[] = await obsidian.listNotes();\r\n\r\n            elizaLogger.info(`Successfully retrieved ${notes.length} notes`);\r\n\r\n            // Format the notes list into a readable string\r\n            const formattedNotes = notes.length > 0\r\n                ? notes.map(note => `- ${note}`).join('\\n')\r\n                : \"No notes found in the vault\";\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Found ${notes.length} notes in the vault:\\n\\n${formattedNotes}`,\r\n                    metadata: {\r\n                        count: notes.length,\r\n                        notes: notes,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error listing notes:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error listing notes: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"List notes\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"LIST_NOTES\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show all notes in vault\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"LIST_NOTES\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { getObsidian }  from \"../helper\";\r\n\r\nexport const listAllFilesAction: Action = {\r\n    name: \"LIST_ALL\",\r\n    similes: [\r\n        \"LIST_VAULT_FILES\",\r\n        \"LIST_ALL_VAULT_FILES\",\r\n        \"LIST_ALL_FILES\",\r\n        \"SHOW_ALL_FILES\",\r\n        \"GET_ALL_FILES\",\r\n        \"FETCH_ALL_FILES\",\r\n        \"VIEW_ALL_FILES\",\r\n        \"DISPLAY_ALL_FILES\",\r\n        \"ENUMERATE_ALL_FILES\",\r\n        \"LIST_EVERYTHING\",\r\n        \"SHOW_EVERYTHING\"\r\n    ],\r\n    description:\r\n        \"List all files in the entire Obsidian vault. Use format: 'List all files' or 'Show all files'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting list all files handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            elizaLogger.info(\"Fetching list of all files from vault\");\r\n\r\n            const files: string[] = await obsidian.listFiles();\r\n            elizaLogger.info(`Successfully retrieved ${files.length} files`);\r\n\r\n            // Group files by directory for better organization\r\n            const filesByDirectory: { [key: string]: string[] } = {};\r\n\r\n            for (const file of files) {\r\n                const directory = file.split('/').slice(0, -1).join('/') || '/';\r\n                if (!filesByDirectory[directory]) {\r\n                    filesByDirectory[directory] = [];\r\n                }\r\n                filesByDirectory[directory].push(file.split('/').pop() || file);\r\n            }\r\n\r\n\r\n            // Format the files list into a readable tree structure\r\n            const formattedFiles = files.length > 0\r\n                ? Object.entries(filesByDirectory)\r\n                    .map(([directory, files]) =>\r\n                        `${directory === '/' ? 'Root' : directory}:\\n${files.map(file => `  - ${file}`).join('\\n')}`)\r\n                    .join('\\n\\n')\r\n                : \"No files found in the vault\";\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Found ${files.length} files in the vault:\\n\\n${formattedFiles}`,\r\n                    metadata: {\r\n                        count: files.length,\r\n                        files: files,\r\n                        filesByDirectory: filesByDirectory,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error listing files:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error listing files: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"List all files\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"LIST_ALL\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show everything in the vault\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"LIST_ALL\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    AgentRuntime as IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { getObsidian }  from \"../helper\";\r\n\r\nexport const listDirectoryAction: Action = {\r\n    name: \"LIST_DIRECTORY\",\r\n    similes: [\r\n        \"SHOW_DIRECTORY\",\r\n        \"LIST_FOLDER\",\r\n        \"SHOW_FOLDER\",\r\n        \"VIEW_DIRECTORY\",\r\n        \"VIEW_FOLDER\",\r\n        \"LIST_DIR\",\r\n        \"SHOW_DIR\",\r\n        \"DIR\",\r\n        \"LS\",\r\n    ],\r\n    description:\r\n        \"List all files in a specific directory of the Obsidian vault. Use format: 'List directory PATH' or 'Show files in PATH'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting list directory handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            let directoryPath = \"\";\r\n            const text = message.content.text;\r\n\r\n            // Extract directory path from various text formats\r\n            if (text) {\r\n                const patterns = [\r\n                    /^(?:List|Show|View)\\s+(?:directory|folder|files in|dir)\\s+(.+)$/i,\r\n                    /^(?:List|Show|View)\\s+(.+)\\s+(?:directory|folder|files)$/i,\r\n                    /^(?:ls|dir)\\s+(.+)$/i\r\n                ];\r\n\r\n                for (const pattern of patterns) {\r\n                    const match = text.match(pattern);\r\n                    if (match) {\r\n                        directoryPath = match[1].trim();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Fallback to explicit path if provided\r\n            if (!directoryPath && message.content.path) {\r\n                directoryPath = message.content.path as string;\r\n            }\r\n\r\n            if (!directoryPath) {\r\n                throw new Error(\r\n                    \"Directory path is required. Use format: 'List directory PATH' or 'Show files in PATH'\"\r\n                );\r\n            }\r\n\r\n            elizaLogger.info(`Listing files in directory: ${directoryPath}`);\r\n            const files: string[] = await obsidian.listDirectoryFiles(directoryPath);\r\n            elizaLogger.info(`Successfully retrieved ${files.length} files`);\r\n\r\n            // Format the files list into a readable string\r\n            const formattedFiles = files.length > 0\r\n                ? files.map(file => `- ${file}`).join('\\n')\r\n                : \"No files found in the directory\";\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Found ${files.length} files in ${directoryPath}:\\n\\n${formattedFiles}`,\r\n                    metadata: {\r\n                        directory: directoryPath,\r\n                        count: files.length,\r\n                        files: files,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error listing directory:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error listing directory: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"List directory BLOG POSTS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"LIST_DIRECTORY\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show files in PROJECTS/src\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"LIST_DIRECTORY\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"ls DOCUMENTS/research\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"LIST_DIRECTORY\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { getObsidian }  from \"../helper\";\r\n\r\nexport const createKnowledgeAction: Action = {\r\n    name: \"CREATE_KNOWLEDGE\",\r\n    similes: [\r\n        \"BUILD_KNOWLEDGE\",\r\n        \"CREATE_KNOWLEDGE_BASE\",\r\n        \"CREATE_KNOWLEDGE_BASE\",\r\n        \"BUILD_KNOWLEDGE_BASE\"\r\n    ],\r\n    description:\r\n        \"Scan all markdown notes hierarchically in the Obsidian vault and build a memoryknowledge base. Use format: 'Create knowledge' or 'Build knowledge base'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting create knowledge handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            elizaLogger.info(\"Fetching all notes from vault and creating knowledge base\");\r\n            elizaLogger.log(\"Be patient, this might take a while, depending on the size of your vault...\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"This might take a while, depending on the size of your vault...\",\r\n                    error: false,\r\n                });\r\n            }\r\n            try {\r\n                const notesMemorized = await obsidian.createMemoriesFromFiles();\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Finished creating knowledge base for ${notesMemorized ?? 0} notes in the vault`,\r\n                        metadata: {\r\n                            count: notesMemorized ?? 0,\r\n                        },\r\n                    });\r\n                }\r\n\r\n            } catch (error) {\r\n                elizaLogger.error(\"Error creating knowledge memories from notes:\", error);\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Error creating knowledge memories from notes: ${error.message}`,\r\n                        error: true,\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error creating knowledge base:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error creating knowledge base: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create knowledge\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"CREATE_KNOWLEDGE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Build knowledge base\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"CREATE_KNOWLEDGE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    AgentRuntime as IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass\r\n} from \"@elizaos/core\";\r\nimport { NoteContent, NoteHierarchy, isValidNoteHierarchy, noteHierarchySchema } from \"../types\";\r\nimport { getObsidian, extractLinks, storeHierarchyInMemory, retrieveHierarchyFromMemory } from \"../helper\";\r\nimport { traversalTemplate } from \"../templates/traversal\";\r\n\r\nexport const noteTraversalAction: Action = {\r\n    name: \"TRAVERSE_NOTE\",\r\n    similes: [\r\n        \"MAP_NOTE_LINKS\",\r\n        \"MAP_LINKS_IN\",\r\n        \"GET_NOTE_HIERARCHY\",\r\n        \"SHOW_NOTE_LINKS\",\r\n        \"LIST_NOTE_CONNECTIONS\",\r\n        \"DISPLAY_NOTE_NETWORK\",\r\n        \"EXPLORE_NOTE_LINKS\",\r\n        \"VIEW_NOTE_CONNECTIONS\",\r\n        \"ANALYZE_NOTE_LINKS\",\r\n    ],\r\n    description:\r\n        \"Generate a hierarchical list of all outgoing links from a specific note, including nested links. Use format: 'Map links in FOLDER/Note.md'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting note traversal handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            let path = \"\";\r\n            /*const text = message.content.text;\r\n\r\n            // Extract path from text like \"Map links in FOLDER/Note.md\"\r\n            if (text) {\r\n                const match = text.match(/^(?:Map links in\\s+)?(.+\\.md)$/i);\r\n                if (match) {\r\n                    path = match[1];\r\n                }\r\n            }*/\r\n\r\n            // Initialize or update state for context generation\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: traversalTemplate(message.content.text),\r\n            });\r\n\r\n            const noteContext = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.MEDIUM,\r\n                schema: noteHierarchySchema,\r\n                stop: [\"\\n\"]\r\n            }) as any;\r\n\r\n            if (!isValidNoteHierarchy(noteContext.object)) {\r\n                elizaLogger.error(\r\n                    \"Note path is required. Use format: 'Map links in FOLDER/Note.md' - \",\r\n                    noteContext.object\r\n                );\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Note path is required. Use format: 'Map links in FOLDER/Note.md' - ${noteContext.object}`,\r\n                        error: true,\r\n                    });\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            // Extract path from context\r\n            path = noteContext.object.path;\r\n\r\n            // Fallback to explicit path if provided\r\n            if (!path && message.content.path) {\r\n                path = message.content.path as string;\r\n            }\r\n\r\n            if (!path) {\r\n                throw new Error(\r\n                    \"Note path is required. Use format: 'Map links in FOLDER/Note.md'\"\r\n                );\r\n            }\r\n\r\n            // Try to retrieve from memory first\r\n            const cachedHierarchy = await retrieveHierarchyFromMemory(runtime, message, path);\r\n            if (cachedHierarchy) {\r\n                elizaLogger.info(`Using cached hierarchy for note: ${path}`);\r\n                if (callback) {\r\n                    callback({\r\n                        text: formatHierarchy(cachedHierarchy),\r\n                        metadata: {\r\n                            path: path,\r\n                            hierarchy: cachedHierarchy,\r\n                            source: 'cache'\r\n                        },\r\n                    });\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // Implement recursive function to build the hierarchy\r\n            async function buildLinkHierarchy(notePath: string, depth = 0, visited = new Set<string>()): Promise<NoteHierarchy | null> {\r\n                // Prevent infinite recursion by checking if we've visited this note\r\n                if (visited.has(notePath)) {\r\n                    return null;\r\n                }\r\n                visited.add(notePath);\r\n\r\n                try {\r\n                    const noteContent: NoteContent = await obsidian.getNote(notePath);\r\n                    const links = extractLinks(noteContent);\r\n                    const hierarchy: NoteHierarchy = {\r\n                        path: notePath,\r\n                        content: noteContent.content,\r\n                        links: []\r\n                    };\r\n\r\n                    // Limit recursion depth to prevent excessive traversal\r\n                    if (depth < 7) {\r\n                        for (const link of links) {\r\n                            const childHierarchy = await buildLinkHierarchy(link, depth + 1, visited);\r\n                            if (childHierarchy) {\r\n                                hierarchy.links.push(childHierarchy);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return hierarchy;\r\n                } catch (error) {\r\n                    elizaLogger.error(`Failed to process note ${notePath}: ${error.message}`);\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            elizaLogger.info(`Building link hierarchy for note: ${path}`);\r\n            const hierarchy = await buildLinkHierarchy(path);\r\n\r\n            if (!hierarchy) {\r\n                throw new Error(`Failed to build hierarchy for note: ${path}`);\r\n            }\r\n\r\n            // Store the hierarchy in memory for future use\r\n            await storeHierarchyInMemory(runtime, message, hierarchy);\r\n\r\n            // Format the hierarchy for display\r\n            function formatHierarchy(node: NoteHierarchy, level = 0): string {\r\n                const indent = \"  \".repeat(level);\r\n                let result = `${indent}- ${node.path}\\n`;\r\n\r\n                elizaLogger.info(`Node hierarchy links for note: ${node.links}`);\r\n\r\n                for (const link of node.links as NoteHierarchy[]) {\r\n                    result += formatHierarchy(link, level + 1);\r\n                }\r\n                return result;\r\n            }\r\n\r\n            const formattedHierarchy = formatHierarchy(hierarchy);\r\n            elizaLogger.info(`Successfully built hierarchy for note: ${path}`);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: formattedHierarchy,\r\n                    metadata: {\r\n                        path: path,\r\n                        hierarchy: hierarchy,\r\n                        source: 'obsidian'\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in note traversal:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error in note traversal: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show outgoing links in Knowledge Base/Main Index.md\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"TRAVERSE_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Map links in Knowledge Base/Main Index.md\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"TRAVERSE_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show note connections in Projects/Project Overview.md\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"TRAVERSE_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","export const traversalTemplate = (userRequest: string) => `\r\nRespond with a JSON markdown block containing ONLY the extracted values. Use null for any values that cannot be determined.\r\n\r\nEnsure that:\r\n1. The path is properly formatted with correct folder structure and ends with .md\r\n2. Depth is a reasonable number (1-5) to prevent excessive traversal\r\n3. Content inclusion is specified when detailed analysis is needed\r\n4. Filters are provided when specific note types or locations are targeted\r\n5. Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"path\": \"<folder>/<subfolder>/<note_name>.md\",\r\n    \"depth\": <number>,\r\n    \"includeContent\": <boolean>,\r\n    \"filters\": {\r\n        \"tags\": [\"<tag1>\", \"<tag2>\"],\r\n        \"folders\": [\"<folder1>\", \"<folder2>\"],\r\n        \"modified\": \"<YYYY-MM-DD>\"\r\n    }\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n${userRequest}\r\n\r\nRespond ONLY with a JSON markdown block containing ONLY the extracted values.`;\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n    composeContext,\r\n    ModelClass,\r\n    splitChunks,\r\n    trimTokens,\r\n    generateText,\r\n} from \"@elizaos/core\";\r\nimport { NoteContent } from \"../types\";\r\nimport { baseSummaryTemplate } from \"../templates/summary\";\r\nimport { getObsidian }  from \"../helper\";\r\n\r\nexport const getActiveNoteAction: Action = {\r\n    name: \"GET_ACTIVE_NOTE\",\r\n    similes: [\r\n        \"FETCH_ACTIVE_NOTE\",\r\n        \"READ_ACTIVE_NOTE\",\r\n        \"CURRENT_NOTE\",\r\n        \"ACTIVE_NOTE\",\r\n        \"OPENED_NOTE\",\r\n        \"CURRENT_FILE\",\r\n    ],\r\n    description:\r\n        \"Retrieve and display the content of the currently active note in Obsidian\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting get active note handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            elizaLogger.info(\"Fetching active note content\");\r\n            const noteContent: NoteContent = await obsidian.getActiveNote();\r\n\r\n            elizaLogger.info(\r\n                `Successfully retrieved active note: ${noteContent.path}`\r\n            );\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: noteContent.content,\r\n                    metadata: {\r\n                        path: noteContent.path,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error getting active note:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error retrieving active note: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"What's in my current note?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"GET_ACTIVE_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show me the active note\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"GET_ACTIVE_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n\r\nexport const summarizeActiveNoteAction: Action = {\r\n    name: \"SUMMARIZE_ACTIVE_NOTE\",\r\n    similes: [\r\n        \"SUMMARIZE_ACTIVE_NOTE\",\r\n        \"SUMMARIZE_CURRENT_NOTE\",\r\n        \"SUMMARIZE_OPEN_NOTE\",\r\n    ],\r\n    description:\r\n        \"Generate a focused summary of the currently active note in Obsidian\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting summarize active note handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            elizaLogger.info(\"Fetching active note content\");\r\n            const noteContent: NoteContent = await obsidian.getActiveNote();\r\n\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n            const chunkSize = 6500;\r\n\r\n            const chunks = await splitChunks(noteContent.content, chunkSize, 0);\r\n            let currentSummary = \"\";\r\n\r\n            elizaLogger.info(\"Composing summary context\");\r\n            for (let i = 0; i < chunks.length; i++) {\r\n                const chunk = chunks[i];\r\n                state.currentSummary = currentSummary;\r\n                state.currentChunk = chunk;\r\n\r\n                const activeNoteTemplate = await trimTokens(\r\n                    baseSummaryTemplate,\r\n                    chunkSize,\r\n                    runtime\r\n                );\r\n\r\n                const context = composeContext({\r\n                    state,\r\n                    template: activeNoteTemplate,\r\n                });\r\n                const summary = await generateText({\r\n                    runtime,\r\n                    context,\r\n                    modelClass: ModelClass.MEDIUM,\r\n                });\r\n\r\n                currentSummary = currentSummary + \"\\n\" + summary;\r\n            }\r\n            if (!currentSummary) {\r\n                elizaLogger.error(\"Error: No summary found\");\r\n                return false;\r\n            }\r\n            if (callback) {\r\n                if (\r\n                    currentSummary.trim()?.split(\"\\n\").length < 4 ||\r\n                    currentSummary.trim()?.split(\" \").length < 100\r\n                ) {\r\n                    callback({\r\n                        text: `Here is the summary:\\n\\`\\`\\`md\\n${currentSummary.trim()}\\n\\`\\`\\``,\r\n                        metadata: {\r\n                            path: noteContent.path,\r\n                        },\r\n                    });\r\n                } else {\r\n                    callback({\r\n                        text: currentSummary.trim(),\r\n                        metadata: {\r\n                            path: noteContent.path,\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error summarizing active note:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error summarizing active note: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Summarize my current note\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SUMMARIZE_ACTIVE_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","export const summaryTemplate = `\r\nExtract a focused summary of the provided Obsidian note content based on the following:\r\n- **theme** (string): The main topic or theme to focus the summary around\r\n- **content** (string): The full markdown content to be summarized\r\n\r\nEnsure that:\r\n1. The summary is relevant to the specified theme/topic\r\n2. Key points and insights related to the theme are highlighted\r\n3. The summary maintains proper context from the original content\r\n4. Important quotes or examples related to the theme are preserved\r\n5. The summary length is proportional to the content's relevance to the theme\r\n6. Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\r\n\r\nProvide the summary in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"theme\": \"<theme>\",\r\n    \"summary\": \"<focused_summary>\",\r\n    \"relevance\": \"<high|medium|low>\",\r\n    \"key_points\": [\r\n        \"<point_1>\",\r\n        \"<point_2>\"\r\n    ],\r\n    \"related_quotes\": [\r\n        \"<quote_1>\",\r\n        \"<quote_2>\"\r\n    ]\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages and note content for context:\r\n{{recentMessages}}\r\n\r\nNote content to summarize:\r\n{{responseData}}\r\n`;\r\n\r\nexport const baseSummaryTemplate = `# Summarized so far (we are adding to this)\r\n{{currentSummary}}\r\n\r\n# Current note chunk we are summarizing (includes metadata)\r\n{{currentChunk}}\r\n\r\nSummarization objective: {{objective}}\r\n\r\n# Instructions: Summarize the note content so far. Return the summary. Do not acknowledge this request, just summarize and continue the existing summary if there is one. Capture any important details to the objective. Only respond with the new summary text.\r\nYour response should be extremely detailed and include any and all relevant information.`;\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass\r\n} from \"@elizaos/core\";\r\nimport { NoteContent, noteSchema, isValidNote } from \"../types\";\r\nimport { getObsidian }  from \"../helper\";\r\nimport { noteTemplate } from \"../templates/note\";\r\n\r\nexport const getNoteAction: Action = {\r\n    name: \"GET_NOTE\",\r\n    similes: [\r\n        \"DISPLAY_NOTE\",\r\n        \"GRAB_NOTE\",\r\n        \"FETCH_NOTE\",\r\n        \"READ_NOTE\",\r\n        \"RETRIEVE_NOTE\",\r\n        \"LOAD_NOTE\",\r\n        \"OPEN_NOTE\",\r\n        \"ACCESS_NOTE\",\r\n        \"VIEW_NOTE\",\r\n        \"SHOW_NOTE\"\r\n    ],\r\n    description:\r\n        \"Retrieve and display the content of a specific note from Obsidian vault by path. Use format: 'Get FOLDER/SUBFOLDER/Note Name.md'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting get note handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            let path = \"\";\r\n            // Initialize or update state for context generation\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: noteTemplate(message.content.text),\r\n            });\r\n\r\n            const noteContext = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.MEDIUM,\r\n                schema: noteSchema,\r\n                stop: [\"\\n\"]\r\n            }) as any;\r\n\r\n            if (!isValidNote(noteContext.object)) {\r\n                elizaLogger.error(\r\n                    \"A Note path is required. Use format: 'Get FOLDER/SUBFOLDER/Note Name.md' - \",\r\n                    noteContext.object\r\n                );\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `A Note path is required. Use format: 'Get FOLDER/SUBFOLDER/Note Name.md - ${noteContext.object}`,\r\n                        error: true,\r\n                    });\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            // Extract path from note context\r\n            path = noteContext.object.path\r\n\r\n            elizaLogger.info(`Fetching note at path: ${path}`);\r\n            const noteContent: NoteContent = await obsidian.getNote(path);\r\n\r\n            elizaLogger.info(`Successfully retrieved note: ${path}`);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: noteContent.content,\r\n                    metadata: {\r\n                        path: noteContent.path,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error retrieving note:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error retrieving note: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get BLOG POSTS/How to Angel Invest, Part 1.md\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"GET_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Fetch BLOG POSTS/How to Angel Invest, Part 2.md\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"GET_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Read BLOG POSTS/STARTUPS/Build a Team that Ships.md\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"GET_NOTE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","export const noteTemplate = (userRequest: string) => `\r\nRespond with a JSON block containing ONLY the extracted values. Use null for any values that cannot be determined.\r\n\r\nEnsure that:\r\n1. The path is properly formatted with correct folder structure and ends with .md\r\n2. The operation matches one of the supported actions (Default: READ)\r\n3. Content is provided when required for create/update operations\r\n4. Path uses forward slashes (/) as separators\r\n5. The note path follows Obsidian's naming conventions\r\n6. Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"path\": \"<folder>/<subfolder>/<note_name>.md\",\r\n    \"operation\": \"<READ|CREATE|UPDATE>\",\r\n    \"content\": \"<note_content_if_writing>\",\r\n    \"metadata\": {\r\n        \"tags\": [\"tag1\", \"tag2\"],\r\n        \"aliases\": [\"alias1\", \"alias2\"]\r\n    }\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user message for context:\r\n${userRequest}\r\n\r\nRespond ONLY with a JSON block containing ONLY the extracted values.`;\r\n\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass\r\n} from \"@elizaos/core\";\r\nimport { fileSchema, isValidFile } from \"../types\";\r\nimport { getObsidian }  from \"../helper\";\r\nimport { fileTemplate } from \"../templates/file\";\r\n\r\nexport const readFileAction: Action = {\r\n    name: \"READ_FILE\",\r\n    similes: [\r\n        \"GET_FILE\",\r\n        \"FETCH_FILE\",\r\n        \"READ_FILE\",\r\n        \"RETRIEVE_FILE\",\r\n        \"LOAD_FILE\",\r\n        \"OPEN_FILE\",\r\n        \"ACCESS_FILE\",\r\n        \"VIEW_FILE\",\r\n        \"SHOW_FILE\",\r\n        \"READ\",\r\n    ],\r\n    description:\r\n        \"Retrieve and display the content of any file from Obsidian vault by path. Use format: 'Read FOLDER/SUBFOLDER/filename'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting read file handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            let path = \"\";\r\n            /*const text = message.content.text;\r\n\r\n            // Extract path from text like \"Read FOLDER/file.txt\"\r\n            if (text) {\r\n                const match = text.match(/^(?:Read\\s+)?(.+)$/i);\r\n                if (match) {\r\n                    path = match[1];\r\n                }\r\n            }\r\n\r\n            // Fallback to explicit path if provided\r\n            if (!path && message.content.path) {\r\n                path = message.content.path as string;\r\n            }\r\n\r\n            if (!path) {\r\n                throw new Error(\r\n                    \"File path is required. Use format: 'Read FOLDER/SUBFOLDER/filename'\"\r\n                );\r\n            }*/\r\n            // Initialize or update state for context generation\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: fileTemplate(message.content.text),\r\n            });\r\n\r\n            const fileContext = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.MEDIUM,\r\n                schema: fileSchema,\r\n                stop: [\"\\n\"]\r\n            }) as any;\r\n\r\n            if (!isValidFile(fileContext.object)) {\r\n                elizaLogger.error(\r\n                    \"A file path is required. Use format: 'Read FOLDER/SUBFOLDER/filename' - \",\r\n                    fileContext.object\r\n                );\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `A file path is required. Use format: 'Read FOLDER/SUBFOLDER/filename' - ${fileContext.object}`,\r\n                        error: true,\r\n                    });\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            // Extract path from note context\r\n            path = fileContext.object.path;\r\n\r\n            elizaLogger.info(`Reading file at path: ${path}`);\r\n            const fileContent: string = await obsidian.readFile(path);\r\n\r\n            elizaLogger.info(`Successfully read file: ${path}`);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: fileContent,\r\n                    metadata: {\r\n                        path: path,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error reading file:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error reading file: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get DOCUMENTS/report.pdf\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"READ_FILE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Read PROJECTS/src/main.ts\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"READ_FILE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","export const fileTemplate = (userRequest: string) => `\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nEnsure that:\r\n1. The path is properly formatted with correct folder structure\r\n2. The operation matches one of the supported actions (Default: READ)\r\n3. Content is provided when required for write operations\r\n4. Path uses forward slashes (/) as separators\r\n5. Make sure to remove \\`\\`\\`json and \\`\\`\\` from the response\r\n\r\nProvide the details in the following JSON format:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"path\": \"<folder>/<subfolder>/<filename>\",\r\n    \"operation\": \"<READ|WRITE>\",\r\n    \"content\": \"<file_content_to_write>\"\r\n}\r\n\\`\\`\\`\r\n\r\nHere are the recent user messages for context:\r\n${userRequest}\r\n\r\nRespond ONLY with a JSON markdown block containing only the extracted values.`;\r\n\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass\r\n} from \"@elizaos/core\";\r\nimport { fileSchema, isValidFile } from \"../types\";\r\nimport { getObsidian } from \"../helper\";\r\nimport { fileTemplate } from \"../templates/file\";\r\n\r\nexport const saveFileAction: Action = {\r\n    name: \"SAVE_FILE\",\r\n    similes: [\r\n        \"WRITE_FILE\",\r\n        \"CREATE_FILE\",\r\n        \"SAVE\",\r\n        \"STORE_FILE\",\r\n        \"PUT_FILE\",\r\n        \"WRITE_TO_FILE\",\r\n        \"CREATE_NEW_FILE\"\r\n    ],\r\n    description:\r\n        \"Create or update a file in the Obsidian vault. Use format: 'Save FOLDER/SUBFOLDER/filename with content: your_content'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting save file handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            // Initialize or update state for context generation\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: fileTemplate(message.content.text),\r\n            });\r\n\r\n            const fileContext = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.MEDIUM,\r\n                schema: fileSchema,\r\n                stop: [\"\\n\"]\r\n            }) as any;\r\n\r\n            if (!isValidFile(fileContext.object)) {\r\n                elizaLogger.error(\r\n                    \"Invalid file information. Required: path and content. Format: 'Save FOLDER/SUBFOLDER/filename with content: your_content' - \",\r\n                    fileContext.object\r\n                );\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Invalid file information. Required: path and content. Format: 'Save FOLDER/SUBFOLDER/filename with content: your_content' - ${fileContext.object}`,\r\n                        error: true,\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            const { path, content } = fileContext.object;\r\n\r\n            if (!content) {\r\n                elizaLogger.error(\"File content is required for saving\");\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"File content is required for saving\",\r\n                        error: true,\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            elizaLogger.info(`Saving file at path: ${path}`);\r\n            // Note: Obsidian will create a new document at the path you have specified if such a document did not already exis\r\n            await obsidian.saveFile(path, content, true);\r\n            elizaLogger.info(`Successfully saved file: ${path}`);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully saved file: ${path}`,\r\n                    metadata: {\r\n                        path: path,\r\n                        operation: \"SAVE\",\r\n                        success: true\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error saving file:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error saving file: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Save DOCUMENTS/report.txt with content: This is a test report\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SAVE_FILE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create PROJECTS/src/config.json with content: { \\\"version\\\": \\\"1.0.0\\\" }\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"SAVE_FILE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass\r\n} from \"@elizaos/core\";\r\nimport { fileSchema, isValidFile } from \"../types\";\r\nimport { getObsidian } from \"../helper\";\r\nimport { fileTemplate } from \"../templates/file\";\r\n\r\nexport const openFileAction: Action = {\r\n    name: \"OPEN_FILE\",\r\n    similes: [\r\n        \"OPEN\",\r\n        \"LAUNCH_FILE\",\r\n        \"DISPLAY_FILE\",\r\n        \"SHOW_FILE\",\r\n        \"VIEW_FILE\"\r\n    ],\r\n    description:\r\n        \"Open a file in the Obsidian interface. Use format: 'Open FOLDER/SUBFOLDER/filename'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting open file handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            // Initialize or update state for context generation\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: fileTemplate(message.content.text),\r\n            });\r\n\r\n            const fileContext = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.MEDIUM,\r\n                schema: fileSchema,\r\n                stop: [\"\\n\"]\r\n            }) as any;\r\n\r\n            if (!isValidFile(fileContext.object)) {\r\n                elizaLogger.error(\r\n                    \"Invalid file path. Format: 'Open FOLDER/SUBFOLDER/filename' - \",\r\n                    fileContext.object\r\n                );\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Invalid file path. Format: 'Open FOLDER/SUBFOLDER/filename' - ${fileContext.object}`,\r\n                        error: true,\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            const { path } = fileContext.object;\r\n\r\n            elizaLogger.info(`Opening file at path: ${path}`);\r\n            await obsidian.openFile(path);\r\n            elizaLogger.info(`Successfully opened file: ${path}`);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully opened file: ${path}`,\r\n                    metadata: {\r\n                        path: path,\r\n                        operation: \"OPEN\",\r\n                        success: true\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error opening file:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error opening file: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Open DOCUMENTS/report.txt\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"OPEN_FILE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show PROJECTS/src/config.json\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"OPEN_FILE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n    composeContext,\r\n    generateObject,\r\n    ModelClass\r\n} from \"@elizaos/core\";\r\nimport { fileSchema, isValidFile } from \"../types\";\r\nimport { getObsidian } from \"../helper\";\r\nimport { fileTemplate } from \"../templates/file\";\r\n\r\nexport const updateFileAction: Action = {\r\n    name: \"UPDATE_FILE\",\r\n    similes: [\r\n        \"PATCH_FILE\",\r\n        \"MODIFY_FILE\",\r\n        \"UPDATE\",\r\n        \"PATCH\",\r\n        \"EDIT_FILE\",\r\n        \"CHANGE_FILE\"\r\n    ],\r\n    description:\r\n        \"Update an existing file in the Obsidian vault. Use format: 'Update FOLDER/SUBFOLDER/filename with content: your_content'\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            elizaLogger.debug(\"Validating Obsidian connection\");\r\n            const obsidian = await getObsidian(runtime);\r\n            await obsidian.connect();\r\n            elizaLogger.debug(\"Obsidian connection validated successfully\");\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Failed to validate Obsidian connection:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"Starting update file handler\");\r\n        const obsidian = await getObsidian(runtime);\r\n\r\n        try {\r\n            // Initialize or update state for context generation\r\n            if (!state) {\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            const context = composeContext({\r\n                state,\r\n                template: fileTemplate(message.content.text),\r\n            });\r\n\r\n            const fileContext = await generateObject({\r\n                runtime,\r\n                context,\r\n                modelClass: ModelClass.MEDIUM,\r\n                schema: fileSchema,\r\n                stop: [\"\\n\"]\r\n            }) as any;\r\n\r\n            if (!isValidFile(fileContext.object)) {\r\n                elizaLogger.error(\r\n                    \"Invalid file information. Required: path and content. Format: 'Update FOLDER/SUBFOLDER/filename with content: your_content' - \",\r\n                    fileContext.object\r\n                );\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Invalid file information. Required: path and content. Format: 'Update FOLDER/SUBFOLDER/filename with content: your_content' - ${fileContext.object}`,\r\n                        error: true,\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            const { path, content } = fileContext.object;\r\n\r\n            if (!content) {\r\n                elizaLogger.error(\"File content is required for updating\");\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"File content is required for updating\",\r\n                        error: true,\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            elizaLogger.info(`Updating file at path: ${path}`);\r\n            // Note: patchFile will only update existing files, it will not create new ones\r\n            await obsidian.patchFile(path, content);\r\n            elizaLogger.info(`Successfully updated file: ${path}`);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully updated file: ${path}`,\r\n                    metadata: {\r\n                        path: path,\r\n                        operation: \"UPDATE\",\r\n                        success: true\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error updating file:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error updating file: ${error.message}`,\r\n                    error: true,\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Update DOCUMENTS/report.txt with content: This is an updated report\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"UPDATE_FILE\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Patch PROJECTS/src/config.json with content: { \\\"version\\\": \\\"2.0.0\\\" }\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"{{responseData}}\",\r\n                    action: \"UPDATE_FILE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n};","import { searchAction } from \"./actions/search\";\r\nimport { listNotesAction } from \"./actions/listNotes\";\r\nimport { listAllFilesAction } from \"./actions/vault\";\r\nimport { listDirectoryAction } from \"./actions/vaultDirectory\";\r\nimport { createKnowledgeAction } from \"./actions/createKnowledge\";\r\nimport { noteTraversalAction } from \"./actions/noteTraversal\";\r\nimport {\r\n    getActiveNoteAction,\r\n    summarizeActiveNoteAction,\r\n} from \"./actions/activeNote\";\r\nimport { getNoteAction } from \"./actions/note\";\r\nimport { readFileAction } from \"./actions/file\";\r\nimport { saveFileAction } from \"./actions/saveFile\";\r\nimport { openFileAction } from \"./actions/openFile\";\r\nimport { updateFileAction } from \"./actions/updateFile\";\r\n\r\nexport const obsidianPlugin = {\r\n    name: \"obsidian\",\r\n    description: \"Integration with Obsidian vault using Omnisearch / Deep traversal search and memoryknowledge base\",\r\n    actions: [\r\n        searchAction,\r\n        listNotesAction,\r\n        listAllFilesAction,\r\n        listDirectoryAction,\r\n        summarizeActiveNoteAction,\r\n        getActiveNoteAction,\r\n        getNoteAction,\r\n        readFileAction,\r\n        createKnowledgeAction,\r\n        noteTraversalAction,\r\n        saveFileAction,\r\n        openFileAction,\r\n        updateFileAction\r\n    ],\r\n    evaluators: [],\r\n    services: [],\r\n    providers: [],\r\n};\r\n\r\nexport default obsidianPlugin;\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","stringToUuid","z","z","elizaLogger","stringToUuid","elizaLogger","elizaLogger","elizaLogger","elizaLogger","elizaLogger","elizaLogger","files","elizaLogger","elizaLogger","elizaLogger","elizaLogger","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","hierarchy","elizaLogger","composeContext","ModelClass","elizaLogger","composeContext","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass","elizaLogger","composeContext","generateObject","ModelClass"]}