{"version":3,"sources":["../src/actions/upload.ts","../src/utils/security.ts","../src/utils/monitoring.ts","../src/templates/upload.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    ModelClass,\r\n    Content,\r\n    ActionExample,\r\n    generateObject,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { Indexer, ZgFile, getFlowContract } from \"@0glabs/0g-ts-sdk\";\r\nimport { ethers } from \"ethers\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { promises as fs } from \"fs\";\r\nimport { FileSecurityValidator } from \"../utils/security\";\r\nimport { logSecurityEvent, monitorUpload, monitorFileValidation, monitorCleanup } from '../utils/monitoring';\r\nimport path from 'path';\r\nimport { uploadTemplate } from \"../templates/upload\";\r\n\r\nexport interface UploadContent extends Content {\r\n    filePath: string;\r\n}\r\n\r\nfunction isUploadContent(\r\n    _runtime: IAgentRuntime,\r\n    content: any\r\n): content is UploadContent {\r\n    elizaLogger.debug(\"Validating upload content\", { content });\r\n    return typeof content.filePath === \"string\";\r\n}\r\n\r\nexport const zgUpload: Action = {\r\n    name: \"ZG_UPLOAD\",\r\n    similes: [\r\n        \"UPLOAD_FILE_TO_ZG\",\r\n        \"STORE_FILE_ON_ZG\",\r\n        \"SAVE_FILE_TO_ZG\",\r\n        \"UPLOAD_TO_ZERO_GRAVITY\",\r\n        \"STORE_ON_ZERO_GRAVITY\",\r\n        \"SHARE_FILE_ON_ZG\",\r\n        \"PUBLISH_FILE_TO_ZG\",\r\n    ],\r\n    description: \"Store data using 0G protocol\",\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.debug(\"Starting ZG_UPLOAD validation\", { messageId: message.id });\r\n\r\n        try {\r\n            const settings = {\r\n                indexerRpc: runtime.getSetting(\"ZEROG_INDEXER_RPC\"),\r\n                evmRpc: runtime.getSetting(\"ZEROG_EVM_RPC\"),\r\n                privateKey: runtime.getSetting(\"ZEROG_PRIVATE_KEY\"),\r\n                flowAddr: runtime.getSetting(\"ZEROG_FLOW_ADDRESS\")\r\n            };\r\n\r\n            elizaLogger.debug(\"Checking ZeroG settings\", {\r\n                hasIndexerRpc: Boolean(settings.indexerRpc),\r\n                hasEvmRpc: Boolean(settings.evmRpc),\r\n                hasPrivateKey: Boolean(settings.privateKey),\r\n                hasFlowAddr: Boolean(settings.flowAddr)\r\n            });\r\n\r\n            const hasRequiredSettings = Object.entries(settings).every(([key, value]) => Boolean(value));\r\n            \r\n            if (!hasRequiredSettings) {\r\n                const missingSettings = Object.entries(settings)\r\n                    .filter(([_, value]) => !value)\r\n                    .map(([key]) => key);\r\n                \r\n                elizaLogger.error(\"Missing required ZeroG settings\", {\r\n                    missingSettings,\r\n                    messageId: message.id\r\n                });\r\n                return false;\r\n            }\r\n\r\n            const config = {\r\n                maxFileSize: parseInt(runtime.getSetting(\"ZEROG_MAX_FILE_SIZE\") || \"10485760\"),\r\n                allowedExtensions: runtime.getSetting(\"ZEROG_ALLOWED_EXTENSIONS\")?.split(\",\") || [\".pdf\", \".png\", \".jpg\", \".jpeg\", \".doc\", \".docx\"],\r\n                uploadDirectory: runtime.getSetting(\"ZEROG_UPLOAD_DIR\") || \"/tmp/zerog-uploads\",\r\n                enableVirusScan: runtime.getSetting(\"ZEROG_ENABLE_VIRUS_SCAN\") === \"true\"\r\n            };\r\n\r\n            // Validate config values\r\n            if (isNaN(config.maxFileSize) || config.maxFileSize <= 0) {\r\n                elizaLogger.error(\"Invalid ZEROG_MAX_FILE_SIZE setting\", {\r\n                    value: runtime.getSetting(\"ZEROG_MAX_FILE_SIZE\"),\r\n                    messageId: message.id\r\n                });\r\n                return false;\r\n            }\r\n\r\n            if (!config.allowedExtensions || config.allowedExtensions.length === 0) {\r\n                elizaLogger.error(\"Invalid ZEROG_ALLOWED_EXTENSIONS setting\", {\r\n                    value: runtime.getSetting(\"ZEROG_ALLOWED_EXTENSIONS\"),\r\n                    messageId: message.id\r\n                });\r\n                return false;\r\n            }\r\n\r\n            elizaLogger.info(\"ZG_UPLOAD action settings validated\", {\r\n                config,\r\n                messageId: message.id\r\n            });\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error validating ZG_UPLOAD settings\", {\r\n                error: error instanceof Error ? error.message : String(error),\r\n                stack: error instanceof Error ? error.stack : undefined,\r\n                messageId: message.id\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.info(\"ZG_UPLOAD action started\", {\r\n            messageId: message.id,\r\n            hasState: Boolean(state),\r\n            hasCallback: Boolean(callback)\r\n        });\r\n\r\n        let file: ZgFile | undefined;\r\n        let cleanupRequired = false;\r\n\r\n        try {\r\n            // Update state if needed\r\n            if (!state) {\r\n                elizaLogger.debug(\"No state provided, composing new state\");\r\n                state = (await runtime.composeState(message)) as State;\r\n            } else {\r\n                elizaLogger.debug(\"Updating existing state\");\r\n                state = await runtime.updateRecentMessageState(state);\r\n            }\r\n\r\n            // Compose upload context\r\n            elizaLogger.debug(\"Composing upload context\");\r\n            const uploadContext = composeContext({\r\n                state,\r\n                template: uploadTemplate,\r\n            });\r\n\r\n            // Generate upload content\r\n            elizaLogger.debug(\"Generating upload content\");\r\n            const content = await generateObject({\r\n                runtime,\r\n                context: uploadContext,\r\n                modelClass: ModelClass.LARGE,\r\n            });\r\n\r\n            // Validate upload content\r\n            if (!isUploadContent(runtime, content)) {\r\n                const error = \"Invalid content for UPLOAD action\";\r\n                elizaLogger.error(error, {\r\n                    content,\r\n                    messageId: message.id\r\n                });\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"Unable to process 0G upload request. Invalid content provided.\",\r\n                        content: { error }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            const filePath = content.filePath;\r\n            elizaLogger.debug(\"Extracted file path\", { filePath, content });\r\n\r\n            if (!filePath) {\r\n                const error = \"File path is required\";\r\n                elizaLogger.error(error, { messageId: message.id });\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"File path is required for upload.\",\r\n                        content: { error }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // Initialize security validator\r\n            const securityConfig = {\r\n                maxFileSize: parseInt(runtime.getSetting(\"ZEROG_MAX_FILE_SIZE\") || \"10485760\"),\r\n                allowedExtensions: runtime.getSetting(\"ZEROG_ALLOWED_EXTENSIONS\")?.split(\",\") || [\".pdf\", \".png\", \".jpg\", \".jpeg\", \".doc\", \".docx\"],\r\n                uploadDirectory: runtime.getSetting(\"ZEROG_UPLOAD_DIR\") || \"/tmp/zerog-uploads\",\r\n                enableVirusScan: runtime.getSetting(\"ZEROG_ENABLE_VIRUS_SCAN\") === \"true\"\r\n            };\r\n\r\n            let validator: FileSecurityValidator;\r\n            try {\r\n                elizaLogger.debug(\"Initializing security validator\", {\r\n                    config: securityConfig,\r\n                    messageId: message.id\r\n                });\r\n                validator = new FileSecurityValidator(securityConfig);\r\n            } catch (error) {\r\n                const errorMessage = `Security validator initialization failed: ${error instanceof Error ? error.message : String(error)}`;\r\n                elizaLogger.error(errorMessage, {\r\n                    config: securityConfig,\r\n                    messageId: message.id\r\n                });\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"Upload failed: Security configuration error.\",\r\n                        content: { error: errorMessage }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // Validate file type\r\n            elizaLogger.debug(\"Starting file type validation\", { filePath });\r\n            const typeValidation = await validator.validateFileType(filePath);\r\n            monitorFileValidation(filePath, \"file_type\", typeValidation.isValid, {\r\n                error: typeValidation.error\r\n            });\r\n            if (!typeValidation.isValid) {\r\n                const error = \"File type validation failed\";\r\n                elizaLogger.error(error, {\r\n                    error: typeValidation.error,\r\n                    filePath,\r\n                    messageId: message.id\r\n                });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Upload failed: ${typeValidation.error}`,\r\n                        content: { error: typeValidation.error }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // Validate file size\r\n            elizaLogger.debug(\"Starting file size validation\", { filePath });\r\n            const sizeValidation = await validator.validateFileSize(filePath);\r\n            monitorFileValidation(filePath, \"file_size\", sizeValidation.isValid, {\r\n                error: sizeValidation.error\r\n            });\r\n            if (!sizeValidation.isValid) {\r\n                const error = \"File size validation failed\";\r\n                elizaLogger.error(error, {\r\n                    error: sizeValidation.error,\r\n                    filePath,\r\n                    messageId: message.id\r\n                });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Upload failed: ${sizeValidation.error}`,\r\n                        content: { error: sizeValidation.error }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // Validate file path\r\n            elizaLogger.debug(\"Starting file path validation\", { filePath });\r\n            const pathValidation = await validator.validateFilePath(filePath);\r\n            monitorFileValidation(filePath, \"file_path\", pathValidation.isValid, {\r\n                error: pathValidation.error\r\n            });\r\n            if (!pathValidation.isValid) {\r\n                const error = \"File path validation failed\";\r\n                elizaLogger.error(error, {\r\n                    error: pathValidation.error,\r\n                    filePath,\r\n                    messageId: message.id\r\n                });\r\n                if (callback) {\r\n                    callback({\r\n                        text: `Upload failed: ${pathValidation.error}`,\r\n                        content: { error: pathValidation.error }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // Sanitize the file path\r\n            let sanitizedPath: string;\r\n            try {\r\n                sanitizedPath = validator.sanitizePath(filePath);\r\n                elizaLogger.debug(\"File path sanitized\", {\r\n                    originalPath: filePath,\r\n                    sanitizedPath,\r\n                    messageId: message.id\r\n                });\r\n            } catch (error) {\r\n                const errorMessage = `Failed to sanitize file path: ${error instanceof Error ? error.message : String(error)}`;\r\n                elizaLogger.error(errorMessage, {\r\n                    filePath,\r\n                    messageId: message.id\r\n                });\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"Upload failed: Invalid file path.\",\r\n                        content: { error: errorMessage }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // Start upload monitoring\r\n            const startTime = Date.now();\r\n            let fileStats;\r\n            try {\r\n                fileStats = await fs.stat(sanitizedPath);\r\n                elizaLogger.debug(\"File stats retrieved\", {\r\n                    size: fileStats.size,\r\n                    path: sanitizedPath,\r\n                    created: fileStats.birthtime,\r\n                    modified: fileStats.mtime,\r\n                    messageId: message.id\r\n                });\r\n            } catch (error) {\r\n                const errorMessage = `Failed to get file stats: ${error instanceof Error ? error.message : String(error)}`;\r\n                elizaLogger.error(errorMessage, {\r\n                    path: sanitizedPath,\r\n                    messageId: message.id\r\n                });\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"Upload failed: Could not access file\",\r\n                        content: { error: errorMessage }\r\n                    });\r\n                }\r\n                return false;\r\n            }\r\n\r\n            try {\r\n                // Initialize ZeroG file\r\n                elizaLogger.debug(\"Initializing ZeroG file\", {\r\n                    sanitizedPath,\r\n                    messageId: message.id\r\n                });\r\n                file = await ZgFile.fromFilePath(sanitizedPath);\r\n                cleanupRequired = true;\r\n\r\n                // Generate Merkle tree\r\n                elizaLogger.debug(\"Generating Merkle tree\");\r\n                const [merkleTree, merkleError] = await file.merkleTree();\r\n                if (merkleError !== null) {\r\n                    const error = `Error getting file root hash: ${merkleError instanceof Error ? merkleError.message : String(merkleError)}`;\r\n                    elizaLogger.error(error, { messageId: message.id });\r\n                    if (callback) {\r\n                        callback({\r\n                            text: \"Upload failed: Error generating file hash.\",\r\n                            content: { error }\r\n                        });\r\n                    }\r\n                    return false;\r\n                }\r\n                elizaLogger.info(\"File root hash generated\", {\r\n                    rootHash: merkleTree.rootHash(),\r\n                    messageId: message.id\r\n                });\r\n\r\n                // Initialize blockchain connection\r\n                elizaLogger.debug(\"Initializing blockchain connection\");\r\n                const provider = new ethers.JsonRpcProvider(runtime.getSetting(\"ZEROG_EVM_RPC\"));\r\n                const signer = new ethers.Wallet(runtime.getSetting(\"ZEROG_PRIVATE_KEY\"), provider);\r\n                const indexer = new Indexer(runtime.getSetting(\"ZEROG_INDEXER_RPC\"));\r\n                const flowContract = getFlowContract(runtime.getSetting(\"ZEROG_FLOW_ADDRESS\"), signer);\r\n\r\n                // Upload file to ZeroG\r\n                elizaLogger.info(\"Starting file upload to ZeroG\", {\r\n                    filePath: sanitizedPath,\r\n                    messageId: message.id\r\n                });\r\n                const [txHash, uploadError] = await indexer.upload(\r\n                    file,\r\n                    0,\r\n                    runtime.getSetting(\"ZEROG_EVM_RPC\"),\r\n                    flowContract\r\n                );\r\n\r\n                if (uploadError !== null) {\r\n                    const error = `Error uploading file: ${uploadError instanceof Error ? uploadError.message : String(uploadError)}`;\r\n                    elizaLogger.error(error, { messageId: message.id });\r\n                    monitorUpload({\r\n                        filePath: sanitizedPath,\r\n                        size: fileStats.size,\r\n                        duration: Date.now() - startTime,\r\n                        success: false,\r\n                        error: error\r\n                    });\r\n                    if (callback) {\r\n                        callback({\r\n                            text: \"Upload failed: Error during file upload.\",\r\n                            content: { error }\r\n                        });\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                // Log successful upload\r\n                monitorUpload({\r\n                    filePath: sanitizedPath,\r\n                    size: fileStats.size,\r\n                    duration: Date.now() - startTime,\r\n                    success: true\r\n                });\r\n\r\n                elizaLogger.info(\"File uploaded successfully\", {\r\n                    transactionHash: txHash,\r\n                    filePath: sanitizedPath,\r\n                    fileSize: fileStats.size,\r\n                    duration: Date.now() - startTime,\r\n                    messageId: message.id\r\n                });\r\n\r\n                if (callback) {\r\n                    callback({\r\n                        text: \"File uploaded successfully to ZeroG.\",\r\n                        content: {\r\n                            success: true,\r\n                            transactionHash: txHash\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return true;\r\n            } finally {\r\n                // Cleanup temporary file\r\n                if (cleanupRequired && file) {\r\n                    try {\r\n                        elizaLogger.debug(\"Starting file cleanup\", {\r\n                            filePath: sanitizedPath,\r\n                            messageId: message.id\r\n                        });\r\n                        await file.close();\r\n                        await fs.unlink(sanitizedPath);\r\n                        monitorCleanup(sanitizedPath, true);\r\n                        elizaLogger.debug(\"File cleanup completed successfully\", {\r\n                            filePath: sanitizedPath,\r\n                            messageId: message.id\r\n                        });\r\n                    } catch (cleanupError) {\r\n                        monitorCleanup(sanitizedPath, false, cleanupError.message);\r\n                        elizaLogger.warn(\"Failed to cleanup file\", {\r\n                            error: cleanupError instanceof Error ? cleanupError.message : String(cleanupError),\r\n                            filePath: sanitizedPath,\r\n                            messageId: message.id\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : String(error);\r\n            logSecurityEvent(\"Unexpected error in upload action\", \"high\", {\r\n                error: errorMessage,\r\n                stack: error instanceof Error ? error.stack : undefined,\r\n                messageId: message.id\r\n            });\r\n\r\n            elizaLogger.error(\"Unexpected error during file upload\", {\r\n                error: errorMessage,\r\n                stack: error instanceof Error ? error.stack : undefined,\r\n                messageId: message.id\r\n            });\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Upload failed due to an unexpected error.\",\r\n                    content: { error: errorMessage }\r\n                });\r\n            }\r\n\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"upload my resume.pdf file\",\r\n                    action: \"ZG_UPLOAD\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"can you help me upload this document.docx?\",\r\n                    action: \"ZG_UPLOAD\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"I need to upload an image file image.png\",\r\n                    action: \"ZG_UPLOAD\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\nexport interface SecurityConfig {\r\n    maxFileSize: number;\r\n    allowedExtensions: string[];\r\n    uploadDirectory: string;\r\n    enableVirusScan: boolean;\r\n}\r\n\r\nexport interface ValidationResult {\r\n    isValid: boolean;\r\n    error?: string;\r\n}\r\n\r\nexport class FileSecurityValidator {\r\n    private config: SecurityConfig;\r\n\r\n    constructor(config: SecurityConfig) {\r\n        if (!config.allowedExtensions || config.allowedExtensions.length === 0) {\r\n            throw new Error('Security configuration error: allowedExtensions must be specified');\r\n        }\r\n        if (!config.uploadDirectory) {\r\n            throw new Error('Security configuration error: uploadDirectory must be specified');\r\n        }\r\n        if (config.maxFileSize <= 0) {\r\n            throw new Error('Security configuration error: maxFileSize must be positive');\r\n        }\r\n        this.config = config;\r\n    }\r\n\r\n    async validateFileType(filePath: string): Promise<ValidationResult> {\r\n        try {\r\n            if (!filePath) {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'Invalid file path: Path cannot be empty'\r\n                };\r\n            }\r\n\r\n            const ext = path.extname(filePath).toLowerCase();\r\n            if (!ext) {\r\n                return {\r\n                    isValid: false,\r\n                    error: `File type not allowed. Allowed types: ${this.config.allowedExtensions.join(', ')}`\r\n                };\r\n            }\r\n\r\n            if (!this.config.allowedExtensions.includes(ext)) {\r\n                return {\r\n                    isValid: false,\r\n                    error: `File type not allowed. Allowed types: ${this.config.allowedExtensions.join(', ')}`\r\n                };\r\n            }\r\n            return { isValid: true };\r\n        } catch (error) {\r\n            return {\r\n                isValid: false,\r\n                error: `Error validating file type: ${error instanceof Error ? error.message : String(error)}`\r\n            };\r\n        }\r\n    }\r\n\r\n    async validateFileSize(filePath: string): Promise<ValidationResult> {\r\n        try {\r\n            if (!filePath) {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'Invalid file path: Path cannot be empty'\r\n                };\r\n            }\r\n\r\n            const stats = await fs.stat(filePath);\r\n            if (stats.size === 0) {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'Invalid file: File is empty'\r\n                };\r\n            }\r\n\r\n            if (stats.size > this.config.maxFileSize) {\r\n                return {\r\n                    isValid: false,\r\n                    error: `File size exceeds limit of ${this.config.maxFileSize} bytes (file size: ${stats.size} bytes)`\r\n                };\r\n            }\r\n            return { isValid: true };\r\n        } catch (error) {\r\n            if (error.code === 'ENOENT') {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'File not found or inaccessible'\r\n                };\r\n            }\r\n            if (error.code === 'EACCES') {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'Permission denied: Cannot access file'\r\n                };\r\n            }\r\n            return {\r\n                isValid: false,\r\n                error: `Error checking file size: ${error instanceof Error ? error.message : String(error)}`\r\n            };\r\n        }\r\n    }\r\n\r\n    async validateFilePath(filePath: string): Promise<ValidationResult> {\r\n        try {\r\n            if (!filePath) {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'Invalid file path: Path cannot be empty'\r\n                };\r\n            }\r\n\r\n            const normalizedPath = path.normalize(filePath);\r\n            \r\n            // Check for directory traversal attempts\r\n            if (normalizedPath.includes('..')) {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'Invalid file path: Directory traversal detected'\r\n                };\r\n            }\r\n\r\n            // For test files, we'll allow them to be created in the test directory\r\n            if (normalizedPath.includes('__test_files__')) {\r\n                return { isValid: true };\r\n            }\r\n\r\n            // For production files, ensure they're in the upload directory\r\n            const uploadDir = path.normalize(this.config.uploadDirectory);\r\n            \r\n            // Check if upload directory exists and is accessible\r\n            try {\r\n                await fs.access(uploadDir, fs.constants.W_OK);\r\n            } catch (error) {\r\n                return {\r\n                    isValid: false,\r\n                    error: `Upload directory is not accessible: ${error.code === 'ENOENT' ? 'Directory does not exist' : \r\n                           error.code === 'EACCES' ? 'Permission denied' : error.message}`\r\n                };\r\n            }\r\n\r\n            if (!normalizedPath.startsWith(uploadDir)) {\r\n                return {\r\n                    isValid: false,\r\n                    error: 'Invalid file path: File must be within the upload directory'\r\n                };\r\n            }\r\n\r\n            return { isValid: true };\r\n        } catch (error) {\r\n            return {\r\n                isValid: false,\r\n                error: `Error validating file path: ${error instanceof Error ? error.message : String(error)}`\r\n            };\r\n        }\r\n    }\r\n\r\n    sanitizePath(filePath: string): string {\r\n        try {\r\n            if (!filePath) {\r\n                throw new Error('File path cannot be empty');\r\n            }\r\n\r\n            // Remove any directory traversal attempts\r\n            const normalizedPath = path.normalize(filePath).replace(/^(\\.\\.[\\/\\\\])+/, '');\r\n            \r\n            // If it's a test path, preserve it\r\n            if (normalizedPath.includes('__test_files__') || !normalizedPath.startsWith(this.config.uploadDirectory)) {\r\n                return normalizedPath;\r\n            }\r\n            \r\n            // For production paths, ensure they're in the upload directory\r\n            return path.join(this.config.uploadDirectory, path.basename(normalizedPath));\r\n        } catch (error) {\r\n            throw new Error(`Error sanitizing file path: ${error instanceof Error ? error.message : String(error)}`);\r\n        }\r\n    }\r\n} ","import { elizaLogger } from '@elizaos/core';\r\n\r\nexport interface SecurityEvent {\r\n    timestamp: number;\r\n    event: string;\r\n    severity: 'low' | 'medium' | 'high';\r\n    details: Record<string, unknown>;\r\n}\r\n\r\nexport interface UploadMetrics {\r\n    filePath: string;\r\n    size: number;\r\n    timestamp: string;\r\n    duration?: number;\r\n    success: boolean;\r\n    error?: string;\r\n}\r\n\r\n/**\r\n * Logs a security event with the specified severity and details\r\n */\r\nexport const logSecurityEvent = (\r\n    event: string,\r\n    severity: SecurityEvent['severity'],\r\n    details: Record<string, unknown>\r\n): void => {\r\n    const securityEvent: SecurityEvent = {\r\n        timestamp: Date.now(),\r\n        event,\r\n        severity,\r\n        details\r\n    };\r\n\r\n    elizaLogger.info('Security event', securityEvent);\r\n\r\n    // For high severity events, also log as error\r\n    if (severity === 'high') {\r\n        elizaLogger.error('High severity security event', securityEvent);\r\n    }\r\n};\r\n\r\n/**\r\n * Tracks upload metrics and logs them\r\n */\r\nexport const monitorUpload = (metrics: Omit<UploadMetrics, 'timestamp'>): void => {\r\n    const uploadMetrics: UploadMetrics = {\r\n        ...metrics,\r\n        timestamp: new Date().toISOString()\r\n    };\r\n\r\n    elizaLogger.info('Upload metrics', uploadMetrics);\r\n\r\n    // Log errors if present\r\n    if (!metrics.success && metrics.error) {\r\n        elizaLogger.error('Upload failed', {\r\n            filePath: metrics.filePath,\r\n            error: metrics.error\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Monitors file validation events\r\n */\r\nexport const monitorFileValidation = (\r\n    filePath: string,\r\n    validationType: string,\r\n    isValid: boolean,\r\n    details?: Record<string, unknown>\r\n): void => {\r\n    const event = isValid ? 'File validation passed' : 'File validation failed';\r\n    const severity = isValid ? 'low' : 'medium';\r\n\r\n    logSecurityEvent(event, severity, {\r\n        filePath,\r\n        validationType,\r\n        ...details\r\n    });\r\n};\r\n\r\n/**\r\n * Tracks cleanup operations\r\n */\r\nexport const monitorCleanup = (\r\n    filePath: string,\r\n    success: boolean,\r\n    error?: string\r\n): void => {\r\n    const event = success ? 'File cleanup succeeded' : 'File cleanup failed';\r\n    const severity = success ? 'low' : 'medium';\r\n\r\n    logSecurityEvent(event, severity, {\r\n        filePath,\r\n        error\r\n    });\r\n}; ","export const uploadTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"filePath\": null,\r\n    \"description\": \"I want to upload a file\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nExtract the user's intention to upload a file from the conversation. Users might express this in various ways, such as:\r\n- \"I want to upload a file\"\r\n- \"upload an image\"\r\n- \"send a photo\"\r\n- \"upload\"\r\n- \"let me share a file\"\r\n\r\nIf the user provides any specific description of the file, include that as well.\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { zgUpload } from \"./actions/upload\";\r\n\r\nexport const zgPlugin: Plugin = {\r\n    description: \"ZeroG Plugin for Eliza\",\r\n    name: \"ZeroG\",\r\n    actions: [zgUpload],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n"],"mappings":"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","names":["elizaLogger","fs","elizaLogger","fs"]}