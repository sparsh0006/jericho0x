{"version":3,"sources":["../src/actions/swap.ts","../src/utils/index.ts","../src/environment.ts","../src/actions/transfer.ts","../src/utils/ERC20Token.ts","../src/utils/erc20.json","../src/utils/starknetId.ts","../src/actions/unruggable.ts","../src/actions/subdomain.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Action,\r\n    ActionExample,\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport {\r\n    executeSwap as executeAvnuSwap,\r\n    fetchQuotes,\r\n    QuoteRequest,\r\n} from \"@avnu/avnu-sdk\";\r\n\r\nimport { getStarknetAccount } from \"../utils/index.ts\";\r\nimport { validateStarknetConfig } from \"../environment.ts\";\r\n\r\ninterface SwapContent {\r\n    sellTokenAddress: string;\r\n    buyTokenAddress: string;\r\n    sellAmount: string;\r\n}\r\n\r\nexport function isSwapContent(content: SwapContent): content is SwapContent {\r\n    // Validate types\r\n    const validTypes =\r\n        typeof content.sellTokenAddress === \"string\" &&\r\n        typeof content.buyTokenAddress === \"string\" &&\r\n        typeof content.sellAmount === \"string\";\r\n    if (!validTypes) {\r\n        return false;\r\n    }\r\n\r\n    // Validate addresses (must be 32-bytes long with 0x prefix)\r\n    const validAddresses =\r\n        content.sellTokenAddress.startsWith(\"0x\") &&\r\n        content.sellTokenAddress.length === 66 &&\r\n        content.buyTokenAddress.startsWith(\"0x\") &&\r\n        content.buyTokenAddress.length === 66;\r\n\r\n    return validAddresses;\r\n}\r\n\r\nconst swapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nThese are known addresses you will get asked to swap, use these addresses for sellTokenAddress and buyTokenAddress:\r\n- BROTHER/brother/$brother: 0x03b405a98c9e795d427fe82cdeeeed803f221b52471e3a757574a2b4180793ee\r\n- BTC/btc: 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\r\n- ETH/eth: 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\r\n- STRK/strk: 0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d\r\n- LORDS/lords: 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"sellTokenAddress\": \"0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\r\n    \"buyTokenAddress\": \"0x124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\",\r\n    \"sellAmount\": \"1000000000000000000\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nExtract the following information about the requested token swap:\r\n- Sell token address\r\n- Buy token address\r\n- Amount to sell (in wei)\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.`;\r\n\r\nexport const executeSwap: Action = {\r\n    name: \"EXECUTE_STARKNET_SWAP\",\r\n    similes: [\r\n        \"STARKNET_SWAP_TOKENS\",\r\n        \"STARKNET_TOKEN_SWAP\",\r\n        \"STARKNET_TRADE_TOKENS\",\r\n        \"STARKNET_EXCHANGE_TOKENS\",\r\n    ],\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        await validateStarknetConfig(runtime);\r\n        return true;\r\n    },\r\n    description:\r\n        \"Perform a token swap on starknet. Use this action when a user asks you to swap tokens anything.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting EXECUTE_STARKNET_SWAP handler...\");\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const swapContext = composeContext({\r\n            state,\r\n            template: swapTemplate,\r\n        });\r\n\r\n        const response = await generateObjectDeprecated({\r\n            runtime,\r\n            context: swapContext,\r\n            modelClass: ModelClass.MEDIUM,\r\n        });\r\n\r\n        elizaLogger.debug(\"Response:\", response);\r\n\r\n        if (!isSwapContent(response)) {\r\n            callback?.({ text: \"Invalid swap content, please try again.\" });\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            // Get quote\r\n            const quoteParams: QuoteRequest = {\r\n                sellTokenAddress: response.sellTokenAddress,\r\n                buyTokenAddress: response.buyTokenAddress,\r\n                sellAmount: BigInt(response.sellAmount),\r\n            };\r\n\r\n            const quote = await fetchQuotes(quoteParams);\r\n\r\n            // Execute swap\r\n            const swapResult = await executeAvnuSwap(\r\n                getStarknetAccount(runtime),\r\n                quote[0],\r\n                {\r\n                    slippage: 0.05, // 5% slippage\r\n                    executeApprove: true,\r\n                }\r\n            );\r\n\r\n            elizaLogger.log(\r\n                \"Swap completed successfully! tx: \" + swapResult.transactionHash\r\n            );\r\n            callback?.({\r\n                text:\r\n                    \"Swap completed successfully! tx: \" +\r\n                    swapResult.transactionHash,\r\n            });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token swap:\", error);\r\n            callback?.({ text: `Error during swap:` });\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Swap 10 ETH for LORDS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Ok, I'll swap 10 ETH for LORDS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Swap 100 $lords on starknet\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Ok, I'll swap 100 $lords on starknet\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Swap 0.5 BTC for LORDS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Ok, I'll swap 0.5 BTC for LORDS\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { elizaLogger, IAgentRuntime } from \"@elizaos/core\";\r\nimport { Fraction, Percent } from \"@uniswap/sdk-core\";\r\nimport { Account, Contract, RpcProvider } from \"starknet\";\r\n\r\nexport const getTokenBalance = async (\r\n    runtime: IAgentRuntime,\r\n    tokenAddress: string\r\n) => {\r\n    const provider = getStarknetProvider(runtime);\r\n\r\n    const { abi: tokenAbi } = await provider.getClassAt(tokenAddress);\r\n    if (tokenAbi === undefined) {\r\n        throw new Error(\"no abi.\");\r\n    }\r\n\r\n    const tokenContract = new Contract(tokenAbi, tokenAddress, provider);\r\n\r\n    tokenContract.connect(getStarknetAccount(runtime));\r\n\r\n    return await tokenContract.balanceOf(tokenAddress);\r\n};\r\n\r\nexport const getStarknetProvider = (runtime: IAgentRuntime) => {\r\n    return new RpcProvider({\r\n        nodeUrl: runtime.getSetting(\"STARKNET_RPC_URL\"),\r\n    });\r\n};\r\n\r\nexport const getStarknetAccount = (runtime: IAgentRuntime) => {\r\n    return new Account(\r\n        getStarknetProvider(runtime),\r\n        runtime.getSetting(\"STARKNET_ADDRESS\"),\r\n        runtime.getSetting(\"STARKNET_PRIVATE_KEY\")\r\n    );\r\n};\r\n\r\nexport const getPercent = (amount: string | number, decimals: number) => {\r\n    return new Percent(amount, decimals);\r\n};\r\n\r\nexport const parseFormatedAmount = (amount: string) => amount.replace(/,/g, \"\");\r\n\r\nexport const PERCENTAGE_INPUT_PRECISION = 2;\r\n\r\nexport const parseFormatedPercentage = (percent: string) =>\r\n    new Percent(\r\n        +percent * 10 ** PERCENTAGE_INPUT_PRECISION,\r\n        100 * 10 ** PERCENTAGE_INPUT_PRECISION\r\n    );\r\n\r\ninterface ParseCurrencyAmountOptions {\r\n    fixed: number;\r\n    significant?: number;\r\n}\r\n\r\nexport const formatCurrenyAmount = (\r\n    amount: Fraction,\r\n    { fixed, significant = 1 }: ParseCurrencyAmountOptions\r\n) => {\r\n    const fixedAmount = amount.toFixed(fixed);\r\n    const significantAmount = amount.toSignificant(significant);\r\n\r\n    if (+significantAmount > +fixedAmount) return significantAmount;\r\n    else return +fixedAmount.toString();\r\n};\r\n\r\nexport const formatPercentage = (percentage: Percent) => {\r\n    const formatedPercentage = +percentage.toFixed(2);\r\n    const exact = percentage.equalTo(\r\n        new Percent(Math.round(formatedPercentage * 100), 10000)\r\n    );\r\n\r\n    return `${exact ? \"\" : \"~\"}${formatedPercentage}%`;\r\n};\r\n\r\nexport type RetryConfig = {\r\n    maxRetries?: number;\r\n    delay?: number;\r\n    maxDelay?: number;\r\n    backoff?: (retryCount: number, delay: number, maxDelay: number) => number;\r\n};\r\n\r\nexport async function fetchWithRetry<T>(\r\n    url: string,\r\n    options?: RequestInit,\r\n    config: RetryConfig = {}\r\n): Promise<T> {\r\n    const {\r\n        maxRetries = 3,\r\n        delay = 1000,\r\n        maxDelay = 10000,\r\n        backoff = (retryCount, baseDelay, maxDelay) =>\r\n            Math.min(baseDelay * Math.pow(2, retryCount), maxDelay),\r\n    } = config;\r\n\r\n    let lastError: Error | null = null;\r\n\r\n    for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\r\n        try {\r\n            const response = await fetch(url, options);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\r\n                    `Coingecko API HTTP status: ${response.status}`\r\n                );\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            elizaLogger.debug(`Error fetching ${url}:`, error);\r\n            lastError = error as Error;\r\n\r\n            if (retryCount === maxRetries) break;\r\n\r\n            await new Promise((resolve) =>\r\n                setTimeout(resolve, backoff(retryCount, delay, maxDelay))\r\n            );\r\n            elizaLogger.debug(`Retry #${retryCount + 1} to fetch ${url}...`);\r\n        }\r\n    }\r\n\r\n    throw lastError;\r\n}\r\n","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nconst STARKNET_PUBLIC_RPC = \"https://starknet-mainnet.public.blastapi.io\";\r\n\r\nexport const starknetEnvSchema = z.object({\r\n    STARKNET_ADDRESS: z.string().min(1, \"Starknet address is required\"),\r\n    STARKNET_PRIVATE_KEY: z.string().min(1, \"Starknet private key is required\"),\r\n    STARKNET_RPC_URL: z.string().min(1, \"Starknet RPC URL is required\"),\r\n});\r\n\r\nexport type StarknetConfig = z.infer<typeof starknetEnvSchema>;\r\n\r\nexport async function validateStarknetConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<StarknetConfig> {\r\n    try {\r\n        const config = {\r\n            STARKNET_ADDRESS:\r\n                runtime.getSetting(\"STARKNET_ADDRESS\") ||\r\n                process.env.STARKNET_ADDRESS,\r\n            STARKNET_PRIVATE_KEY:\r\n                runtime.getSetting(\"STARKNET_PRIVATE_KEY\") ||\r\n                process.env.STARKNET_PRIVATE_KEY,\r\n            STARKNET_RPC_URL:\r\n                runtime.getSetting(\"STARKNET_RPC_URL\") ||\r\n                process.env.STARKNET_RPC_URL ||\r\n                STARKNET_PUBLIC_RPC,\r\n        };\r\n\r\n        return starknetEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `Starknet configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n","// TODO: Implement this for Starknet.\r\n// It should just transfer tokens from the agent's wallet to the recipient.\r\n\r\nimport {\r\n    type Action,\r\n    ActionExample,\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { getStarknetAccount } from \"../utils\";\r\nimport { ERC20Token } from \"../utils/ERC20Token\";\r\nimport { validateStarknetConfig } from \"../environment\";\r\nimport { getAddressFromName, isStarkDomain } from \"../utils/starknetId\";\r\n\r\nexport interface TransferContent extends Content {\r\n    tokenAddress: string;\r\n    recipient?: string;\r\n    starkName?: string;\r\n    amount: string | number;\r\n}\r\n\r\nexport function isTransferContent(\r\n    content: TransferContent\r\n): content is TransferContent {\r\n    // Validate types\r\n    const validTypes =\r\n        typeof content.tokenAddress === \"string\" &&\r\n        (typeof content.recipient === \"string\" ||\r\n            typeof content.starkName === \"string\") &&\r\n        (typeof content.amount === \"string\" ||\r\n            typeof content.amount === \"number\");\r\n    if (!validTypes) {\r\n        return false;\r\n    }\r\n\r\n    // Validate tokenAddress (must be 32-bytes long with 0x prefix)\r\n    const validTokenAddress =\r\n        content.tokenAddress.startsWith(\"0x\") &&\r\n        content.tokenAddress.length === 66;\r\n    if (!validTokenAddress) {\r\n        return false;\r\n    }\r\n\r\n    // Additional checks based on whether recipient or starkName is defined\r\n    if (content.recipient) {\r\n        // Validate recipient address (must be 32-bytes long with 0x prefix)\r\n        const validRecipient =\r\n            content.recipient.startsWith(\"0x\") &&\r\n            content.recipient.length === 66;\r\n        if (!validRecipient) {\r\n            return false;\r\n        }\r\n    } else if (content.starkName) {\r\n        // .stark name validation\r\n        const validStarkName = isStarkDomain(content.starkName);\r\n        if (!validStarkName) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nFor the amount to send, use a value from 1 - 100. Determine this based on your judgement of the recipient.\r\n\r\nthese are known addresses, if you get asked about them, use these:\r\n- BTC/btc: 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\r\n- ETH/eth: 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\r\n- STRK/strk: 0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d\r\n- LORDS/lords: 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"tokenAddress\": \"0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\r\n    \"recipient\": \"0x1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\r\n    \"starkName\": \"domain.stark\",\r\n    \"amount\": \"0.001\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- Token contract address\r\n- Recipient wallet address\r\n- Recipient .stark name\r\n\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: \"SEND_TOKEN\",\r\n    similes: [\r\n        \"TRANSFER_TOKEN_ON_STARKNET\",\r\n        \"TRANSFER_TOKENS_ON_STARKNET\",\r\n        \"SEND_TOKENS_ON_STARKNET\",\r\n        \"SEND_ETH_ON_STARKNET\",\r\n        \"PAY_ON_STARKNET\",\r\n    ],\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        await validateStarknetConfig(runtime);\r\n        return true;\r\n    },\r\n    description:\r\n        \"MUST use this action if the user requests send a token or transfer a token, the request might be varied, but it will always be a token transfer. If the user requests a transfer of lords, use this action.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose transfer context\r\n        const transferContext = composeContext({\r\n            state,\r\n            template: transferTemplate,\r\n        });\r\n\r\n        // Generate transfer content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.MEDIUM,\r\n        });\r\n\r\n        elizaLogger.debug(\"Transfer content:\", content);\r\n\r\n        // Validate transfer content\r\n        if (!isTransferContent(content)) {\r\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Not enough information to transfer tokens. Please respond with token address, recipient address or stark name, and amount.\",\r\n                    content: { error: \"Invalid transfer content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const account = getStarknetAccount(runtime);\r\n            const erc20Token = new ERC20Token(content.tokenAddress, account);\r\n            const decimals = await erc20Token.decimals();\r\n            // Convert decimal amount to integer before converting to BigInt\r\n            const amountInteger = Math.floor(\r\n                Number(content.amount) * Math.pow(10, Number(decimals))\r\n            );\r\n            const amountWei = BigInt(amountInteger.toString());\r\n            const recipient =\r\n                content.recipient ??\r\n                (await getAddressFromName(account, content.starkName));\r\n            const transferCall = erc20Token.transferCall(recipient, amountWei);\r\n\r\n            elizaLogger.success(\r\n                \"Transferring\",\r\n                amountWei,\r\n                \"of\",\r\n                content.tokenAddress,\r\n                \"to\",\r\n                recipient\r\n            );\r\n\r\n            const tx = await account.execute(transferCall);\r\n\r\n            elizaLogger.success(\r\n                \"Transfer completed successfully! tx: \" + tx.transaction_hash\r\n            );\r\n            if (callback) {\r\n                callback({\r\n                    text:\r\n                        \"Transfer completed successfully! tx: \" +\r\n                        tx.transaction_hash,\r\n                    content: {},\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token transfer:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send 10 ETH to 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll transfer 10 ETH to that address right away. Let me process that for you.\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send 10 ETH to domain.stark\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll transfer 10 ETH to domain.stark et address 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49 right away. Let me process that for you.\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Can you transfer 50 LORDS tokens to 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Executing transfer of 50 LORDS tokens to the specified address. One moment please.\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Can you transfer 50 LORDS tokens to domain.stark?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Executing transfer of 50 LORDS tokens to domain.stark at address 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49. One moment please.\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Please send 0.5 BTC to 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Got it, initiating transfer of 0.5 BTC to the provided address. I'll confirm once it's complete.\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Please send 0.5 BTC to domain.stark\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Got it, initiating transfer of 0.5 BTC to domain.stark at address 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac. I'll confirm once it's complete.\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import {\r\n    AccountInterface,\r\n    cairo,\r\n    CallData,\r\n    Calldata,\r\n    Contract,\r\n    ProviderInterface,\r\n} from \"starknet\";\r\nimport erc20Abi from \"./erc20.json\";\r\n\r\nexport type ApproveCall = {\r\n    contractAddress: string;\r\n    entrypoint: \"approve\";\r\n    calldata: Calldata;\r\n};\r\n\r\nexport type TransferCall = {\r\n    contractAddress: string;\r\n    entrypoint: \"transfer\";\r\n    calldata: Calldata;\r\n};\r\n\r\nexport class ERC20Token {\r\n    abi: any;\r\n    contract: Contract;\r\n    calldata: CallData;\r\n    constructor(\r\n        token: string,\r\n        providerOrAccount?: ProviderInterface | AccountInterface\r\n    ) {\r\n        this.contract = new Contract(erc20Abi, token, providerOrAccount);\r\n        this.calldata = new CallData(this.contract.abi);\r\n    }\r\n\r\n    public address() {\r\n        return this.contract.address;\r\n    }\r\n\r\n    public async balanceOf(account: string): Promise<bigint> {\r\n        const result = await this.contract.call(\"balance_of\", [account]);\r\n        return result as bigint;\r\n    }\r\n\r\n    public async decimals() {\r\n        const result = await this.contract.call(\"decimals\");\r\n        return result as bigint;\r\n    }\r\n\r\n    public approveCall(spender: string, amount: bigint): ApproveCall {\r\n        return {\r\n            contractAddress: this.contract.address,\r\n            entrypoint: \"approve\",\r\n            calldata: this.calldata.compile(\"approve\", {\r\n                spender: spender,\r\n                amount: cairo.uint256(amount),\r\n            }),\r\n        };\r\n    }\r\n\r\n    public transferCall(recipient: string, amount: bigint): TransferCall {\r\n        return {\r\n            contractAddress: this.contract.address,\r\n            entrypoint: \"transfer\",\r\n            calldata: this.calldata.compile(\"transfer\", {\r\n                recipient: recipient,\r\n                amount: cairo.uint256(amount),\r\n            }),\r\n        };\r\n    }\r\n}\r\n","[\r\n    {\r\n        \"name\": \"MintableToken\",\r\n        \"type\": \"impl\",\r\n        \"interface_name\": \"src::mintable_token_interface::IMintableToken\"\r\n    },\r\n    {\r\n        \"name\": \"core::integer::u256\",\r\n        \"type\": \"struct\",\r\n        \"members\": [\r\n            {\r\n                \"name\": \"low\",\r\n                \"type\": \"core::integer::u128\"\r\n            },\r\n            {\r\n                \"name\": \"high\",\r\n                \"type\": \"core::integer::u128\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"src::mintable_token_interface::IMintableToken\",\r\n        \"type\": \"interface\",\r\n        \"items\": [\r\n            {\r\n                \"name\": \"permissioned_mint\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"permissioned_burn\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"MintableTokenCamelImpl\",\r\n        \"type\": \"impl\",\r\n        \"interface_name\": \"src::mintable_token_interface::IMintableTokenCamel\"\r\n    },\r\n    {\r\n        \"name\": \"src::mintable_token_interface::IMintableTokenCamel\",\r\n        \"type\": \"interface\",\r\n        \"items\": [\r\n            {\r\n                \"name\": \"permissionedMint\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"permissionedBurn\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"Replaceable\",\r\n        \"type\": \"impl\",\r\n        \"interface_name\": \"src::replaceability_interface::IReplaceable\"\r\n    },\r\n    {\r\n        \"name\": \"core::array::Span::<core::felt252>\",\r\n        \"type\": \"struct\",\r\n        \"members\": [\r\n            {\r\n                \"name\": \"snapshot\",\r\n                \"type\": \"@core::array::Array::<core::felt252>\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"src::replaceability_interface::EICData\",\r\n        \"type\": \"struct\",\r\n        \"members\": [\r\n            {\r\n                \"name\": \"eic_hash\",\r\n                \"type\": \"core::starknet::class_hash::ClassHash\"\r\n            },\r\n            {\r\n                \"name\": \"eic_init_data\",\r\n                \"type\": \"core::array::Span::<core::felt252>\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"core::option::Option::<src::replaceability_interface::EICData>\",\r\n        \"type\": \"enum\",\r\n        \"variants\": [\r\n            {\r\n                \"name\": \"Some\",\r\n                \"type\": \"src::replaceability_interface::EICData\"\r\n            },\r\n            {\r\n                \"name\": \"None\",\r\n                \"type\": \"()\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"core::bool\",\r\n        \"type\": \"enum\",\r\n        \"variants\": [\r\n            {\r\n                \"name\": \"False\",\r\n                \"type\": \"()\"\r\n            },\r\n            {\r\n                \"name\": \"True\",\r\n                \"type\": \"()\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"src::replaceability_interface::ImplementationData\",\r\n        \"type\": \"struct\",\r\n        \"members\": [\r\n            {\r\n                \"name\": \"impl_hash\",\r\n                \"type\": \"core::starknet::class_hash::ClassHash\"\r\n            },\r\n            {\r\n                \"name\": \"eic_data\",\r\n                \"type\": \"core::option::Option::<src::replaceability_interface::EICData>\"\r\n            },\r\n            {\r\n                \"name\": \"final\",\r\n                \"type\": \"core::bool\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"src::replaceability_interface::IReplaceable\",\r\n        \"type\": \"interface\",\r\n        \"items\": [\r\n            {\r\n                \"name\": \"get_upgrade_delay\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u64\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"get_impl_activation_time\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"implementation_data\",\r\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u64\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"add_new_implementation\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"implementation_data\",\r\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"remove_implementation\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"implementation_data\",\r\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"replace_to\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"implementation_data\",\r\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"AccessControlImplExternal\",\r\n        \"type\": \"impl\",\r\n        \"interface_name\": \"src::access_control_interface::IAccessControl\"\r\n    },\r\n    {\r\n        \"name\": \"src::access_control_interface::IAccessControl\",\r\n        \"type\": \"interface\",\r\n        \"items\": [\r\n            {\r\n                \"name\": \"has_role\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"role\",\r\n                        \"type\": \"core::felt252\"\r\n                    },\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::bool\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"get_role_admin\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"role\",\r\n                        \"type\": \"core::felt252\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::felt252\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"RolesImpl\",\r\n        \"type\": \"impl\",\r\n        \"interface_name\": \"src::roles_interface::IMinimalRoles\"\r\n    },\r\n    {\r\n        \"name\": \"src::roles_interface::IMinimalRoles\",\r\n        \"type\": \"interface\",\r\n        \"items\": [\r\n            {\r\n                \"name\": \"is_governance_admin\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::bool\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"is_upgrade_governor\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::bool\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"register_governance_admin\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"remove_governance_admin\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"register_upgrade_governor\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"remove_upgrade_governor\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"renounce\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"role\",\r\n                        \"type\": \"core::felt252\"\r\n                    }\r\n                ],\r\n                \"outputs\": [],\r\n                \"state_mutability\": \"external\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"ERC20Impl\",\r\n        \"type\": \"impl\",\r\n        \"interface_name\": \"openzeppelin::token::erc20::interface::IERC20\"\r\n    },\r\n    {\r\n        \"name\": \"openzeppelin::token::erc20::interface::IERC20\",\r\n        \"type\": \"interface\",\r\n        \"items\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::felt252\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"symbol\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::felt252\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"decimals\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u8\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"total_supply\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"balance_of\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"allowance\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"owner\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"spender\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"transfer\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::bool\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"transfer_from\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"sender\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::bool\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"external\"\r\n            },\r\n            {\r\n                \"name\": \"approve\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"spender\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::bool\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"external\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"ERC20CamelOnlyImpl\",\r\n        \"type\": \"impl\",\r\n        \"interface_name\": \"openzeppelin::token::erc20::interface::IERC20CamelOnly\"\r\n    },\r\n    {\r\n        \"name\": \"openzeppelin::token::erc20::interface::IERC20CamelOnly\",\r\n        \"type\": \"interface\",\r\n        \"items\": [\r\n            {\r\n                \"name\": \"totalSupply\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"balanceOf\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"account\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"view\"\r\n            },\r\n            {\r\n                \"name\": \"transferFrom\",\r\n                \"type\": \"function\",\r\n                \"inputs\": [\r\n                    {\r\n                        \"name\": \"sender\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"recipient\",\r\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n                    },\r\n                    {\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"core::integer::u256\"\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"type\": \"core::bool\"\r\n                    }\r\n                ],\r\n                \"state_mutability\": \"external\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"constructor\",\r\n        \"type\": \"constructor\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"name\",\r\n                \"type\": \"core::felt252\"\r\n            },\r\n            {\r\n                \"name\": \"symbol\",\r\n                \"type\": \"core::felt252\"\r\n            },\r\n            {\r\n                \"name\": \"decimals\",\r\n                \"type\": \"core::integer::u8\"\r\n            },\r\n            {\r\n                \"name\": \"initial_supply\",\r\n                \"type\": \"core::integer::u256\"\r\n            },\r\n            {\r\n                \"name\": \"recipient\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"name\": \"permitted_minter\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"name\": \"provisional_governance_admin\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"name\": \"upgrade_delay\",\r\n                \"type\": \"core::integer::u64\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"increase_allowance\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"spender\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"name\": \"added_value\",\r\n                \"type\": \"core::integer::u256\"\r\n            }\r\n        ],\r\n        \"outputs\": [\r\n            {\r\n                \"type\": \"core::bool\"\r\n            }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n    },\r\n    {\r\n        \"name\": \"decrease_allowance\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"spender\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"name\": \"subtracted_value\",\r\n                \"type\": \"core::integer::u256\"\r\n            }\r\n        ],\r\n        \"outputs\": [\r\n            {\r\n                \"type\": \"core::bool\"\r\n            }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n    },\r\n    {\r\n        \"name\": \"increaseAllowance\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"spender\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"name\": \"addedValue\",\r\n                \"type\": \"core::integer::u256\"\r\n            }\r\n        ],\r\n        \"outputs\": [\r\n            {\r\n                \"type\": \"core::bool\"\r\n            }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n    },\r\n    {\r\n        \"name\": \"decreaseAllowance\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"spender\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"name\": \"subtractedValue\",\r\n                \"type\": \"core::integer::u256\"\r\n            }\r\n        ],\r\n        \"outputs\": [\r\n            {\r\n                \"type\": \"core::bool\"\r\n            }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Transfer\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"from\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"to\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"value\",\r\n                \"type\": \"core::integer::u256\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Approval\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"owner\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"spender\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"value\",\r\n                \"type\": \"core::integer::u256\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::replaceability_interface::ImplementationAdded\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"implementation_data\",\r\n                \"type\": \"src::replaceability_interface::ImplementationData\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::replaceability_interface::ImplementationRemoved\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"implementation_data\",\r\n                \"type\": \"src::replaceability_interface::ImplementationData\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::replaceability_interface::ImplementationReplaced\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"implementation_data\",\r\n                \"type\": \"src::replaceability_interface::ImplementationData\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::replaceability_interface::ImplementationFinalized\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"impl_hash\",\r\n                \"type\": \"core::starknet::class_hash::ClassHash\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::access_control_interface::RoleGranted\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"role\",\r\n                \"type\": \"core::felt252\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"account\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"sender\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::access_control_interface::RoleRevoked\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"role\",\r\n                \"type\": \"core::felt252\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"account\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"sender\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::access_control_interface::RoleAdminChanged\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"role\",\r\n                \"type\": \"core::felt252\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"previous_admin_role\",\r\n                \"type\": \"core::felt252\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"new_admin_role\",\r\n                \"type\": \"core::felt252\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::roles_interface::GovernanceAdminAdded\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"added_account\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"added_by\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::roles_interface::GovernanceAdminRemoved\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"removed_account\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"removed_by\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::roles_interface::UpgradeGovernorAdded\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"added_account\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"added_by\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"struct\",\r\n        \"name\": \"src::roles_interface::UpgradeGovernorRemoved\",\r\n        \"type\": \"event\",\r\n        \"members\": [\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"removed_account\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            },\r\n            {\r\n                \"kind\": \"data\",\r\n                \"name\": \"removed_by\",\r\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"kind\": \"enum\",\r\n        \"name\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Event\",\r\n        \"type\": \"event\",\r\n        \"variants\": [\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"Transfer\",\r\n                \"type\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Transfer\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"Approval\",\r\n                \"type\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Approval\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"ImplementationAdded\",\r\n                \"type\": \"src::replaceability_interface::ImplementationAdded\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"ImplementationRemoved\",\r\n                \"type\": \"src::replaceability_interface::ImplementationRemoved\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"ImplementationReplaced\",\r\n                \"type\": \"src::replaceability_interface::ImplementationReplaced\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"ImplementationFinalized\",\r\n                \"type\": \"src::replaceability_interface::ImplementationFinalized\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"RoleGranted\",\r\n                \"type\": \"src::access_control_interface::RoleGranted\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"RoleRevoked\",\r\n                \"type\": \"src::access_control_interface::RoleRevoked\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"RoleAdminChanged\",\r\n                \"type\": \"src::access_control_interface::RoleAdminChanged\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"GovernanceAdminAdded\",\r\n                \"type\": \"src::roles_interface::GovernanceAdminAdded\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"GovernanceAdminRemoved\",\r\n                \"type\": \"src::roles_interface::GovernanceAdminRemoved\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"UpgradeGovernorAdded\",\r\n                \"type\": \"src::roles_interface::UpgradeGovernorAdded\"\r\n            },\r\n            {\r\n                \"kind\": \"nested\",\r\n                \"name\": \"UpgradeGovernorRemoved\",\r\n                \"type\": \"src::roles_interface::UpgradeGovernorRemoved\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n","import { Account, starknetId } from \"starknet\";\r\n\r\nexport const isStarkDomain = (domain: string): boolean => {\r\n    return /^(?:[a-z0-9-]{1,48}(?:[a-z0-9-]{1,48}[a-z0-9-])?\\.)*[a-z0-9-]{1,48}\\.stark$/.test(\r\n        domain\r\n    );\r\n};\r\n\r\nexport const getAddressFromName = async (\r\n    account: Account,\r\n    name: string\r\n): Promise<string> => {\r\n    const address = await account.getAddressFromStarkName(name);\r\n    if (!address.startsWith(\"0x\") || address === \"0x0\") {\r\n        throw new Error(\"Invalid address\");\r\n    }\r\n    return address;\r\n};\r\n\r\nexport const getTransferSubdomainCall = (\r\n    account: string,\r\n    domain: string,\r\n    recipient: string\r\n) => {\r\n    const namingContract = process.env.STARKNETID_NAMING_CONTRACT;\r\n    const identityContract = process.env.STARKNETID_IDENTITY_CONTRACT;\r\n    const newTokenId: number = Math.floor(Math.random() * 1000000000000);\r\n    const domainParts = domain.replace(\".stark\", \"\").split(\".\");\r\n\r\n    const encodedDomain: string[] = domainParts.map((d) =>\r\n        starknetId.useEncoded(d).toString(10)\r\n    );\r\n\r\n    return [\r\n        {\r\n            contractAddress: identityContract,\r\n            entrypoint: \"mint\",\r\n            calldata: [newTokenId],\r\n        },\r\n        {\r\n            contractAddress: namingContract,\r\n            entrypoint: \"transfer_domain\",\r\n            calldata: [domainParts.length, ...encodedDomain, newTokenId],\r\n        },\r\n        {\r\n            contractAddress: identityContract,\r\n            entrypoint: \"transfer_from\",\r\n            calldata: [account, recipient, newTokenId, 0],\r\n        },\r\n    ];\r\n};\r\n","import {\r\n    type Action,\r\n    ActionExample,\r\n    composeContext,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { Percent } from \"@uniswap/sdk-core\";\r\nimport { createMemecoin, launchOnEkubo } from \"unruggable-sdk\";\r\n\r\nimport { getStarknetAccount, getStarknetProvider } from \"../utils/index.ts\";\r\n// import { DeployData, Factory } from \"@unruggable_starknet/core\";\r\n// import { AMM, QUOTE_TOKEN_SYMBOL } from \"@unruggable_starknet/core/constants\";\r\nimport { ACCOUNTS, TOKENS } from \"../utils/constants.ts\";\r\nimport { validateStarknetConfig } from \"../environment.ts\";\r\n\r\n// interface SwapContent {\r\n//     sellTokenAddress: string;\r\n//     buyTokenAddress: string;\r\n//     sellAmount: string;\r\n// }\r\n\r\ninterface DeployTokenContent {\r\n    name: string;\r\n    symbol: string;\r\n    owner: string;\r\n    initialSupply: string;\r\n}\r\n\r\nexport function isDeployTokenContent(content: DeployTokenContent) {\r\n    // Validate types\r\n    const validTypes =\r\n        typeof content.name === \"string\" &&\r\n        typeof content.symbol === \"string\" &&\r\n        typeof content.owner === \"string\" &&\r\n        typeof content.initialSupply === \"string\";\r\n    if (!validTypes) {\r\n        return false;\r\n    }\r\n\r\n    // Validate addresses (must be 32-bytes long with 0x prefix)\r\n    const validAddresses =\r\n        content.name.length > 2 &&\r\n        content.symbol.length > 2 &&\r\n        parseInt(content.initialSupply) > 0 &&\r\n        content.owner.startsWith(\"0x\") &&\r\n        content.owner.length === 66;\r\n\r\n    return validAddresses;\r\n}\r\n\r\nconst deployTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"name\": \"Brother\",\r\n    \"symbol\": \"BROTHER\",\r\n    \"owner\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"initialSupply\": \"1000000000000000000\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nExtract the following information about the requested token deployment:\r\n- Token Name\r\n- Token Symbol\r\n- Token Owner\r\n- Token initial supply\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.`;\r\n\r\nexport const deployToken: Action = {\r\n    name: \"DEPLOY_STARKNET_UNRUGGABLE_MEME_TOKEN\",\r\n    similes: [\r\n        \"DEPLOY_STARKNET_UNRUGGABLE_TOKEN\",\r\n        \"STARKNET_DEPLOY_MEMECOIN\",\r\n        \"STARKNET_CREATE_MEMECOIN\",\r\n    ],\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        await validateStarknetConfig(runtime);\r\n        return true;\r\n    },\r\n    description:\r\n        \"Deploy an Unruggable Memecoin on Starknet. Use this action when a user asks you to deploy a new token on Starknet.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\r\n            \"Starting DEPLOY_STARKNET_UNRUGGABLE_MEME_TOKEN handler...\"\r\n        );\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const deployContext = composeContext({\r\n            state,\r\n            template: deployTemplate,\r\n        });\r\n\r\n        const response = await generateObjectDeprecated({\r\n            runtime,\r\n            context: deployContext,\r\n            modelClass: ModelClass.MEDIUM,\r\n        });\r\n\r\n        elizaLogger.log(\"init supply.\" + response.initialSupply);\r\n        elizaLogger.log(response);\r\n\r\n        if (!isDeployTokenContent(response)) {\r\n            callback?.({\r\n                text: \"Invalid deployment content, please try again.\",\r\n            });\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const provider = getStarknetProvider(runtime);\r\n            const account = getStarknetAccount(runtime);\r\n\r\n            const chainId = await provider.getChainId();\r\n            const config = {\r\n                starknetChainId: chainId,\r\n                starknetProvider: provider,\r\n            };\r\n\r\n            const { tokenAddress, transactionHash } = await createMemecoin(\r\n                config,\r\n                {\r\n                    name: response.name,\r\n                    symbol: response.symbol,\r\n                    owner: response.owner,\r\n                    initialSupply: response.initialSupply,\r\n                    starknetAccount: account,\r\n                }\r\n            );\r\n\r\n            elizaLogger.log(\r\n                \"Token deployment initiated for: \" +\r\n                    response.name +\r\n                    \" at address: \" +\r\n                    tokenAddress\r\n            );\r\n\r\n            await launchOnEkubo(config, {\r\n                antiBotPeriodInSecs: 3600,\r\n                currencyAddress: TOKENS.LORDS,\r\n                fees: \"3\",\r\n                holdLimit: \"2\",\r\n                memecoinAddress: tokenAddress,\r\n                starknetAccount: account,\r\n                startingMarketCap: \"5000\",\r\n                teamAllocations: [\r\n                    {\r\n                        address: ACCOUNTS.ELIZA,\r\n                        amount: new Percent(\r\n                            2.5,\r\n                            response.initialSupply\r\n                        ).toFixed(0),\r\n                    },\r\n                    {\r\n                        address: ACCOUNTS.BLOBERT,\r\n                        amount: new Percent(\r\n                            2.5,\r\n                            response.initialSupply\r\n                        ).toFixed(0),\r\n                    },\r\n                ],\r\n            });\r\n\r\n            callback?.({\r\n                text:\r\n                    \"Token Deployment completed successfully!\" +\r\n                    response.symbol +\r\n                    \" deployed in tx: \" +\r\n                    transactionHash,\r\n            });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token deployment:\", error);\r\n            callback?.({\r\n                text: `Error during deployment: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deploy a new token called Lords with the symbol LORDS, owned by 0x024BA6a4023fB90962bDfc2314F3B94372aa382D155291635fc3E6b777657A5B and initial supply of 1000000000000000000 on Starknet\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Ok, I'll deploy the Lords token to Starknet\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Deploy the SLINK coin to Starknet\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Ok, I'll deploy your coin on Starknet\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create a new coin on Starknet\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Ok, I'll create a new coin for you on Starknet\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","// It should just transfer subdomain from the root domain owned by the agent's wallet to the recipient.\r\n\r\nimport {\r\n    ActionExample,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    Content,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { getStarknetAccount } from \"../utils\";\r\nimport { validateStarknetConfig } from \"../environment\";\r\nimport { getTransferSubdomainCall, isStarkDomain } from \"../utils/starknetId\";\r\n\r\nexport interface SubdomainCreationContent extends Content {\r\n    recipient: string;\r\n    subdomain: string;\r\n}\r\n\r\nexport function isSubdomainCreation(\r\n    content: SubdomainCreationContent\r\n): content is SubdomainCreationContent {\r\n    // Validate types\r\n    const validTypes =\r\n        typeof content.recipient === \"string\" &&\r\n        typeof content.subdomain === \"string\";\r\n    if (!validTypes) {\r\n        return false;\r\n    }\r\n\r\n    // Validate recipient (must be 32-bytes long with 0x prefix)\r\n    const validTokenAddress =\r\n        content.recipient.startsWith(\"0x\") && content.recipient.length === 66;\r\n    if (!validTokenAddress) {\r\n        return false;\r\n    }\r\n\r\n    // Validate subdomain\r\n    const validStarkName =\r\n        isStarkDomain(content.subdomain) &&\r\n        content.subdomain.split(\".\").length === 3;\r\n\r\n    if (!validStarkName) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"recipient\": \"0x1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\r\n    \"subdomain\": \"subdomain.domain.stark\",\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested subdomain creation:\r\n- Subdomain to create\r\n- Recipient wallet address\r\n\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: \"CREATE_SUBDOMAIN\",\r\n    similes: [\r\n        \"CREATE_SUBDOMAIN_ON_STARKNET\",\r\n        \"SUBDOMAIN_ON_STARKNET\",\r\n        \"SUBDOMAIN_CREATION\",\r\n        \"SEND_SUBDOMAIN_ON_STARKNET\",\r\n    ],\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        await validateStarknetConfig(runtime);\r\n        return true;\r\n    },\r\n    description:\r\n        \"MUST use this action if the user requests create a subdomain, the request might be varied, but it will always be a subdomain creation.\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting CREATE_SUBDOMAIN handler...\");\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose transfer context\r\n        const transferContext = composeContext({\r\n            state,\r\n            template: transferTemplate,\r\n        });\r\n\r\n        // Generate transfer content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.MEDIUM,\r\n        });\r\n\r\n        elizaLogger.debug(\"Transfer content:\", content);\r\n\r\n        // Validate transfer content\r\n        if (!isSubdomainCreation(content)) {\r\n            elizaLogger.error(\"Invalid content for CREATE_SUBDOMAIN action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Not enough information to create subdomain. Please respond with your domain and the subdomain to create.\",\r\n                    content: { error: \"Invalid subdomain creation content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const account = getStarknetAccount(runtime);\r\n\r\n            const transferCall = getTransferSubdomainCall(\r\n                account.address,\r\n                content.subdomain,\r\n                content.recipient\r\n            );\r\n\r\n            elizaLogger.success(\r\n                \"Transferring\",\r\n                content.subdomain,\r\n                \"to\",\r\n                content.recipient\r\n            );\r\n\r\n            const tx = await account.execute(transferCall);\r\n\r\n            elizaLogger.success(\r\n                \"Transfer completed successfully! tx: \" + tx.transaction_hash\r\n            );\r\n            if (callback) {\r\n                callback({\r\n                    text:\r\n                        \"Transfer completed successfully! tx: \" +\r\n                        tx.transaction_hash,\r\n                    content: {},\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during subdomain transfer:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring subdomain ${content.subdomain}: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send me subdomain.domain.stark to 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll transfer subdomain.domain.stark to that address right away. Let me process that for you.\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { executeSwap } from \"./actions/swap\";\r\nimport transfer from \"./actions/transfer\";\r\nimport { deployToken } from \"./actions/unruggable\";\r\nimport transferSubdomain from \"./actions/subdomain\";\r\nexport const PROVIDER_CONFIG = {\r\n    AVNU_API: \"https://starknet.impulse.avnu.fi/v1\",\r\n    MAX_RETRIES: 3,\r\n    RETRY_DELAY: 2000,\r\n    TOKEN_ADDRESSES: {\r\n        BTC: \"0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\",\r\n        ETH: \"0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\r\n        STRK: \"0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d\",\r\n    },\r\n    TOKEN_SECURITY_ENDPOINT: \"/defi/token_security?address=\",\r\n    TOKEN_TRADE_DATA_ENDPOINT: \"/defi/v3/token/trade-data/single?address=\",\r\n    DEX_SCREENER_API: \"https://api.dexscreener.com/latest/dex/tokens/\",\r\n    MAIN_WALLET: \"\",\r\n};\r\n\r\nexport const starknetPlugin: Plugin = {\r\n    name: \"starknet\",\r\n    description: \"Starknet Plugin for Eliza\",\r\n    actions: [transfer, executeSwap, deployToken, transferSubdomain],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default starknetPlugin;\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","Contract","Contract","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","Percent","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","Percent","ModelClass","composeContext","generateObjectDeprecated","elizaLogger","transferTemplate","elizaLogger","composeContext","generateObjectDeprecated","ModelClass"]}