{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import Redis from \"ioredis\";\r\nimport { IDatabaseCacheAdapter, UUID, elizaLogger } from \"@elizaos/core\";\r\n\r\nexport class RedisClient implements IDatabaseCacheAdapter {\r\n    private client: Redis;\r\n\r\n    constructor(redisUrl: string) {\r\n        this.client = new Redis(redisUrl);\r\n\r\n        this.client.on(\"connect\", () => {\r\n            elizaLogger.success(\"Connected to Redis\");\r\n        });\r\n\r\n        this.client.on(\"error\", (err) => {\r\n            elizaLogger.error(\"Redis error:\", err);\r\n        });\r\n    }\r\n\r\n    async getCache(params: {\r\n        agentId: UUID;\r\n        key: string;\r\n    }): Promise<string | undefined> {\r\n        try {\r\n            const redisKey = this.buildKey(params.agentId, params.key);\r\n            const value = await this.client.get(redisKey);\r\n            return value || undefined;\r\n        } catch (err) {\r\n            elizaLogger.error(\"Error getting cache:\", err);\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async setCache(params: {\r\n        agentId: UUID;\r\n        key: string;\r\n        value: string;\r\n    }): Promise<boolean> {\r\n        try {\r\n            const redisKey = this.buildKey(params.agentId, params.key);\r\n            await this.client.set(redisKey, params.value);\r\n            return true;\r\n        } catch (err) {\r\n            elizaLogger.error(\"Error setting cache:\", err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async deleteCache(params: {\r\n        agentId: UUID;\r\n        key: string;\r\n    }): Promise<boolean> {\r\n        try {\r\n            const redisKey = this.buildKey(params.agentId, params.key);\r\n            const result = await this.client.del(redisKey);\r\n            return result > 0;\r\n        } catch (err) {\r\n            elizaLogger.error(\"Error deleting cache:\", err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        try {\r\n            await this.client.quit();\r\n            elizaLogger.success(\"Disconnected from Redis\");\r\n        } catch (err) {\r\n            elizaLogger.error(\"Error disconnecting from Redis:\", err);\r\n        }\r\n    }\r\n\r\n    private buildKey(agentId: UUID, key: string): string {\r\n        return `${agentId}:${key}`; // Constructs a unique key based on agentId and key\r\n    }\r\n}\r\n\r\nexport default RedisClient;\r\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,SAAsC,mBAAmB;AAElD,IAAM,cAAN,MAAmD;AAAA,EAC9C;AAAA,EAER,YAAY,UAAkB;AAC1B,SAAK,SAAS,IAAI,MAAM,QAAQ;AAEhC,SAAK,OAAO,GAAG,WAAW,MAAM;AAC5B,kBAAY,QAAQ,oBAAoB;AAAA,IAC5C,CAAC;AAED,SAAK,OAAO,GAAG,SAAS,CAAC,QAAQ;AAC7B,kBAAY,MAAM,gBAAgB,GAAG;AAAA,IACzC,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,SAAS,QAGiB;AAC5B,QAAI;AACA,YAAM,WAAW,KAAK,SAAS,OAAO,SAAS,OAAO,GAAG;AACzD,YAAM,QAAQ,MAAM,KAAK,OAAO,IAAI,QAAQ;AAC5C,aAAO,SAAS;AAAA,IACpB,SAAS,KAAK;AACV,kBAAY,MAAM,wBAAwB,GAAG;AAC7C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,SAAS,QAIM;AACjB,QAAI;AACA,YAAM,WAAW,KAAK,SAAS,OAAO,SAAS,OAAO,GAAG;AACzD,YAAM,KAAK,OAAO,IAAI,UAAU,OAAO,KAAK;AAC5C,aAAO;AAAA,IACX,SAAS,KAAK;AACV,kBAAY,MAAM,wBAAwB,GAAG;AAC7C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,QAGG;AACjB,QAAI;AACA,YAAM,WAAW,KAAK,SAAS,OAAO,SAAS,OAAO,GAAG;AACzD,YAAM,SAAS,MAAM,KAAK,OAAO,IAAI,QAAQ;AAC7C,aAAO,SAAS;AAAA,IACpB,SAAS,KAAK;AACV,kBAAY,MAAM,yBAAyB,GAAG;AAC9C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,aAA4B;AAC9B,QAAI;AACA,YAAM,KAAK,OAAO,KAAK;AACvB,kBAAY,QAAQ,yBAAyB;AAAA,IACjD,SAAS,KAAK;AACV,kBAAY,MAAM,mCAAmC,GAAG;AAAA,IAC5D;AAAA,EACJ;AAAA,EAEQ,SAAS,SAAe,KAAqB;AACjD,WAAO,GAAG,OAAO,IAAI,GAAG;AAAA,EAC5B;AACJ;AAEA,IAAO,gBAAQ;","names":[]}