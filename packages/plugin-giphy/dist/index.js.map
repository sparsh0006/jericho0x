{"version":3,"sources":["../src/actions/sendGif.ts","../src/utils/debug.ts","../src/environment.ts","../src/index.ts"],"sourcesContent":["// src/actions/sendGif.ts\r\n\r\nimport {\r\n    ActionExample,\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport axios from \"axios\";\r\nimport { debugLog } from \"../utils/debug\";\r\nimport { validateGiphyConfig } from \"../environment\";\r\nimport { GifResponse, Gif } from \"../types\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport crypto from \"crypto\";\r\n\r\nconst sendGifTemplate = `Given the message, determine if a gif should be sent based on the content.\r\nIf yes, extract relevant keywords or phrases to use as search terms for the gif.\r\n\r\nFormat the response as a JSON object with these fields:\r\n- trigger: boolean (whether to send a gif)\r\n- searchTerm: string (keywords to search for the gif, required if trigger is true)\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"trigger\": true,\r\n    \"searchTerm\": \"pudgy penguins beach\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nAnalyze the above messages and decide whether to respond with a gif. If so, specify the search term.\r\n`;\r\n\r\nconst GIPHY_SEARCH_ENDPOINT = \"https://api.giphy.com/v1/gifs/search\";\r\n\r\nexport interface SendGifContent extends Content {\r\n    trigger: boolean;\r\n    searchTerm?: string;\r\n}\r\n\r\nexport default {\r\n    name: \"SEND_GIF\",\r\n    similes: [\"REPLY_WITH_GIF\", \"GIF_RESPONSE\"],\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"üîÑ Validating Giphy configuration...\");\r\n        try {\r\n            const config = await validateGiphyConfig(runtime);\r\n            debugLog.validation(config);\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            return false;\r\n        }\r\n    },\r\n    description: \"Respond with a gif based on the user's message\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"üöÄ Starting Giphy SEND_GIF handler...\");\r\n\r\n        if (!state) {\r\n            elizaLogger.log(\"Creating new state...\");\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            elizaLogger.log(\"Updating existing state...\");\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        try {\r\n            elizaLogger.log(\"Composing gif trigger context...\");\r\n            const gifContext = composeContext({\r\n                state,\r\n                template: sendGifTemplate,\r\n            });\r\n\r\n            elizaLogger.log(\"Generating content from context...\");\r\n            const content = (await generateObjectDeprecated({\r\n                runtime,\r\n                context: gifContext,\r\n                modelClass: ModelClass.LARGE,\r\n            })) as unknown as SendGifContent;\r\n\r\n            if (!content) {\r\n                throw new Error(\"Failed to parse gif trigger content\");\r\n            }\r\n\r\n            debugLog.validation(content);\r\n\r\n            if (!content.trigger || !content.searchTerm) {\r\n                elizaLogger.log(\"No gif triggered for this message.\");\r\n                return false;\r\n            }\r\n\r\n            const config = await validateGiphyConfig(runtime);\r\n\r\n            const requestParams = {\r\n                api_key: config.GIPHY_API_KEY,\r\n                q: content.searchTerm,\r\n                limit: 10,\r\n                rating: \"pg\",\r\n                lang: \"en\", // Optional: specify language for better results\r\n            };\r\n\r\n            debugLog.request(\"GET\", GIPHY_SEARCH_ENDPOINT, requestParams);\r\n\r\n            const response = await axios.get<GifResponse>(\r\n                GIPHY_SEARCH_ENDPOINT,\r\n                {\r\n                    params: requestParams,\r\n                }\r\n            );\r\n\r\n            debugLog.response(response);\r\n            elizaLogger.log(\r\n                \"Full Giphy API Response:\",\r\n                JSON.stringify(response.data, null, 2)\r\n            );\r\n\r\n            const gifs = response.data.data;\r\n            if (!gifs.length) {\r\n                throw new Error(\r\n                    `No gifs found for search term: ${content.searchTerm}`\r\n                );\r\n            }\r\n\r\n            // Filter out any non-GIF URLs just in case\r\n            const gifGifs = gifs.filter((gif) =>\r\n                gif.images.original.url.includes(\".gif\")\r\n            );\r\n            if (!gifGifs.length) {\r\n                throw new Error(\r\n                    `No valid GIFs found for search term: ${content.searchTerm}`\r\n                );\r\n            }\r\n\r\n            // Select a random gif from the filtered results\r\n            const selectedGif: Gif =\r\n                gifGifs[Math.floor(Math.random() * gifGifs.length)];\r\n            elizaLogger.log(\r\n                \"Selected GIF:\",\r\n                JSON.stringify(selectedGif, null, 2)\r\n            );\r\n\r\n            const gifUrl = selectedGif.images.original.url.split(\"?\")[0];\r\n\r\n            // Validate the URL structure\r\n            if (!gifUrl.endsWith(\".gif\")) {\r\n                throw new Error(`Invalid GIF URL format: ${gifUrl}`);\r\n            }\r\n\r\n            if (callback) {\r\n                const message = {\r\n                    text: \"Here's a GIF for you!\",\r\n                    attachments: [\r\n                        {\r\n                            id: crypto.randomUUID(),\r\n                            url: gifUrl, // Use the original Giphy URL directly\r\n                            title: \"Enjoy your GIF!\",\r\n                            source: \"giphyPlugin\",\r\n                            description: selectedGif.title,\r\n                            text: selectedGif.title,\r\n                            contentType: \"image/gif\",\r\n                            type: \"animation\",\r\n                        },\r\n                    ],\r\n                };\r\n                // No need for local file attachments anymore\r\n                elizaLogger.log(\"‚úÖ Sending callback with gif url:\", message);\r\n                callback(message);\r\n            }\r\n\r\n            // **Removed Immediate Deletion Here**\r\n\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error fetching gif: ${error instanceof Error ? error.message : \"Unknown error\"}`,\r\n                    content: {\r\n                        error:\r\n                            error instanceof Error\r\n                                ? error.message\r\n                                : \"Unknown error\",\r\n                    },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            // Example 1: Silly comment\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send me a gif about pudgy penguins\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Here's a pudgy penguins gif for you!\",\r\n                    action: \"SEND_GIF\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"https://media2.giphy.com/media/qP4CXhBeKJTbSzjNfC/giphy.gif\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n} as Action;\r\n","import { elizaLogger } from \"@elizaos/core\";\r\n\r\nexport const debugLog = {\r\n    request: (method: string, url: string, data?: any) => {\r\n        elizaLogger.log(\"üåê API Request:\", {\r\n            method,\r\n            url,\r\n            data: data || \"No data\"\r\n        });\r\n    },\r\n\r\n    response: (response: any) => {\r\n        elizaLogger.log(\"‚úÖ API Response:\", {\r\n            status: response?.status,\r\n            data: response?.data || \"No data\"\r\n        });\r\n    },\r\n\r\n    error: (error: any) => {\r\n        elizaLogger.error(\"‚õî Error Details:\", {\r\n            message: error?.message,\r\n            response: {\r\n                status: error?.response?.status,\r\n                data: error?.response?.data\r\n            },\r\n            config: {\r\n                url: error?.config?.url,\r\n                method: error?.config?.method,\r\n                data: error?.config?.data\r\n            }\r\n        });\r\n    },\r\n\r\n    validation: (config: any) => {\r\n        elizaLogger.log(\"üîç Config Validation:\", config);\r\n    }\r\n};\r\n","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nexport const giphyEnvSchema = z.object({\r\n    GIPHY_API_KEY: z.string().min(1, \"Giphy API key is required\"),\r\n});\r\n\r\nexport type GiphyConfig = z.infer<typeof giphyEnvSchema>;\r\n\r\nexport async function validateGiphyConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<GiphyConfig> {\r\n    try {\r\n        const config = {\r\n            GIPHY_API_KEY: runtime.getSetting(\"GIPHY_API_KEY\"),\r\n        };\r\n        return giphyEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `Giphy configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport sendGif from \"./actions/sendGif\";\r\n\r\nexport const giphyPlugin: Plugin = {\r\n    name: \"giphy\",\r\n    description: \"Giphy Plugin for Eliza to send GIFs in responses\",\r\n    actions: [\r\n        sendGif\r\n    ],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default giphyPlugin;\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","message"]}