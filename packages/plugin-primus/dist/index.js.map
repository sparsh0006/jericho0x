{"version":3,"sources":["../src/actions/postTweetAction.ts","../src/util/twitterScraper.ts","../src/util/primusUtil.ts","../src/providers/tokenPriceProvider.ts","../src/adapter/primusAdapter.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Action,\r\n    elizaLogger,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { TwitterScraper } from \"../util/twitterScraper.ts\";\r\nimport {tokenPriceProvider} from \"../providers/tokenPriceProvider.ts\";\r\n\r\nexport const postTweetAction: Action = {\r\n    description: \"Post a tweet on Twitter and be verified by Primus\",\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Get the latest BTC price and post it on my twitter.\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"The latest tweet has posted.\",\r\n                    action: \"POST_TWEET\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Help post a tweet which content is BTC price.\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Completed!\",\r\n                    action: \"POST_TWEET\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Post a tweet on twitter for me.\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"I'll post the latest tweet to your Twitter account now!\",\r\n                    action: \"POST_TWEET\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state?: State\r\n    ): Promise<boolean> => {\r\n        const contentYouWantToPost = await tokenPriceProvider.get(runtime, message, state);\r\n        //check VERIFIABLE_INFERENCE_ENABLED\r\n        if (\r\n            !(\r\n                process.env.VERIFIABLE_INFERENCE_ENABLED === \"true\" &&\r\n                process.env.PRIMUS_APP_ID &&\r\n                process.env.PRIMUS_APP_SECRET\r\n            )\r\n        ) {\r\n            elizaLogger.error(\r\n                `Parameter 'VERIFIABLE_INFERENCE_ENABLED' not set, Eliza will run this action!`\r\n            );\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            if (\r\n                process.env.TWITTER_DRY_RUN &&\r\n                process.env.TWITTER_DRY_RUN.toLowerCase() === \"true\"\r\n            ) {\r\n                elizaLogger.info(\r\n                    `Dry run: would have posted tweet: ${contentYouWantToPost}`\r\n                );\r\n                return true;\r\n            }\r\n\r\n            const scraperWithPrimus = new TwitterScraper();\r\n            await scraperWithPrimus.login();\r\n            if (!(await scraperWithPrimus.getScraper().isLoggedIn())) {\r\n                elizaLogger.error(\"Failed to login to Twitter\");\r\n                return false;\r\n            }\r\n            // post the tweet\r\n            elizaLogger.log(\"Attempting to send tweet:\", contentYouWantToPost);\r\n            const result = await scraperWithPrimus.sendTweet(contentYouWantToPost);\r\n\r\n            elizaLogger.log(\"Tweet response:\", result);\r\n\r\n            // Check for Twitter API errors\r\n            if (!result) {\r\n                elizaLogger.error(`Twitter API error ${result}`);\r\n                return false;\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in post action:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    name: \"POST_TWEET\",\r\n    similes: [\"TWEET\", \"POST\", \"SEND_TWEET\"],\r\n    validate: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state?: State\r\n    ) => {\r\n        const hasCredentials =\r\n            !!process.env.TWITTER_USERNAME && !!process.env.TWITTER_PASSWORD;\r\n        elizaLogger.log(`Has credentials: ${hasCredentials}`);\r\n\r\n        return hasCredentials;\r\n    },\r\n};\r\n","import { Scraper } from \"agent-twitter-client\";\r\nimport { elizaLogger } from \"@elizaos/core\";\r\nimport { verifyProof, generateProof } from \"./primusUtil.ts\";\r\n\r\nexport class TwitterScraper {\r\n    private scraper: Scraper;\r\n\r\n    constructor() {}\r\n\r\n    public getScraper(): Scraper {\r\n        return this.scraper;\r\n    }\r\n\r\n    public async getUserIdByScreenName(screenName: string) {\r\n        return await this.scraper.getUserIdByScreenName(screenName);\r\n    }\r\n\r\n    public async login() {\r\n        this.scraper = new Scraper();\r\n        const username = process.env.TWITTER_USERNAME;\r\n        const password = process.env.TWITTER_PASSWORD;\r\n        const email = process.env.TWITTER_EMAIL;\r\n        const twitter2faSecret = process.env.TWITTER_2FA_SECRET;\r\n        if (!username || !password) {\r\n            elizaLogger.error(\r\n                \"Twitter credentials not configured in environment\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Login with credentials\r\n        await this.scraper.login(username, password, email, twitter2faSecret);\r\n        if (!(await this.scraper.isLoggedIn())) {\r\n            elizaLogger.error(\"Failed to login to Twitter\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public async getUserLatestTweet(userId: string) {\r\n        const onboardingTaskUrl =\r\n            \"https://api.twitter.com/1.1/onboarding/task.json\";\r\n        const cookies = await (this.scraper as any).auth\r\n            .cookieJar()\r\n            .getCookies(onboardingTaskUrl);\r\n        const xCsrfToken = cookies.find((cookie) => cookie.key === \"ct0\");\r\n\r\n        //@ ts-expect-error - This is a private API.\r\n        const headers = {\r\n            authorization: `Bearer ${(this.scraper as any).auth.bearerToken}`,\r\n            cookie: await (this.scraper as any).auth\r\n                .cookieJar()\r\n                .getCookieString(onboardingTaskUrl),\r\n            \"content-type\": \"application/json\",\r\n            \"User-Agent\":\r\n                \"Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36\",\r\n            \"x-guest-token\": (this.scraper as any).guestToken,\r\n            \"x-twitter-auth-type\": \"OAuth2Client\",\r\n            \"x-twitter-active-user\": \"yes\",\r\n            \"x-twitter-client-language\": \"en\",\r\n            \"x-csrf-token\": xCsrfToken?.value,\r\n        };\r\n\r\n        const variables = {\r\n            userId: userId,\r\n            count: 1,\r\n            includePromotedContent: true,\r\n            withQuickPromoteEligibilityTweetFields: true,\r\n            withVoice: true,\r\n            withV2Timeline: true,\r\n        };\r\n        const features = {\r\n            profile_label_improvements_pcf_label_in_post_enabled: false,\r\n            rweb_tipjar_consumption_enabled: true,\r\n            tweetypie_unmention_optimization_enabled: false,\r\n            responsive_web_graphql_exclude_directive_enabled: true,\r\n            verified_phone_label_enabled: false,\r\n            creator_subscriptions_tweet_preview_api_enabled: true,\r\n            responsive_web_graphql_timeline_navigation_enabled: true,\r\n            responsive_web_graphql_skip_user_profile_image_extensions_enabled:\r\n                false,\r\n            premium_content_api_read_enabled: false,\r\n            communities_web_enable_tweet_community_results_fetch: true,\r\n            c9s_tweet_anatomy_moderator_badge_enabled: true,\r\n            responsive_web_grok_analyze_button_fetch_trends_enabled: false,\r\n            responsive_web_grok_analyze_post_followups_enabled: true,\r\n            responsive_web_grok_share_attachment_enabled: true,\r\n            articles_preview_enabled: true,\r\n            responsive_web_edit_tweet_api_enabled: true,\r\n            graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\r\n            view_counts_everywhere_api_enabled: true,\r\n            longform_notetweets_consumption_enabled: true,\r\n            responsive_web_twitter_article_tweet_consumption_enabled: true,\r\n            tweet_awards_web_tipping_enabled: false,\r\n            creator_subscriptions_quote_tweet_preview_enabled: false,\r\n            freedom_of_speech_not_reach_fetch_enabled: true,\r\n            standardized_nudges_misinfo: true,\r\n            tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\r\n                true,\r\n            rweb_video_timestamps_enabled: true,\r\n            longform_notetweets_rich_text_read_enabled: true,\r\n            longform_notetweets_inline_media_enabled: true,\r\n            responsive_web_enhance_cards_enabled: false,\r\n        };\r\n        const fieldToggles = {\r\n            withArticlePlainText: false,\r\n        };\r\n        const variablesUrlEncoded = encodeURIComponent(\r\n            JSON.stringify(variables)\r\n        );\r\n        const featureUrlEncoded = encodeURIComponent(JSON.stringify(features));\r\n        const fieldTogglesUrlEncoded = encodeURIComponent(\r\n            JSON.stringify(fieldToggles)\r\n        );\r\n        const endpoint = `https://twitter.com/i/api/graphql/V7H0Ap3_Hh2FyS75OCDO3Q/UserTweets?variables=${variablesUrlEncoded}&features=${featureUrlEncoded}&fieldToggles=${fieldTogglesUrlEncoded}`;\r\n        const responseParsePath =\r\n            \"$.data.user.result.timeline_v2.timeline.instructions[1].entry.content.itemContent.tweet_results.result.legacy.full_text\";\r\n        const attestation = await generateProof(\r\n            endpoint,\r\n            \"GET\",\r\n            headers,\r\n            undefined,\r\n            responseParsePath\r\n        );\r\n        //log attestation\r\n        elizaLogger.info(\r\n            \"Tweet getting proof generated successfully:\",\r\n            attestation\r\n        );\r\n        const verifyResult = verifyProof(attestation);\r\n        if (!verifyResult) {\r\n            throw new Error(\r\n                \"Verify attestation failed,data from source is illegality\"\r\n            );\r\n        }\r\n        const responseData = JSON.parse(attestation.data);\r\n        const content = responseData.content;\r\n        //log\r\n        elizaLogger.info(`get tweet content success:${content}`);\r\n        return this.removeEmojis(content);\r\n    }\r\n\r\n    private isEmoji(char: string) {\r\n        const codePoint = char.codePointAt(0);\r\n        return (\r\n            (codePoint >= 0x1f600 && codePoint <= 0x1f64f) ||\r\n            (codePoint >= 0x1f300 && codePoint <= 0x1f5ff) ||\r\n            (codePoint >= 0x1f680 && codePoint <= 0x1f6ff) ||\r\n            (codePoint >= 0x2600 && codePoint <= 0x26ff) ||\r\n            (codePoint >= 0x2700 && codePoint <= 0x27bf) ||\r\n            (codePoint >= 0x1f900 && codePoint <= 0x1f9ff) ||\r\n            (codePoint >= 0x1f1e6 && codePoint <= 0x1f1ff)\r\n        );\r\n    }\r\n\r\n    private removeEmojis(input: string) {\r\n        return Array.from(input)\r\n            .filter((char) => !this.isEmoji(char))\r\n            .join(\"\");\r\n    }\r\n\r\n    public async sendTweet(content: string) {\r\n        const onboardingTaskUrl =\r\n            \"https://api.twitter.com/1.1/onboarding/task.json\";\r\n\r\n        const cookies = await (this.scraper as any).auth\r\n            .cookieJar()\r\n            .getCookies(onboardingTaskUrl);\r\n        const xCsrfToken = cookies.find((cookie) => cookie.key === \"ct0\");\r\n\r\n        //@ ts-expect-error - This is a private API.\r\n        const headers = {\r\n            authorization: `Bearer ${(this.scraper as any).auth.bearerToken}`,\r\n            cookie: await (this.scraper as any).auth\r\n                .cookieJar()\r\n                .getCookieString(onboardingTaskUrl),\r\n            \"content-type\": \"application/json\",\r\n            \"User-Agent\":\r\n                \"Mozilla/5.0 (Linux; Android 11; Nokia G20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36\",\r\n            \"x-guest-token\": (this.scraper as any).guestToken,\r\n            \"x-twitter-auth-type\": \"OAuth2Client\",\r\n            \"x-twitter-active-user\": \"yes\",\r\n            \"x-twitter-client-language\": \"en\",\r\n            \"x-csrf-token\": xCsrfToken?.value,\r\n        };\r\n\r\n        const variables = {\r\n            tweet_text: content,\r\n            dark_request: false,\r\n            media: {\r\n                media_entities: [],\r\n                possibly_sensitive: false,\r\n            },\r\n            semantic_annotation_ids: [],\r\n        };\r\n        const bodyStr = JSON.stringify({\r\n            variables,\r\n            features: {\r\n                interactive_text_enabled: true,\r\n                longform_notetweets_inline_media_enabled: false,\r\n                responsive_web_text_conversations_enabled: false,\r\n                tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\r\n                    false,\r\n                vibe_api_enabled: false,\r\n                rweb_lists_timeline_redesign_enabled: true,\r\n                responsive_web_graphql_exclude_directive_enabled: true,\r\n                verified_phone_label_enabled: false,\r\n                creator_subscriptions_tweet_preview_api_enabled: true,\r\n                responsive_web_graphql_timeline_navigation_enabled: true,\r\n                responsive_web_graphql_skip_user_profile_image_extensions_enabled:\r\n                    false,\r\n                tweetypie_unmention_optimization_enabled: true,\r\n                responsive_web_edit_tweet_api_enabled: true,\r\n                graphql_is_translatable_rweb_tweet_is_translatable_enabled:\r\n                    true,\r\n                view_counts_everywhere_api_enabled: true,\r\n                longform_notetweets_consumption_enabled: true,\r\n                tweet_awards_web_tipping_enabled: false,\r\n                freedom_of_speech_not_reach_fetch_enabled: true,\r\n                standardized_nudges_misinfo: true,\r\n                longform_notetweets_rich_text_read_enabled: true,\r\n                responsive_web_enhance_cards_enabled: false,\r\n                subscriptions_verification_info_enabled: true,\r\n                subscriptions_verification_info_reason_enabled: true,\r\n                subscriptions_verification_info_verified_since_enabled: true,\r\n                super_follow_badge_privacy_enabled: false,\r\n                super_follow_exclusive_tweet_notifications_enabled: false,\r\n                super_follow_tweet_api_enabled: false,\r\n                super_follow_user_api_enabled: false,\r\n                android_graphql_skip_api_media_color_palette: false,\r\n                creator_subscriptions_subscription_count_enabled: false,\r\n                blue_business_profile_image_shape_enabled: false,\r\n                unified_cards_ad_metadata_container_dynamic_card_content_query_enabled:\r\n                    false,\r\n                rweb_video_timestamps_enabled: false,\r\n                c9s_tweet_anatomy_moderator_badge_enabled: false,\r\n                responsive_web_twitter_article_tweet_consumption_enabled: false,\r\n            },\r\n            fieldToggles: {},\r\n        });\r\n        const endpoint = 'https://twitter.com/i/api/graphql/a1p9RWpkYKBjWv_I3WzS-A/CreateTweet';\r\n        const method = 'POST';\r\n        const attestation = await generateProof(endpoint,method,headers,bodyStr,\"$.data.create_tweet.tweet_results.result.rest_id\");\r\n\r\n        elizaLogger.info(\r\n            \"Tweet posting proof generated successfully:\",\r\n            attestation\r\n        );\r\n\r\n        const verifyResult = verifyProof(attestation);\r\n        if (!verifyResult) {\r\n            throw new Error(\r\n                \"Verify attestation failed, data from source is illegality\"\r\n            );\r\n        }\r\n        const responseData = JSON.parse(attestation.data);\r\n        elizaLogger.info(`send tweet success,tweetId:${responseData.content}`);\r\n\r\n        return responseData.content;\r\n    }\r\n}\r\n","import { PrimusCoreTLS,Attestation } from \"@primuslabs/zktls-core-sdk\";\r\n\r\nexport const generateProof = async (\r\n    endpoint: string,\r\n    method: string,\r\n    headers: Record<string, any>,\r\n    body: string,\r\n    responseParsePath: string\r\n): Promise<Attestation> => {\r\n    const zkTLS = new PrimusCoreTLS();\r\n    await zkTLS.init(process.env.PRIMUS_APP_ID, process.env.PRIMUS_APP_SECRET);\r\n    const requestParam = body\r\n        ? {\r\n              url: endpoint,\r\n              method: method,\r\n              header: headers,\r\n              body: body,\r\n          }\r\n        : {\r\n              url: endpoint,\r\n              method: method,\r\n              header: headers,\r\n          };\r\n    // console.log('requestParam:',requestParam)\r\n    const attestationParams = zkTLS.generateRequestParams(requestParam, [\r\n        {\r\n            keyName: \"content\",\r\n            parsePath: responseParsePath,\r\n            parseType: \"string\",\r\n        },\r\n    ]);\r\n    attestationParams.setAttMode({\r\n        algorithmType: \"proxytls\",\r\n    });\r\n    return await zkTLS.startAttestation(attestationParams);\r\n};\r\n\r\nexport const verifyProof = async (attestation: Attestation): Promise<boolean> => {\r\n    const zkTLS = new PrimusCoreTLS();\r\n    await zkTLS.init(process.env.PRIMUS_APP_ID, process.env.PRIMUS_APP_SECRET);\r\n    return zkTLS.verifyAttestation(attestation);\r\n};\r\n","import {elizaLogger, IAgentRuntime, Memory, Provider, State} from \"@elizaos/core\";\r\nimport {generateProof, verifyProof} from \"../util/primusUtil.ts\";\r\n\r\nconst tokenPriceProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, message: Memory, _state?: State) => {\r\n        //get btc price\r\n        const url = `${process.env.BINANCE_API_URL||'https://api.binance.com'}/api/v3/ticker/price?symbol=${process.env.BINANCE_SYMBOL || 'BTCUSDT'}`;\r\n        const method = 'GET';\r\n        const headers = {\r\n            'Accept\t': '*/*',\r\n        };\r\n        const attestation = await generateProof(url, method, headers, \"\", \"$.price\");\r\n        const valid = await verifyProof(attestation);\r\n        if(!valid){\r\n            throw new Error(\"Invalid price attestation\");\r\n        }\r\n        elizaLogger.info('price attestation:',attestation);\r\n        try{\r\n            const responseData = JSON.parse((attestation as any).data);\r\n            const price = responseData.content;\r\n            return  `\r\n            Get BTC price from Binance:\r\n            BTC: ${price} USDT\r\n            Time: ${new Date().toUTCString()}\r\n            POST by eliza #eliza\r\n            Attested by Primus #primus #zktls\r\n            `\r\n        }catch (error){\r\n            elizaLogger.error('Failed to parse price data:', error);\r\n            throw new Error('Failed to parse price data');\r\n        }\r\n    },\r\n};\r\n\r\nexport { tokenPriceProvider };\r\n","import { PrimusCoreTLS } from \"@primuslabs/zktls-core-sdk\";\r\nimport {\r\n    IVerifiableInferenceAdapter,\r\n    VerifiableInferenceOptions,\r\n    VerifiableInferenceResult,\r\n    VerifiableInferenceProvider,\r\n    ModelProviderName,\r\n    models,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport {generateProof, verifyProof} from \"../util/primusUtil.ts\";\r\n\r\ninterface PrimusOptions {\r\n    appId: string;\r\n    appSecret: string;\r\n    attMode: string;\r\n    modelProvider?: ModelProviderName;\r\n    token?: string;\r\n}\r\n\r\nexport class PrimusAdapter implements IVerifiableInferenceAdapter {\r\n    public options: PrimusOptions;\r\n\r\n    constructor(options: PrimusOptions) {\r\n        this.options = options;\r\n    }\r\n\r\n    async generateText(\r\n        context: string,\r\n        modelClass: string,\r\n        options?: VerifiableInferenceOptions\r\n    ): Promise<VerifiableInferenceResult> {\r\n        const provider = this.options.modelProvider || ModelProviderName.OPENAI;\r\n        const baseEndpoint = options?.endpoint || models[provider].endpoint;\r\n        const model = models[provider].model[modelClass];\r\n        const apiKey = this.options.token;\r\n\r\n        if (!apiKey) {\r\n            throw new Error(\r\n                `API key (token) is required for provider: ${provider}`\r\n            );\r\n        }\r\n\r\n        // Get provider-specific endpoint, auth header and response json path\r\n        let endpoint;\r\n        let authHeader;\r\n        let responseParsePath;\r\n\r\n        switch (provider) {\r\n            case ModelProviderName.OPENAI:\r\n                endpoint = `${baseEndpoint}/chat/completions`;\r\n                authHeader = `Bearer ${apiKey}`;\r\n                responseParsePath = \"$.choices[0].message.content\";\r\n                break;\r\n            default:\r\n                throw new Error(`Unsupported model provider: ${provider}`);\r\n        }\r\n\r\n\r\n        const headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": authHeader,\r\n        };\r\n\r\n        try {\r\n            let body = {\r\n                model: model.name,\r\n                messages: [{ role: \"user\", content: context }],\r\n                temperature:\r\n                    options?.providerOptions?.temperature ||\r\n                    models[provider].model[modelClass].temperature,\r\n            };\r\n            const attestation = await generateProof(endpoint,\"POST\",headers,JSON.stringify(body),responseParsePath);\r\n            elizaLogger.log(`model attestation:`, attestation);\r\n\r\n            const responseData = JSON.parse(attestation.data);\r\n            let text = JSON.parse(responseData.content);\r\n            return {\r\n                text,\r\n                proof: attestation,\r\n                provider: VerifiableInferenceProvider.PRIMUS,\r\n                timestamp: Date.now(),\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error in Primus generateText:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async verifyProof(result: VerifiableInferenceResult): Promise<boolean> {\r\n        const isValid = verifyProof(result.proof)\r\n        elizaLogger.log(\"Proof is valid:\", isValid);\r\n        return isValid;\r\n    }\r\n}\r\n\r\nexport default PrimusAdapter;\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { postTweetAction } from \"./actions/postTweetAction.ts\";\r\nimport {PrimusAdapter} from \"./adapter/primusAdapter.ts\";\r\n\r\nexport const twitterPlugin: Plugin = {\r\n    name: \"twitter\",\r\n    description: \"Twitter integration plugin for posting tweets with proof generated by primus\",\r\n    actions: [postTweetAction],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default twitterPlugin;\r\nexport {PrimusAdapter};\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","elizaLogger","elizaLogger","elizaLogger","elizaLogger"]}