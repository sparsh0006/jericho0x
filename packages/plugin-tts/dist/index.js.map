{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    Plugin,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { fal } from \"@fal-ai/client\";\r\nimport { FAL_CONSTANTS, VOICE_MAP, getRandomVoice } from \"./constants\";\r\n\r\nimport * as fs from \"fs\";\r\nimport { Buffer } from \"buffer\";\r\nimport * as path from \"path\";\r\nimport * as process from \"process\";\r\nimport { detect } from 'langdetect'; \r\n\r\nconst generateTTS = async (prompt: string, voice: string, runtime: IAgentRuntime) => {\r\n    process.env[\"FAL_KEY\"] =\r\n        FAL_CONSTANTS.API_KEY_SETTING || runtime.getSetting(\"FAL_API_KEY\");\r\n\r\n    try {\r\n        elizaLogger.log(\"Starting TTS generation with prompt:\", prompt);\r\n\r\n        const response = await fal.subscribe(FAL_CONSTANTS.API_TTS_ENDPOINT, {\r\n            input: {\r\n                input: prompt,\r\n                voice: voice\r\n              },\r\n            logs: true,\r\n            onQueueUpdate: (update) => {\r\n                if (update.status === \"IN_PROGRESS\") {\r\n                    update.logs\r\n                        .map((log) => log.message)\r\n                        .forEach(elizaLogger.log);\r\n                }\r\n            },\r\n        });\r\n\r\n        elizaLogger.log(\r\n            \"Generation request successful, received response:\",\r\n            response\r\n        );\r\n\r\n        return {success: true, \r\n                data: response.data};\r\n    } \r\n    catch (error) {\r\n        elizaLogger.error(\"TTS generation error:\", error);\r\n        return {\r\n            success: false,\r\n            error: error.message || \"Unknown error occurred\",\r\n        };\r\n    }\r\n};\r\n\r\nconst TTSGeneration: Action = {\r\n    name: \"GENERATE_TTS\",\r\n    similes: [\r\n        \"TTS_GENERATION\",\r\n        \"CREATE_TTS\",\r\n        \"TEXT2SPEECH\",\r\n        \"T2S\",\r\n        \"TEXT_TO_SPEECH\",\r\n        \"AUDIO_CREATE\",\r\n    ],\r\n    description: \"Generate a tts audio based on a text prompt\",\r\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\r\n        elizaLogger.log(\"Validating TTS action\");\r\n        const FalApiKey = runtime.getSetting(\"FAL_API_KEY\");\r\n        elizaLogger.log(\"FAL_API_KEY present:\", !!FalApiKey);\r\n        return !!FalApiKey;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        elizaLogger.log(\"TTS request:\", message);\r\n\r\n        // Clean up the prompt by removing mentions and commands\r\n        const TTSPrompt = message.content.text\r\n            .replace(/<@\\d+>/g, \"\") // Remove mentions\r\n            .replace(/generate TTS|create TTS|make TTS|render TTS/gi, \"\") // Remove commands\r\n            .trim();\r\n\r\n        if (!TTSPrompt || TTSPrompt.length < 3) {\r\n            callback({\r\n                text: \"Please input a word at least of length 3\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        elizaLogger.log(\"TTS prompt:\", TTSPrompt);\r\n\r\n        callback({\r\n            text: `I'll generate a audio based on your prompt: \"${TTSPrompt}\". This might take a few seconds...`,\r\n        });\r\n\r\n        const language = detect(TTSPrompt);\r\n        const voice_subject = VOICE_MAP[language[0].lang];\r\n        const target_voice = getRandomVoice(voice_subject).fullName;\r\n\r\n        elizaLogger.log(\"Starting TTS generation with prompt:\", prompt, \"and voice:\", target_voice);\r\n\r\n        try {\r\n            const result = await generateTTS(TTSPrompt, target_voice, runtime);\r\n\r\n            if (result.success && result.data.audio.url) {\r\n                // Download the Audio file\r\n                const response = await fetch(result.data.audio.url);\r\n                const arrayBuffer = await response.arrayBuffer();\r\n                const TTSFileName = `content_cache/tts_${result.data.audio.file_name}`;\r\n\r\n                // ensure the directory is existed\r\n                const directoryPath = path.dirname(TTSFileName);\r\n                if (!fs.existsSync(directoryPath)) {\r\n                    fs.mkdirSync(directoryPath, { recursive: true });\r\n                }\r\n\r\n                // Save Audio file\r\n                fs.writeFileSync(TTSFileName, Buffer.from(arrayBuffer));\r\n\r\n                elizaLogger.log(\"Audio Duration:\", result.data.audio.duration);\r\n                callback(\r\n                    {\r\n                        text: \"TTS Success! Here's your generated audio!\",\r\n                        attachments: [\r\n                            {\r\n                                id: crypto.randomUUID(),\r\n                                url: result.data.audio.url,\r\n                                title: \"TTS Generation\",\r\n                                source: \"TTSGeneration\",\r\n                                description: TTSPrompt,\r\n                                text: TTSPrompt,\r\n                            },\r\n                        ],\r\n                    },\r\n                    [TTSFileName]\r\n                ); // Add the audio file to the attachments\r\n            } else {\r\n                callback({\r\n                    text: `TTS generation failed: ${result.error}`,\r\n                    error: true,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(`Failed to generate TTS. Error: ${error}`);\r\n            callback({\r\n                text: `TTS generation failed: ${error.message}`,\r\n                error: true,\r\n            });\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Generate a TTS of prompt: Hello world!\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"I'll call a TTS to generate an audio based on your input prompt\",\r\n                    action: \"CREATE_TTS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Please do TTS to a prompt: Sam is busy now\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agentName}}\",\r\n                content: {\r\n                    text: \"Ok, please wait for the tts generation~\",\r\n                    action: \"AUDIO_CREATE\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n} as Action;\r\n\r\nexport const TTSGenerationPlugin: Plugin = {\r\n    name: \"TTSGeneration\",\r\n    description: \"Generate TTS using PlayAI tts (v3)\",\r\n    actions: [TTSGeneration],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n","export const FAL_CONSTANTS = {\r\n    API_TTS_ENDPOINT: \"fal-ai/playai/tts/v3\",\r\n    API_KEY_SETTING: \"FAL_API_KEY\", // The setting name to fetch from runtime\r\n};\r\n\r\nexport interface VoiceOption {\r\n    name: string;\r\n    style: \"Conversational\" | \"Narrative\" | \"Advertising\" | \"Meditation\";\r\n    region?: string;\r\n    fullName: string; \r\n  }\r\n\r\nexport const VOICE_MAP: Record<string, VoiceOption[]> = {\r\n    'en': [\r\n    { \r\n    name: \"Jennifer\", \r\n    style: \"Conversational\", \r\n    region: \"US/American\",\r\n    fullName: \"Jennifer (English (US)/American)\"\r\n    },\r\n    { \r\n    name: \"Dexter\", \r\n    style: \"Conversational\", \r\n    region: \"US/American\",\r\n    fullName: \"Dexter (English (US)/American)\"\r\n    },\r\n    { \r\n    name: \"Ava\", \r\n    style: \"Conversational\", \r\n    region: \"AU/Australian\",\r\n    fullName: \"Ava (English (AU)/Australian)\"\r\n    },\r\n    { \r\n    name: \"Tilly\", \r\n    style: \"Conversational\", \r\n    region: \"AU/Australian\",\r\n    fullName: \"Tilly (English (AU)/Australian)\"\r\n    },\r\n    { \r\n    name: \"Charlotte\", \r\n    style: \"Advertising\", \r\n    region: \"CA/Canadian\",\r\n    fullName: \"Charlotte (Advertising) (English (CA)/Canadian)\"\r\n    },\r\n    { \r\n    name: \"Charlotte\", \r\n    style: \"Meditation\", \r\n    region: \"CA/Canadian\",\r\n    fullName: \"Charlotte (Meditation) (English (CA)/Canadian)\"\r\n    },\r\n    { \r\n    name: \"Cecil\", \r\n    style: \"Conversational\", \r\n    region: \"GB/British\",\r\n    fullName: \"Cecil (English (GB)/British)\"\r\n    },\r\n    { \r\n    name: \"Sterling\", \r\n    style: \"Conversational\", \r\n    region: \"GB/British\",\r\n    fullName: \"Sterling (English (GB)/British)\"\r\n    },\r\n    { \r\n    name: \"Cillian\", \r\n    style: \"Conversational\", \r\n    region: \"IE/Irish\",\r\n    fullName: \"Cillian (English (IE)/Irish)\"\r\n    },\r\n    { \r\n    name: \"Madison\", \r\n    style: \"Conversational\", \r\n    region: \"IE/Irish\",\r\n    fullName: \"Madison (English (IE)/Irish)\"\r\n    },\r\n    { \r\n    name: \"Ada\", \r\n    style: \"Conversational\", \r\n    region: \"ZA/South african\",\r\n    fullName: \"Ada (English (ZA)/South african)\"\r\n    },\r\n    { \r\n    name: \"Sumita\", \r\n    style: \"Conversational\", \r\n    region: \"IN/Indian\",\r\n    fullName: \"Sumita (English (IN)/Indian)\"\r\n    },\r\n    { \r\n    name: \"Navya\", \r\n    style: \"Conversational\", \r\n    region: \"IN/Indian\",\r\n    fullName: \"Navya (English (IN)/Indian)\"\r\n    }\r\n        ],\r\n    'ja': [\r\n    { \r\n    name: \"Kiriko\", \r\n    style: \"Conversational\", \r\n    region: \"Japanese\",\r\n    fullName: \"Kiriko Conversational (Japanese/Japanese)\"\r\n    },\r\n    { \r\n    name: \"Kiriko\", \r\n    style: \"Narrative\", \r\n    region: \"Japanese\",\r\n    fullName: \"Kiriko Narrative (Japanese/Japanese)\"\r\n    }\r\n        ],\r\n    'af': [\r\n    { \r\n    name: \"Ronel\", \r\n    style: \"Conversational\", \r\n    region: \"South african\",\r\n    fullName: \"Ronel Conversational (Afrikaans/South african)\"\r\n    },\r\n    { \r\n    name: \"Ronel\", \r\n    style: \"Narrative\", \r\n    region: \"South african\",\r\n    fullName: \"Ronel Narrative (Afrikaans/South african)\"\r\n    }\r\n        ],\r\n    'ar': [\r\n    { \r\n    name: \"Abdo\", \r\n    style: \"Conversational\", \r\n    region: \"Arabic\",\r\n    fullName: \"Abdo Conversational (Arabic/Arabic)\"\r\n    },\r\n    { \r\n    name: \"Abdo\", \r\n    style: \"Narrative\", \r\n    region: \"Arabic\",\r\n    fullName: \"Abdo Narrative (Arabic/Arabic)\"\r\n    }\r\n        ],\r\n    'bn': [\r\n    { \r\n    name: \"Mousmi\", \r\n    style: \"Conversational\", \r\n    region: \"Bengali\",\r\n    fullName: \"Mousmi Conversational (Bengali/Bengali)\"\r\n    },\r\n    { \r\n    name: \"Mousmi\", \r\n    style: \"Narrative\", \r\n    region: \"Bengali\",\r\n    fullName: \"Mousmi Narrative (Bengali/Bengali)\"\r\n    }\r\n        ],\r\n    'pt': [\r\n    { \r\n    name: \"Caroline\", \r\n    style: \"Conversational\", \r\n    region: \"Brazilian\",\r\n    fullName: \"Caroline Conversational (Portuguese (BR)/Brazilian)\"\r\n    },\r\n    { \r\n    name: \"Caroline\", \r\n    style: \"Narrative\", \r\n    region: \"Brazilian\", \r\n    fullName: \"Caroline Narrative (Portuguese (BR)/Brazilian)\"\r\n    }\r\n        ],\r\n    'fr': [\r\n    { \r\n    name: \"Ange\", \r\n    style: \"Conversational\", \r\n    region: \"French\",\r\n    fullName: \"Ange Conversational (French/French)\"\r\n    },\r\n    { \r\n    name: \"Ange\", \r\n    style: \"Narrative\", \r\n    region: \"French\",\r\n    fullName: \"Ange Narrative (French/French)\"\r\n    },\r\n    { \r\n    name: \"Baptiste\", \r\n    style: \"Conversational\", \r\n    region: \"French\",\r\n    fullName: \"Baptiste (English (FR)/French)\"\r\n    }\r\n        ],\r\n    'de': [\r\n        { \r\n            name: \"Anke\", \r\n            style: \"Conversational\", \r\n            region: \"German\",\r\n            fullName: \"Anke Conversational (German/German)\"\r\n        },\r\n        { \r\n            name: \"Anke\", \r\n            style: \"Narrative\", \r\n            region: \"German\",\r\n            fullName: \"Anke Narrative (German/German)\"\r\n        }\r\n        ],\r\n    'es': [\r\n        { \r\n            name: \"Carmen\", \r\n            style: \"Conversational\", \r\n            region: \"Spanish\",\r\n            fullName: \"Carmen Conversational (Spanish/Spanish)\"\r\n        },\r\n        { \r\n            name: \"Patricia\", \r\n            style: \"Conversational\", \r\n            region: \"Spanish\",\r\n            fullName: \"Patricia Conversational (Spanish/Spanish)\"\r\n        }\r\n        ],\r\n    'ko': [\r\n        { \r\n            name: \"Dohee\", \r\n            style: \"Conversational\", \r\n            region: \"Korean\",\r\n            fullName: \"Dohee Conversational (Korean/Korean)\"\r\n        },\r\n        { \r\n            name: \"Dohee\", \r\n            style: \"Narrative\", \r\n            region: \"Korean\",\r\n            fullName: \"Dohee Narrative (Korean/Korean)\"\r\n        }\r\n        ],\r\n    'he': [\r\n    { \r\n      name: \"Mary\", \r\n      style: \"Conversational\", \r\n      region: \"Israeli\",\r\n      fullName: \"Mary Conversational (Hebrew/Israeli)\"\r\n    },\r\n    { \r\n      name: \"Mary\", \r\n      style: \"Narrative\", \r\n      region: \"Israeli\",\r\n      fullName: \"Mary Narrative (Hebrew/Israeli)\"\r\n    }\r\n    ],\r\n    'ru': [\r\n        { \r\n          name: \"Andrei\", \r\n          style: \"Conversational\", \r\n          region: \"Russian\",\r\n          fullName: \"Andrei Conversational (Russian/Russian)\"\r\n        },\r\n        { \r\n          name: \"Andrei\", \r\n          style: \"Narrative\", \r\n          region: \"Russian\",\r\n          fullName: \"Andrei Narrative (Russian/Russian)\"\r\n        }\r\n      ],\r\n    'ne': [\r\n    { \r\n        name: \"Anuj\", \r\n        style: \"Conversational\", \r\n        region: \"Indian\",\r\n        fullName: \"Anuj Conversational (Hindi/Indian)\"\r\n    },\r\n    { \r\n        name: \"Anuj\", \r\n        style: \"Narrative\", \r\n        region: \"Indian\",\r\n        fullName: \"Anuj Narrative (Hindi/Indian)\"\r\n    }\r\n    ],\r\n    'th': [\r\n        { \r\n          name: \"Katbundit\", \r\n          style: \"Conversational\", \r\n          region: \"Thai\",\r\n          fullName: \"Katbundit Conversational (Thai/Thai)\"\r\n        },\r\n        { \r\n          name: \"Katbundit\", \r\n          style: \"Narrative\", \r\n          region: \"Thai\",\r\n          fullName: \"Katbundit Narrative (Thai/Thai)\"\r\n        }\r\n      ],\r\n    'tr': [\r\n    { \r\n        name: \"Ali\", \r\n        style: \"Conversational\", \r\n        region: \"Turkish\",\r\n        fullName: \"Ali Conversational (Turkish/Turkish)\"\r\n    },\r\n    { \r\n        name: \"Ali\", \r\n        style: \"Narrative\", \r\n        region: \"Turkish\",\r\n        fullName: \"Ali Narrative (Turkish/Turkish)\"\r\n    }\r\n    ],\r\n};\r\n\r\nexport const getRandomVoice = (voiceOptions: VoiceOption[]): VoiceOption => {\r\n    const randomIndex = Math.floor(Math.random() * voiceOptions.length);\r\n    return voiceOptions[randomIndex];\r\n  };\r\n"],"mappings":"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","names":["prompt"]}