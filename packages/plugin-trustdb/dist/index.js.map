{"version":3,"sources":["../src/adapters/trustScoreDatabase.ts"],"sourcesContent":["import { Database } from \"better-sqlite3\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport interface Recommender {\r\n    id: string; // UUID\r\n    address: string;\r\n    solanaPubkey?: string;\r\n    telegramId?: string;\r\n    discordId?: string;\r\n    twitterId?: string;\r\n    ip?: string;\r\n}\r\n\r\nexport interface RecommenderMetrics {\r\n    recommenderId: string;\r\n    trustScore: number;\r\n    totalRecommendations: number;\r\n    successfulRecs: number;\r\n    avgTokenPerformance: number;\r\n    riskScore: number;\r\n    consistencyScore: number;\r\n    virtualConfidence: number;\r\n    lastActiveDate: Date;\r\n    trustDecay: number;\r\n    lastUpdated: Date;\r\n}\r\n\r\nexport interface TokenPerformance {\r\n    tokenAddress: string;\r\n    symbol: string;\r\n    priceChange24h: number;\r\n    volumeChange24h: number;\r\n    trade_24h_change: number;\r\n    liquidity: number;\r\n    liquidityChange24h: number;\r\n    holderChange24h: number;\r\n    rugPull: boolean;\r\n    isScam: boolean;\r\n    marketCapChange24h: number;\r\n    sustainedGrowth: boolean;\r\n    rapidDump: boolean;\r\n    suspiciousVolume: boolean;\r\n    validationTrust: number;\r\n    balance: number;\r\n    initialMarketCap: number;\r\n    lastUpdated: Date;\r\n}\r\n\r\nexport interface TokenRecommendation {\r\n    id: string; // UUID\r\n    recommenderId: string;\r\n    tokenAddress: string;\r\n    timestamp: Date;\r\n    initialMarketCap?: number;\r\n    initialLiquidity?: number;\r\n    initialPrice?: number;\r\n}\r\nexport interface RecommenderMetricsHistory {\r\n    historyId: string; // UUID\r\n    recommenderId: string;\r\n    trustScore: number;\r\n    totalRecommendations: number;\r\n    successfulRecs: number;\r\n    avgTokenPerformance: number;\r\n    riskScore: number;\r\n    consistencyScore: number;\r\n    virtualConfidence: number;\r\n    trustDecay: number;\r\n    recordedAt: Date;\r\n}\r\n\r\nexport interface TradePerformance {\r\n    token_address: string;\r\n    recommender_id: string;\r\n    buy_price: number;\r\n    sell_price: number;\r\n    buy_timeStamp: string;\r\n    sell_timeStamp: string;\r\n    buy_amount: number;\r\n    sell_amount: number;\r\n    buy_sol: number;\r\n    received_sol: number;\r\n    buy_value_usd: number;\r\n    sell_value_usd: number;\r\n    profit_usd: number;\r\n    profit_percent: number;\r\n    buy_market_cap: number;\r\n    sell_market_cap: number;\r\n    market_cap_change: number;\r\n    buy_liquidity: number;\r\n    sell_liquidity: number;\r\n    liquidity_change: number;\r\n    last_updated: string;\r\n    rapidDump: boolean;\r\n}\r\n\r\ninterface RecommenderMetricsRow {\r\n    recommender_id: string;\r\n    trust_score: number;\r\n    total_recommendations: number;\r\n    successful_recs: number;\r\n    avg_token_performance: number;\r\n    risk_score: number;\r\n    consistency_score: number;\r\n    virtual_confidence: number;\r\n    last_active_date: Date;\r\n    trust_decay: number;\r\n    last_updated: string;\r\n}\r\n\r\ninterface TokenPerformanceRow {\r\n    token_address: string;\r\n    symbol: string;\r\n    price_change_24h: number;\r\n    volume_change_24h: number;\r\n    trade_24h_change: number;\r\n    liquidity: number;\r\n    liquidity_change_24h: number;\r\n    holder_change_24h: number;\r\n    rug_pull: number;\r\n    is_scam: number;\r\n    market_cap_change24h: number;\r\n    sustained_growth: number;\r\n    rapid_dump: number;\r\n    suspicious_volume: number;\r\n    validation_trust: number;\r\n    balance: number;\r\n    initial_market_cap: number;\r\n    last_updated: string;\r\n}\r\n\r\ninterface Transaction {\r\n    tokenAddress: string;\r\n    transactionHash: string;\r\n    type: \"buy\" | \"sell\";\r\n    amount: number;\r\n    price: number;\r\n    isSimulation: boolean;\r\n    timestamp: string;\r\n}\r\n\r\nexport class TrustScoreDatabase {\r\n    private db: Database;\r\n\r\n    constructor(db: Database) {\r\n        this.db = db;\r\n        // load(db);\r\n        // check if the tables exist, if not create them\r\n        const tables = this.db\r\n            .prepare(\r\n                \"SELECT name FROM sqlite_master WHERE type='table' AND name IN ('recommenders', 'recommender_metrics', 'token_performance', 'token_recommendations', 'recommender_metrics_history');\"\r\n            )\r\n            .all();\r\n        if (tables.length !== 5) {\r\n            this.initializeSchema();\r\n        }\r\n    }\r\n\r\n    private initializeSchema() {\r\n        // Enable Foreign Key Support\r\n        this.db.exec(`PRAGMA foreign_keys = ON;`);\r\n\r\n        // Create Recommenders Table\r\n        this.db.exec(`\r\n            CREATE TABLE IF NOT EXISTS recommenders (\r\n                id TEXT PRIMARY KEY,\r\n                address TEXT UNIQUE NOT NULL,\r\n                solana_pubkey TEXT UNIQUE,\r\n                telegram_id TEXT UNIQUE,\r\n                discord_id TEXT UNIQUE,\r\n                twitter_id TEXT UNIQUE,\r\n                ip TEXT\r\n            );\r\n        `);\r\n\r\n        // Create RecommenderMetrics Table\r\n        this.db.exec(`\r\n            CREATE TABLE IF NOT EXISTS recommender_metrics (\r\n                recommender_id TEXT PRIMARY KEY,\r\n                trust_score REAL DEFAULT 0,\r\n                total_recommendations INTEGER DEFAULT 0,\r\n                successful_recs INTEGER DEFAULT 0,\r\n                avg_token_performance REAL DEFAULT 0,\r\n                risk_score REAL DEFAULT 0,\r\n                consistency_score REAL DEFAULT 0,\r\n                virtual_confidence REAL DEFAULT 0,\r\n                last_active_date DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n                trust_decay REAL DEFAULT 0,\r\n                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n                FOREIGN KEY (recommender_id) REFERENCES recommenders(id) ON DELETE CASCADE\r\n            );\r\n        `);\r\n\r\n        // Create TokenPerformance Table\r\n        this.db.exec(`\r\n            CREATE TABLE IF NOT EXISTS token_performance (\r\n                token_address TEXT PRIMARY KEY,\r\n                symbol TEXT,\r\n                price_change_24h REAL,\r\n                volume_change_24h REAL,\r\n                trade_24h_change REAL,\r\n                liquidity REAL,\r\n                liquidity_change_24h REAL,\r\n                holder_change_24h REAL,\r\n                rug_pull BOOLEAN DEFAULT FALSE,\r\n                is_scam BOOLEAN DEFAULT FALSE,\r\n                market_cap_change24h REAL,\r\n                sustained_growth BOOLEAN DEFAULT FALSE,\r\n                rapid_dump BOOLEAN DEFAULT FALSE,\r\n                suspicious_volume BOOLEAN DEFAULT FALSE,\r\n                validation_trust REAL DEFAULT 0,\r\n                balance REAL DEFAULT 0,\r\n                initial_market_cap REAL DEFAULT 0,\r\n                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP\r\n            );\r\n        `);\r\n\r\n        // Create TokenRecommendations Table\r\n        this.db.exec(`\r\n            CREATE TABLE IF NOT EXISTS token_recommendations (\r\n                id TEXT PRIMARY KEY,\r\n                recommender_id TEXT NOT NULL,\r\n                token_address TEXT NOT NULL,\r\n                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n                initial_market_cap REAL,\r\n                initial_liquidity REAL,\r\n                initial_price REAL,\r\n                FOREIGN KEY (recommender_id) REFERENCES recommenders(id) ON DELETE CASCADE,\r\n                FOREIGN KEY (token_address) REFERENCES token_performance(token_address) ON DELETE CASCADE\r\n            );\r\n        `);\r\n\r\n        // ----- Create RecommenderMetricsHistory Table -----\r\n        this.db.exec(`\r\n         CREATE TABLE IF NOT EXISTS recommender_metrics_history (\r\n             history_id TEXT PRIMARY KEY,\r\n             recommender_id TEXT NOT NULL,\r\n             trust_score REAL,\r\n             total_recommendations INTEGER,\r\n             successful_recs INTEGER,\r\n             avg_token_performance REAL,\r\n             risk_score REAL,\r\n             consistency_score REAL,\r\n             virtual_confidence REAL DEFAULT 0,\r\n             recorded_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n             FOREIGN KEY (recommender_id) REFERENCES recommenders(id) ON DELETE CASCADE\r\n         );\r\n     `);\r\n\r\n        // ----- Create TradePerformance Tables -----\r\n        this.db.exec(`\r\n        CREATE TABLE IF NOT EXISTS trade (\r\n            token_address TEXT NOT NULL,\r\n            recommender_id TEXT NOT NULL,\r\n            sell_recommender_id TEXT,\r\n            buy_price REAL NOT NULL,\r\n            sell_price REAL,\r\n            buy_timeStamp TEXT NOT NULL,\r\n            sell_timeStamp TEXT,\r\n            buy_amount REAL NOT NULL,\r\n            sell_amount REAL,\r\n            buy_sol REAL NOT NULL,\r\n            received_sol REAL,\r\n            buy_value_usd REAL NOT NULL,\r\n            sell_value_usd REAL,\r\n            profit_usd REAL,\r\n            profit_percent REAL,\r\n            buy_market_cap REAL NOT NULL,\r\n            sell_market_cap REAL,\r\n            market_cap_change REAL,\r\n            buy_liquidity REAL NOT NULL,\r\n            sell_liquidity REAL,\r\n            liquidity_change REAL,\r\n            last_updated TEXT DEFAULT (datetime('now')),\r\n            rapidDump BOOLEAN DEFAULT FALSE,\r\n            PRIMARY KEY (token_address, recommender_id, buy_timeStamp),\r\n            FOREIGN KEY (token_address) REFERENCES token_performance(token_address) ON DELETE CASCADE,\r\n            FOREIGN KEY (recommender_id) REFERENCES recommenders(id) ON DELETE CASCADE\r\n        );\r\n    `);\r\n        // create trade simulation table\r\n        this.db.exec(`\r\n      CREATE TABLE IF NOT EXISTS simulation_trade (\r\n          token_address TEXT NOT NULL,\r\n          recommender_id TEXT NOT NULL,\r\n          buy_price REAL NOT NULL,\r\n          sell_price REAL,\r\n          buy_timeStamp TEXT NOT NULL,\r\n          sell_timeStamp TEXT,\r\n          buy_amount REAL NOT NULL,\r\n          sell_amount REAL,\r\n          buy_sol REAL NOT NULL,\r\n          received_sol REAL,\r\n          buy_value_usd REAL NOT NULL,\r\n          sell_value_usd REAL,\r\n          profit_usd REAL,\r\n          profit_percent REAL,\r\n          buy_market_cap REAL NOT NULL,\r\n          sell_market_cap REAL,\r\n          market_cap_change REAL,\r\n          buy_liquidity REAL NOT NULL,\r\n          sell_liquidity REAL,\r\n          liquidity_change REAL,\r\n          last_updated TEXT DEFAULT (datetime('now')),\r\n          rapidDump BOOLEAN DEFAULT FALSE,\r\n          PRIMARY KEY (token_address, recommender_id, buy_timeStamp),\r\n          FOREIGN KEY (token_address) REFERENCES token_performance(token_address) ON DELETE CASCADE,\r\n          FOREIGN KEY (recommender_id) REFERENCES recommenders(id) ON DELETE CASCADE\r\n      );\r\n  `);\r\n\r\n        // create transactions table\r\n        this.db.exec(`\r\n        CREATE TABLE IF NOT EXISTS transactions (\r\n            token_address TEXT NOT NULL,\r\n            transaction_hash TEXT PRIMARY KEY,\r\n            type TEXT NOT NULL,\r\n            amount REAL NOT NULL,\r\n            price REAL NOT NULL,\r\n            timestamp TEXT NOT NULL,\r\n            is_simulation BOOLEAN DEFAULT FALSE,\r\n            FOREIGN KEY (token_address) REFERENCES token_performance(token_address) ON DELETE CASCADE\r\n        );\r\n    `);\r\n    }\r\n\r\n    /**\r\n     * Adds a new recommender to the database.\r\n     * @param recommender Recommender object\r\n     * @returns boolean indicating success\r\n     */\r\n    addRecommender(recommender: Recommender): string | null {\r\n        const sql = `\r\n            INSERT INTO recommenders (id, address, solana_pubkey, telegram_id, discord_id, twitter_id, ip)\r\n            VALUES (?, ?, ?, ?, ?, ?, ?)\r\n            ON CONFLICT(address) DO NOTHING;\r\n        `;\r\n        try {\r\n            const id = recommender.id || uuidv4();\r\n            const result = this.db\r\n                .prepare(sql)\r\n                .run(\r\n                    id,\r\n                    recommender.address,\r\n                    recommender.solanaPubkey || null,\r\n                    recommender.telegramId || null,\r\n                    recommender.discordId || null,\r\n                    recommender.twitterId || null,\r\n                    recommender.ip || null\r\n                );\r\n            return result.changes > 0 ? id : null;\r\n        } catch (error) {\r\n            console.error(\"Error adding recommender:\", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a recommender by any identifier.\r\n     * @param identifier Any of the recommender's identifiers\r\n     * @returns Recommender object or null\r\n     */\r\n    getRecommender(identifier: string): Recommender | null {\r\n        const sql = `\r\n            SELECT * FROM recommenders\r\n            WHERE id = ? OR address = ? OR solana_pubkey = ? OR telegram_id = ? OR discord_id = ? OR twitter_id = ?;\r\n        `;\r\n        const recommender = this.db\r\n            .prepare(sql)\r\n            .get(\r\n                identifier,\r\n                identifier,\r\n                identifier,\r\n                identifier,\r\n                identifier,\r\n                identifier\r\n            ) as Recommender | undefined;\r\n        return recommender || null;\r\n    }\r\n\r\n    /**\r\n     * Retrieves an existing recommender or creates a new one if not found.\r\n     * Also initializes metrics for the recommender if they haven't been initialized yet.\r\n     * @param recommender Recommender object containing at least one identifier\r\n     * @returns Recommender object with all details, or null if failed\r\n     */\r\n    getOrCreateRecommender(recommender: Recommender): Recommender | null {\r\n        try {\r\n            // Begin a transaction\r\n            const transaction = this.db.transaction(() => {\r\n                // Attempt to retrieve the recommender\r\n                const existingRecommender = this.getRecommender(\r\n                    recommender.address\r\n                );\r\n                if (existingRecommender) {\r\n                    // Recommender exists, ensure metrics are initialized\r\n                    this.initializeRecommenderMetrics(existingRecommender.id!);\r\n                    return existingRecommender;\r\n                }\r\n\r\n                // Recommender does not exist, create a new one\r\n                const newRecommenderId = this.addRecommender(recommender);\r\n                if (!newRecommenderId) {\r\n                    throw new Error(\"Failed to add new recommender.\");\r\n                }\r\n\r\n                // Initialize metrics for the new recommender\r\n                const metricsInitialized =\r\n                    this.initializeRecommenderMetrics(newRecommenderId);\r\n                if (!metricsInitialized) {\r\n                    throw new Error(\r\n                        \"Failed to initialize recommender metrics.\"\r\n                    );\r\n                }\r\n\r\n                // Retrieve and return the newly created recommender\r\n                const newRecommender = this.getRecommender(newRecommenderId);\r\n                if (!newRecommender) {\r\n                    throw new Error(\r\n                        \"Failed to retrieve the newly created recommender.\"\r\n                    );\r\n                }\r\n\r\n                return newRecommender;\r\n            });\r\n\r\n            // Execute the transaction and return the recommender\r\n            const recommenderResult = transaction();\r\n            return recommenderResult;\r\n        } catch (error) {\r\n            console.error(\"Error in getOrCreateRecommender:\", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves an existing recommender or creates a new one if not found.\r\n     * Also initializes metrics for the recommender if they haven't been initialized yet.\r\n     * @param discordId Discord ID of the recommender\r\n     * @returns Recommender object with all details, or null if failed\r\n     */\r\n\r\n    async getOrCreateRecommenderWithDiscordId(\r\n        discordId: string\r\n    ): Promise<Recommender | null> {\r\n        try {\r\n            // Begin a transaction\r\n            const transaction = this.db.transaction(() => {\r\n                // Attempt to retrieve the recommender\r\n                const existingRecommender = this.getRecommender(discordId);\r\n                if (existingRecommender) {\r\n                    // Recommender exists, ensure metrics are initialized\r\n                    this.initializeRecommenderMetrics(existingRecommender.id!);\r\n                    return existingRecommender;\r\n                }\r\n\r\n                // Recommender does not exist, create a new one\r\n                const newRecommender = {\r\n                    id: uuidv4(),\r\n                    address: discordId,\r\n                    discordId: discordId,\r\n                };\r\n                const newRecommenderId = this.addRecommender(newRecommender);\r\n                if (!newRecommenderId) {\r\n                    throw new Error(\"Failed to add new recommender.\");\r\n                }\r\n\r\n                // Initialize metrics for the new recommender\r\n                const metricsInitialized =\r\n                    this.initializeRecommenderMetrics(newRecommenderId);\r\n                if (!metricsInitialized) {\r\n                    throw new Error(\r\n                        \"Failed to initialize recommender metrics.\"\r\n                    );\r\n                }\r\n\r\n                // Retrieve and return the newly created recommender\r\n                const recommender = this.getRecommender(newRecommenderId);\r\n                if (!recommender) {\r\n                    throw new Error(\r\n                        \"Failed to retrieve the newly created recommender.\"\r\n                    );\r\n                }\r\n\r\n                return recommender;\r\n            });\r\n\r\n            // Execute the transaction and return the recommender\r\n            const recommenderResult = transaction();\r\n            return recommenderResult;\r\n        } catch (error) {\r\n            console.error(\r\n                \"Error in getOrCreateRecommenderWithDiscordId:\",\r\n                error\r\n            );\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves an existing recommender or creates a new one if not found.\r\n     * Also initializes metrics for the recommender if they haven't been initialized yet.\r\n     * @param telegramId Telegram ID of the recommender\r\n     * @returns Recommender object with all details, or null if failed\r\n     */\r\n\r\n    async getOrCreateRecommenderWithTelegramId(\r\n        telegramId: string\r\n    ): Promise<Recommender | null> {\r\n        try {\r\n            // Begin a transaction\r\n            const transaction = this.db.transaction(() => {\r\n                // Attempt to retrieve the recommender\r\n                const existingRecommender = this.getRecommender(telegramId);\r\n                if (existingRecommender) {\r\n                    // Recommender exists, ensure metrics are initialized\r\n                    this.initializeRecommenderMetrics(existingRecommender.id!);\r\n                    return existingRecommender;\r\n                }\r\n\r\n                // Recommender does not exist, create a new one\r\n                const newRecommender = {\r\n                    id: uuidv4(),\r\n                    address: telegramId,\r\n                    telegramId: telegramId,\r\n                };\r\n                const newRecommenderId = this.addRecommender(newRecommender);\r\n                if (!newRecommenderId) {\r\n                    throw new Error(\"Failed to add new recommender.\");\r\n                }\r\n\r\n                // Initialize metrics for the new recommender\r\n                const metricsInitialized =\r\n                    this.initializeRecommenderMetrics(newRecommenderId);\r\n                if (!metricsInitialized) {\r\n                    throw new Error(\r\n                        \"Failed to initialize recommender metrics.\"\r\n                    );\r\n                }\r\n\r\n                // Retrieve and return the newly created recommender\r\n                const recommender = this.getRecommender(newRecommenderId);\r\n                if (!recommender) {\r\n                    throw new Error(\r\n                        \"Failed to retrieve the newly created recommender.\"\r\n                    );\r\n                }\r\n\r\n                return recommender;\r\n            });\r\n\r\n            // Execute the transaction and return the recommender\r\n            const recommenderResult = transaction();\r\n            return recommenderResult;\r\n        } catch (error) {\r\n            console.error(\r\n                \"Error in getOrCreateRecommenderWithTelegramId:\",\r\n                error\r\n            );\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes metrics for a recommender if not present.\r\n     * @param recommenderId Recommender's UUID\r\n     */\r\n    initializeRecommenderMetrics(recommenderId: string): boolean {\r\n        const sql = `\r\n            INSERT OR IGNORE INTO recommender_metrics (recommender_id)\r\n            VALUES (?);\r\n        `;\r\n        try {\r\n            const result = this.db.prepare(sql).run(recommenderId);\r\n            return result.changes > 0;\r\n        } catch (error) {\r\n            console.error(\"Error initializing recommender metrics:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves metrics for a recommender.\r\n     * @param recommenderId Recommender's UUID\r\n     * @returns RecommenderMetrics object or null\r\n     */\r\n    getRecommenderMetrics(recommenderId: string): RecommenderMetrics | null {\r\n        const sql = `SELECT * FROM recommender_metrics WHERE recommender_id = ?;`;\r\n        const row = this.db.prepare(sql).get(recommenderId) as\r\n            | RecommenderMetricsRow\r\n            | undefined;\r\n        if (!row) return null;\r\n\r\n        return {\r\n            recommenderId: row.recommender_id,\r\n            trustScore: row.trust_score,\r\n            totalRecommendations: row.total_recommendations,\r\n            successfulRecs: row.successful_recs,\r\n            avgTokenPerformance: row.avg_token_performance,\r\n            riskScore: row.risk_score,\r\n            consistencyScore: row.consistency_score,\r\n            virtualConfidence: row.virtual_confidence,\r\n            lastActiveDate: row.last_active_date,\r\n            trustDecay: row.trust_decay,\r\n            lastUpdated: new Date(row.last_updated),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Logs the current metrics of a recommender into the history table.\r\n     * @param recommenderId Recommender's UUID\r\n     */\r\n    logRecommenderMetricsHistory(recommenderId: string): void {\r\n        // Retrieve current metrics\r\n        const currentMetrics = this.getRecommenderMetrics(recommenderId);\r\n        if (!currentMetrics) {\r\n            console.warn(\r\n                `No metrics found for recommender ID: ${recommenderId}`\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Create a history entry\r\n        const history: RecommenderMetricsHistory = {\r\n            historyId: uuidv4(),\r\n            recommenderId: currentMetrics.recommenderId,\r\n            trustScore: currentMetrics.trustScore,\r\n            totalRecommendations: currentMetrics.totalRecommendations,\r\n            successfulRecs: currentMetrics.successfulRecs,\r\n            avgTokenPerformance: currentMetrics.avgTokenPerformance,\r\n            riskScore: currentMetrics.riskScore,\r\n            consistencyScore: currentMetrics.consistencyScore,\r\n            virtualConfidence: currentMetrics.virtualConfidence,\r\n            trustDecay: currentMetrics.trustDecay,\r\n            recordedAt: new Date(), // Current timestamp\r\n        };\r\n\r\n        // Insert into recommender_metrics_history table\r\n        const sql = `\r\n            INSERT INTO recommender_metrics_history (\r\n                history_id,\r\n                recommender_id,\r\n                trust_score,\r\n                total_recommendations,\r\n                successful_recs,\r\n                avg_token_performance,\r\n                risk_score,\r\n                consistency_score,\r\n                recorded_at\r\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);\r\n        `;\r\n        try {\r\n            this.db\r\n                .prepare(sql)\r\n                .run(\r\n                    history.historyId,\r\n                    history.recommenderId,\r\n                    history.trustScore,\r\n                    history.totalRecommendations,\r\n                    history.successfulRecs,\r\n                    history.avgTokenPerformance,\r\n                    history.riskScore,\r\n                    history.consistencyScore,\r\n                    history.recordedAt.toISOString()\r\n                );\r\n            console.log(\r\n                `Logged metrics history for recommender ID: ${recommenderId}`\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Error logging recommender metrics history:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates metrics for a recommender.\r\n     * @param metrics RecommenderMetrics object\r\n     */\r\n    updateRecommenderMetrics(metrics: RecommenderMetrics): void {\r\n        // Log current metrics before updating\r\n        this.logRecommenderMetricsHistory(metrics.recommenderId);\r\n\r\n        const sql = `\r\n            UPDATE recommender_metrics\r\n            SET trust_score = ?,\r\n                total_recommendations = ?,\r\n                successful_recs = ?,\r\n                avg_token_performance = ?,\r\n                risk_score = ?,\r\n                consistency_score = ?,\r\n                last_updated = CURRENT_TIMESTAMP\r\n            WHERE recommender_id = ?;\r\n        `;\r\n        try {\r\n            this.db\r\n                .prepare(sql)\r\n                .run(\r\n                    metrics.trustScore,\r\n                    metrics.totalRecommendations,\r\n                    metrics.successfulRecs,\r\n                    metrics.avgTokenPerformance,\r\n                    metrics.riskScore,\r\n                    metrics.consistencyScore,\r\n                    metrics.recommenderId\r\n                );\r\n            console.log(\r\n                `Updated metrics for recommender ID: ${metrics.recommenderId}`\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Error updating recommender metrics:\", error);\r\n        }\r\n    }\r\n\r\n    // ----- TokenPerformance Methods -----\r\n\r\n    /**\r\n     * Adds or updates token performance metrics.\r\n     * @param performance TokenPerformance object\r\n     */\r\n    upsertTokenPerformance(performance: TokenPerformance): boolean {\r\n        const validationTrust = this.calculateValidationTrust(\r\n            performance.tokenAddress\r\n        );\r\n\r\n        const sql = `\r\n            INSERT INTO token_performance (\r\n                token_address,\r\n                price_change_24h,\r\n                volume_change_24h,\r\n                trade_24h_change,\r\n                liquidity,\r\n                liquidity_change_24h,\r\n                holder_change_24h,\r\n                rug_pull,\r\n                is_scam,\r\n                market_cap_change24h,\r\n                sustained_growth,\r\n                rapid_dump,\r\n                suspicious_volume,\r\n                validation_trust,\r\n                balance,\r\n                initial_market_cap,\r\n                last_updated\r\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\r\n            ON CONFLICT(token_address) DO UPDATE SET\r\n                price_change_24h = excluded.price_change_24h,\r\n                volume_change_24h = excluded.volume_change_24h,\r\n                trade_24h_change = excluded.trade_24h_change,\r\n                liquidity = excluded.liquidity,\r\n                liquidity_change_24h = excluded.liquidity_change_24h,\r\n                holder_change_24h = excluded.holder_change_24h,\r\n                rug_pull = excluded.rug_pull,\r\n                is_scam = excluded.is_scam,\r\n                market_cap_change24h = excluded.market_cap_change24h,\r\n                sustained_growth = excluded.sustained_growth,\r\n                rapid_dump = excluded.rapid_dump,\r\n                suspicious_volume = excluded.suspicious_volume,\r\n                validation_trust = excluded.validation_trust,\r\n                balance = excluded.balance,\r\n                initial_market_cap = excluded.initial_market_cap,\r\n                last_updated = CURRENT_TIMESTAMP;\r\n        `;\r\n        try {\r\n            this.db.prepare(sql).run(\r\n                performance.tokenAddress,\r\n                performance.priceChange24h,\r\n                performance.volumeChange24h,\r\n                performance.trade_24h_change,\r\n                performance.liquidity,\r\n                performance.liquidityChange24h,\r\n                performance.holderChange24h, // Ensure column name matches schema\r\n                performance.rugPull ? 1 : 0,\r\n                performance.isScam ? 1 : 0,\r\n                performance.marketCapChange24h,\r\n                performance.sustainedGrowth ? 1 : 0,\r\n                performance.rapidDump ? 1 : 0,\r\n                performance.suspiciousVolume ? 1 : 0,\r\n                performance.balance,\r\n                performance.initialMarketCap,\r\n                validationTrust\r\n            );\r\n            console.log(\r\n                `Upserted token performance for ${performance.tokenAddress}`\r\n            );\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error upserting token performance:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // update token balance\r\n\r\n    updateTokenBalance(tokenAddress: string, balance: number): boolean {\r\n        const sql = `\r\n            UPDATE token_performance\r\n            SET balance = ?,\r\n                last_updated = CURRENT_TIMESTAMP\r\n            WHERE token_address = ?;\r\n        `;\r\n        try {\r\n            this.db.prepare(sql).run(balance, tokenAddress);\r\n            console.log(`Updated token balance for ${tokenAddress}`);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error updating token balance:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves token performance metrics.\r\n     * @param tokenAddress Token's address\r\n     * @returns TokenPerformance object or null\r\n     */\r\n    getTokenPerformance(tokenAddress: string): TokenPerformance | null {\r\n        const sql = `SELECT * FROM token_performance WHERE token_address = ?;`;\r\n        const row = this.db.prepare(sql).get(tokenAddress) as\r\n            | TokenPerformanceRow\r\n            | undefined;\r\n        if (!row) return null;\r\n\r\n        return {\r\n            tokenAddress: row.token_address,\r\n            symbol: row.symbol,\r\n            priceChange24h: row.price_change_24h,\r\n            volumeChange24h: row.volume_change_24h,\r\n            trade_24h_change: row.trade_24h_change,\r\n            liquidity: row.liquidity,\r\n            liquidityChange24h: row.liquidity_change_24h,\r\n            holderChange24h: row.holder_change_24h,\r\n            rugPull: row.rug_pull === 1,\r\n            isScam: row.is_scam === 1,\r\n            marketCapChange24h: row.market_cap_change24h,\r\n            sustainedGrowth: row.sustained_growth === 1,\r\n            rapidDump: row.rapid_dump === 1,\r\n            suspiciousVolume: row.suspicious_volume === 1,\r\n            validationTrust: row.validation_trust,\r\n            balance: row.balance,\r\n            initialMarketCap: row.initial_market_cap,\r\n            lastUpdated: new Date(row.last_updated),\r\n        };\r\n    }\r\n\r\n    //getTokenBalance\r\n    getTokenBalance(tokenAddress: string): number {\r\n        const sql = `SELECT balance FROM token_performance WHERE token_address = ?;`;\r\n        const row = this.db.prepare(sql).get(tokenAddress) as {\r\n            balance: number;\r\n        };\r\n        return row.balance;\r\n    }\r\n\r\n    getAllTokenPerformancesWithBalance(): TokenPerformance[] {\r\n        const sql = `SELECT * FROM token_performance WHERE balance > 0;`;\r\n        const rows = this.db.prepare(sql).all() as TokenPerformanceRow[];\r\n\r\n        return rows.map((row) => ({\r\n            tokenAddress: row.token_address,\r\n            symbol: row.symbol,\r\n            priceChange24h: row.price_change_24h,\r\n            volumeChange24h: row.volume_change_24h,\r\n            trade_24h_change: row.trade_24h_change,\r\n            liquidity: row.liquidity,\r\n            liquidityChange24h: row.liquidity_change_24h,\r\n            holderChange24h: row.holder_change_24h,\r\n            rugPull: row.rug_pull === 1,\r\n            isScam: row.is_scam === 1,\r\n            marketCapChange24h: row.market_cap_change24h,\r\n            sustainedGrowth: row.sustained_growth === 1,\r\n            rapidDump: row.rapid_dump === 1,\r\n            suspiciousVolume: row.suspicious_volume === 1,\r\n            validationTrust: row.validation_trust,\r\n            balance: row.balance,\r\n            initialMarketCap: row.initial_market_cap,\r\n            lastUpdated: new Date(row.last_updated),\r\n        }));\r\n    }\r\n\r\n    // ----- TokenRecommendations Methods -----\r\n\r\n    /**\r\n     * Calculates the average trust score of all recommenders who have recommended a specific token.\r\n     * @param tokenAddress The address of the token.\r\n     * @returns The average trust score (validationTrust).\r\n     */\r\n    calculateValidationTrust(tokenAddress: string): number {\r\n        const sql = `\r\n        SELECT rm.trust_score\r\n        FROM token_recommendations tr\r\n        JOIN recommender_metrics rm ON tr.recommender_id = rm.recommender_id\r\n        WHERE tr.token_address = ?;\r\n    `;\r\n        const rows = this.db.prepare(sql).all(tokenAddress) as Array<{\r\n            trust_score: number;\r\n        }>;\r\n\r\n        if (rows.length === 0) return 0; // No recommendations found\r\n\r\n        const totalTrust = rows.reduce((acc, row) => acc + row.trust_score, 0);\r\n        const averageTrust = totalTrust / rows.length;\r\n        return averageTrust;\r\n    }\r\n\r\n    /**\r\n     * Adds a new token recommendation.\r\n     * @param recommendation TokenRecommendation object\r\n     * @returns boolean indicating success\r\n     */\r\n    addTokenRecommendation(recommendation: TokenRecommendation): boolean {\r\n        const sql = `\r\n            INSERT INTO token_recommendations (\r\n                id,\r\n                recommender_id,\r\n                token_address,\r\n                timestamp,\r\n                initial_market_cap,\r\n                initial_liquidity,\r\n                initial_price\r\n            ) VALUES (?, ?, ?, ?, ?, ?, ?);\r\n        `;\r\n        try {\r\n            this.db\r\n                .prepare(sql)\r\n                .run(\r\n                    recommendation.id || uuidv4(),\r\n                    recommendation.recommenderId,\r\n                    recommendation.tokenAddress,\r\n                    recommendation.timestamp || new Date(),\r\n                    recommendation.initialMarketCap || null,\r\n                    recommendation.initialLiquidity || null,\r\n                    recommendation.initialPrice || null\r\n                );\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error adding token recommendation:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all recommendations made by a recommender.\r\n     * @param recommenderId Recommender's UUID\r\n     * @returns Array of TokenRecommendation objects\r\n     */\r\n    getRecommendationsByRecommender(\r\n        recommenderId: string\r\n    ): TokenRecommendation[] {\r\n        const sql = `SELECT * FROM token_recommendations WHERE recommender_id = ? ORDER BY timestamp DESC;`;\r\n        const rows = this.db.prepare(sql).all(recommenderId) as Array<{\r\n            id: string;\r\n            recommender_id: string;\r\n            token_address: string;\r\n            timestamp: string;\r\n            initial_market_cap: number | null;\r\n            initial_liquidity: number | null;\r\n            initial_price: number | null;\r\n        }>;\r\n\r\n        return rows.map((row) => ({\r\n            id: row.id,\r\n            recommenderId: row.recommender_id,\r\n            tokenAddress: row.token_address,\r\n            timestamp: new Date(row.timestamp),\r\n            initialMarketCap: row.initial_market_cap,\r\n            initialLiquidity: row.initial_liquidity,\r\n            initialPrice: row.initial_price,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Retrieves all recommendations for a specific token.\r\n     * @param tokenAddress Token's address\r\n     * @returns Array of TokenRecommendation objects\r\n     */\r\n    getRecommendationsByToken(tokenAddress: string): TokenRecommendation[] {\r\n        const sql = `SELECT * FROM token_recommendations WHERE token_address = ? ORDER BY timestamp DESC;`;\r\n        const rows = this.db.prepare(sql).all(tokenAddress) as Array<{\r\n            id: string;\r\n            recommender_id: string;\r\n            token_address: string;\r\n            timestamp: string;\r\n            initial_market_cap: number | null;\r\n            initial_liquidity: number | null;\r\n            initial_price: number | null;\r\n        }>;\r\n\r\n        return rows.map((row) => ({\r\n            id: row.id,\r\n            recommenderId: row.recommender_id,\r\n            tokenAddress: row.token_address,\r\n            timestamp: new Date(row.timestamp),\r\n            initialMarketCap: row.initial_market_cap ?? undefined,\r\n            initialLiquidity: row.initial_liquidity ?? undefined,\r\n            initialPrice: row.initial_price ?? undefined,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Retrieves all recommendations within a specific timeframe.\r\n     * @param startDate Start date\r\n     * @param endDate End date\r\n     * @returns Array of TokenRecommendation objects\r\n     */\r\n    getRecommendationsByDateRange(\r\n        startDate: Date,\r\n        endDate: Date\r\n    ): TokenRecommendation[] {\r\n        const sql = `\r\n            SELECT * FROM token_recommendations\r\n            WHERE timestamp BETWEEN ? AND ?\r\n            ORDER BY timestamp DESC;\r\n        `;\r\n        const rows = this.db\r\n            .prepare(sql)\r\n            .all(startDate.toISOString(), endDate.toISOString()) as Array<{\r\n            id: string;\r\n            recommender_id: string;\r\n            token_address: string;\r\n            timestamp: string;\r\n            initial_market_cap: number | null;\r\n            initial_liquidity: number | null;\r\n            initial_price: number | null;\r\n        }>;\r\n\r\n        return rows.map((row) => ({\r\n            id: row.id,\r\n            recommenderId: row.recommender_id,\r\n            tokenAddress: row.token_address,\r\n            timestamp: new Date(row.timestamp),\r\n            initialMarketCap: row.initial_market_cap ?? undefined,\r\n            initialLiquidity: row.initial_liquidity ?? undefined,\r\n            initialPrice: row.initial_price ?? undefined,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Retrieves historical metrics for a recommender.\r\n     * @param recommenderId Recommender's UUID\r\n     * @returns Array of RecommenderMetricsHistory objects\r\n     */\r\n    getRecommenderMetricsHistory(\r\n        recommenderId: string\r\n    ): RecommenderMetricsHistory[] {\r\n        const sql = `\r\n          SELECT * FROM recommender_metrics_history\r\n          WHERE recommender_id = ?\r\n          ORDER BY recorded_at DESC;\r\n      `;\r\n        const rows = this.db.prepare(sql).all(recommenderId) as Array<{\r\n            history_id: string;\r\n            recommender_id: string;\r\n            trust_score: number;\r\n            total_recommendations: number;\r\n            successful_recs: number;\r\n            avg_token_performance: number;\r\n            risk_score: number;\r\n            consistency_score: number;\r\n            virtual_confidence: number;\r\n            trust_decay: number;\r\n            recorded_at: string;\r\n        }>;\r\n\r\n        return rows.map((row) => ({\r\n            historyId: row.history_id,\r\n            recommenderId: row.recommender_id,\r\n            trustScore: row.trust_score,\r\n            totalRecommendations: row.total_recommendations,\r\n            successfulRecs: row.successful_recs,\r\n            avgTokenPerformance: row.avg_token_performance,\r\n            riskScore: row.risk_score,\r\n            consistencyScore: row.consistency_score,\r\n            virtualConfidence: row.virtual_confidence,\r\n            trustDecay: row.trust_decay,\r\n            recordedAt: new Date(row.recorded_at),\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Inserts a new trade performance into the specified table.\r\n     * @param trade The TradePerformance object containing trade details.\r\n     * @param isSimulation Whether the trade is a simulation. If true, inserts into simulation_trade; otherwise, into trade.\r\n     * @returns boolean indicating success.\r\n     */\r\n    addTradePerformance(\r\n        trade: TradePerformance,\r\n        isSimulation: boolean\r\n    ): boolean {\r\n        const tableName = isSimulation ? \"simulation_trade\" : \"trade\";\r\n        const sql = `\r\n      INSERT INTO ${tableName} (\r\n          token_address,\r\n          recommender_id,\r\n          buy_price,\r\n          sell_price,\r\n          buy_timeStamp,\r\n          sell_timeStamp,\r\n          buy_amount,\r\n          sell_amount,\r\n          buy_sol,\r\n          received_sol,\r\n          buy_value_usd,\r\n          sell_value_usd,\r\n          profit_usd,\r\n          profit_percent,\r\n          buy_market_cap,\r\n          sell_market_cap,\r\n          market_cap_change,\r\n          buy_liquidity,\r\n          sell_liquidity,\r\n          liquidity_change,\r\n          last_updated,\r\n          rapidDump\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\r\n  `;\r\n        try {\r\n            this.db\r\n                .prepare(sql)\r\n                .run(\r\n                    trade.token_address,\r\n                    trade.recommender_id,\r\n                    trade.buy_price,\r\n                    trade.sell_price || null,\r\n                    trade.buy_timeStamp,\r\n                    trade.sell_timeStamp || null,\r\n                    trade.buy_amount,\r\n                    trade.sell_amount || null,\r\n                    trade.buy_sol,\r\n                    trade.received_sol || null,\r\n                    trade.buy_value_usd,\r\n                    trade.sell_value_usd || null,\r\n                    trade.profit_usd || null,\r\n                    trade.profit_percent || null,\r\n                    trade.buy_market_cap,\r\n                    trade.sell_market_cap || null,\r\n                    trade.market_cap_change || null,\r\n                    trade.buy_liquidity,\r\n                    trade.sell_liquidity || null,\r\n                    trade.liquidity_change || null,\r\n                    trade.last_updated || new Date().toISOString(),\r\n                    trade.rapidDump ? 1 : 0\r\n                );\r\n            console.log(`Inserted trade into ${tableName}:`, trade);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`Error inserting trade into ${tableName}:`, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates an existing trade with sell details.\r\n     * @param tokenAddress The address of the token.\r\n     * @param recommenderId The UUID of the recommender.\r\n     * @param buyTimeStamp The timestamp when the buy occurred.\r\n     * @param sellDetails An object containing sell-related details.\r\n     * @param isSimulation Whether the trade is a simulation. If true, updates in simulation_trade; otherwise, in trade.\r\n     * @returns boolean indicating success.\r\n     */\r\n\r\n    updateTradePerformanceOnSell(\r\n        tokenAddress: string,\r\n        recommenderId: string,\r\n        buyTimeStamp: string,\r\n        sellDetails: {\r\n            sell_price: number;\r\n            sell_timeStamp: string;\r\n            sell_amount: number;\r\n            received_sol: number;\r\n            sell_value_usd: number;\r\n            profit_usd: number;\r\n            profit_percent: number;\r\n            sell_market_cap: number;\r\n            market_cap_change: number;\r\n            sell_liquidity: number;\r\n            liquidity_change: number;\r\n            rapidDump: boolean;\r\n            sell_recommender_id: string | null;\r\n        },\r\n        isSimulation: boolean\r\n    ): boolean {\r\n        const tableName = isSimulation ? \"simulation_trade\" : \"trade\";\r\n        const sql = `\r\n        UPDATE ${tableName}\r\n        SET\r\n            sell_price = ?,\r\n            sell_timeStamp = ?,\r\n            sell_amount = ?,\r\n            received_sol = ?,\r\n            sell_value_usd = ?,\r\n            profit_usd = ?,\r\n            profit_percent = ?,\r\n            sell_market_cap = ?,\r\n            market_cap_change = ?,\r\n            sell_liquidity = ?,\r\n            liquidity_change = ?,\r\n            rapidDump = ?,\r\n            sell_recommender_id = ?\r\n        WHERE\r\n            token_address = ? AND\r\n            recommender_id = ? AND\r\n            buy_timeStamp = ?;\r\n    `;\r\n        try {\r\n            const result = this.db.prepare(sql).run(\r\n                sellDetails.sell_price,\r\n                sellDetails.sell_timeStamp,\r\n                sellDetails.sell_amount,\r\n                sellDetails.received_sol,\r\n                sellDetails.sell_value_usd,\r\n                sellDetails.profit_usd,\r\n                sellDetails.profit_percent,\r\n                sellDetails.sell_market_cap,\r\n                sellDetails.market_cap_change,\r\n                sellDetails.sell_liquidity,\r\n                sellDetails.liquidity_change,\r\n                sellDetails.rapidDump ? 1 : 0,\r\n                sellDetails.sell_recommender_id,\r\n                tokenAddress,\r\n                recommenderId,\r\n                buyTimeStamp\r\n            );\r\n\r\n            if (result.changes === 0) {\r\n                console.warn(\r\n                    `No trade found to update in ${tableName} for token: ${tokenAddress}, recommender: ${recommenderId}, buyTimeStamp: ${buyTimeStamp}`\r\n                );\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`Error updating trade in ${tableName}:`, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //getTradePerformance\r\n\r\n    /**\r\n     * Retrieves trade performance metrics.\r\n     * @param tokenAddress Token's address\r\n     * @param recommenderId Recommender's UUID\r\n     * @param buyTimeStamp Timestamp when the buy occurred\r\n     * @param isSimulation Whether the trade is a simulation. If true, retrieves from simulation_trade; otherwise, from trade.\r\n     * @returns TradePerformance object or null\r\n     */\r\n\r\n    getTradePerformance(\r\n        tokenAddress: string,\r\n        recommenderId: string,\r\n        buyTimeStamp: string,\r\n        isSimulation: boolean\r\n    ): TradePerformance | null {\r\n        const tableName = isSimulation ? \"simulation_trade\" : \"trade\";\r\n        const sql = `SELECT * FROM ${tableName} WHERE token_address = ? AND recommender_id = ? AND buy_timeStamp = ?;`;\r\n        const row = this.db\r\n            .prepare(sql)\r\n            .get(tokenAddress, recommenderId, buyTimeStamp) as\r\n            | TradePerformance\r\n            | undefined;\r\n        if (!row) return null;\r\n\r\n        return {\r\n            token_address: row.token_address,\r\n            recommender_id: row.recommender_id,\r\n            buy_price: row.buy_price,\r\n            sell_price: row.sell_price,\r\n            buy_timeStamp: row.buy_timeStamp,\r\n            sell_timeStamp: row.sell_timeStamp,\r\n            buy_amount: row.buy_amount,\r\n            sell_amount: row.sell_amount,\r\n            buy_sol: row.buy_sol,\r\n            received_sol: row.received_sol,\r\n            buy_value_usd: row.buy_value_usd,\r\n            sell_value_usd: row.sell_value_usd,\r\n            profit_usd: row.profit_usd,\r\n            profit_percent: row.profit_percent,\r\n            buy_market_cap: row.buy_market_cap,\r\n            sell_market_cap: row.sell_market_cap,\r\n            market_cap_change: row.market_cap_change,\r\n            buy_liquidity: row.buy_liquidity,\r\n            sell_liquidity: row.sell_liquidity,\r\n            liquidity_change: row.liquidity_change,\r\n            last_updated: row.last_updated,\r\n            rapidDump: row.rapidDump,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Retrieves the latest trade performance metrics without requiring buyTimeStamp.\r\n     * @param tokenAddress Token's address\r\n     * @param recommenderId Recommender's UUID\r\n     * @param isSimulation Whether the trade is a simulation. If true, retrieves from simulation_trade; otherwise, from trade.\r\n     * @returns TradePerformance object or null\r\n     */\r\n    getLatestTradePerformance(\r\n        tokenAddress: string,\r\n        recommenderId: string,\r\n        isSimulation: boolean\r\n    ): TradePerformance | null {\r\n        const tableName = isSimulation ? \"simulation_trade\" : \"trade\";\r\n        const sql = `\r\n        SELECT * FROM ${tableName}\r\n        WHERE token_address = ? AND recommender_id = ?\r\n        ORDER BY buy_timeStamp DESC\r\n        LIMIT 1;\r\n    `;\r\n        const row = this.db.prepare(sql).get(tokenAddress, recommenderId) as\r\n            | TradePerformance\r\n            | undefined;\r\n        if (!row) return null;\r\n\r\n        return {\r\n            token_address: row.token_address,\r\n            recommender_id: row.recommender_id,\r\n            buy_price: row.buy_price,\r\n            sell_price: row.sell_price,\r\n            buy_timeStamp: row.buy_timeStamp,\r\n            sell_timeStamp: row.sell_timeStamp,\r\n            buy_amount: row.buy_amount,\r\n            sell_amount: row.sell_amount,\r\n            buy_sol: row.buy_sol,\r\n            received_sol: row.received_sol,\r\n            buy_value_usd: row.buy_value_usd,\r\n            sell_value_usd: row.sell_value_usd,\r\n            profit_usd: row.profit_usd,\r\n            profit_percent: row.profit_percent,\r\n            buy_market_cap: row.buy_market_cap,\r\n            sell_market_cap: row.sell_market_cap,\r\n            market_cap_change: row.market_cap_change,\r\n            buy_liquidity: row.buy_liquidity,\r\n            sell_liquidity: row.sell_liquidity,\r\n            liquidity_change: row.liquidity_change,\r\n            last_updated: row.last_updated,\r\n            rapidDump: row.rapidDump,\r\n        };\r\n    }\r\n\r\n    // ----- Transactions Methods -----\r\n    /**\r\n     * Adds a new transaction to the database.\r\n     * @param transaction Transaction object\r\n     * @returns boolean indicating success\r\n     */\r\n\r\n    addTransaction(transaction: Transaction): boolean {\r\n        const sql = `\r\n        INSERT INTO transactions (\r\n            token_address,\r\n            transaction_hash,\r\n            type,\r\n            amount,\r\n            price,\r\n            is_simulation,\r\n            timestamp\r\n        ) VALUES (?, ?, ?, ?, ?, ?);\r\n    `;\r\n        try {\r\n            this.db\r\n                .prepare(sql)\r\n                .run(\r\n                    transaction.tokenAddress,\r\n                    transaction.transactionHash,\r\n                    transaction.type,\r\n                    transaction.amount,\r\n                    transaction.price,\r\n                    transaction.isSimulation,\r\n                    transaction.timestamp\r\n                );\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error adding transaction:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all transactions for a specific token.\r\n     * @param tokenAddress Token's address\r\n     * @returns Array of Transaction objects\r\n     */\r\n    getTransactionsByToken(tokenAddress: string): Transaction[] {\r\n        const sql = `SELECT * FROM transactions WHERE token_address = ? ORDER BY timestamp DESC;`;\r\n        const rows = this.db.prepare(sql).all(tokenAddress) as Array<{\r\n            token_address: string;\r\n            transaction_hash: string;\r\n            type: string;\r\n            amount: number;\r\n            price: number;\r\n            is_simulation: boolean;\r\n            timestamp: string;\r\n        }>;\r\n\r\n        return rows.map((row) => {\r\n            // Validate and cast 'type' to ensure it matches the expected union type\r\n            if (row.type !== \"buy\" && row.type !== \"sell\") {\r\n                throw new Error(`Unexpected transaction type: ${row.type}`);\r\n            }\r\n\r\n            return {\r\n                tokenAddress: row.token_address,\r\n                transactionHash: row.transaction_hash,\r\n                type: row.type as \"buy\" | \"sell\",\r\n                amount: row.amount,\r\n                price: row.price,\r\n                isSimulation: row.is_simulation,\r\n                timestamp: new Date(row.timestamp).toISOString(),\r\n            };\r\n        });\r\n    }\r\n        /**\r\n     * Executes a custom query on the trade table with parameters.\r\n     * @param query SQL query string\r\n     * @param params Query parameters\r\n     * @returns Array of TradePerformance objects\r\n     */\r\n        getTradesByQuery(query: string, params: any[]): TradePerformance[] {\r\n            try {\r\n                const rows = this.db.prepare(query).all(params) as any[];\r\n\r\n                return rows.map(row => ({\r\n                    token_address: row.token_address,\r\n                    recommender_id: row.recommender_id,\r\n                    buy_price: row.buy_price,\r\n                    sell_price: row.sell_price,\r\n                    buy_timeStamp: row.buy_timeStamp,\r\n                    sell_timeStamp: row.sell_timeStamp,\r\n                    buy_amount: row.buy_amount,\r\n                    sell_amount: row.sell_amount,\r\n                    buy_sol: row.buy_sol,\r\n                    received_sol: row.received_sol,\r\n                    buy_value_usd: row.buy_value_usd,\r\n                    sell_value_usd: row.sell_value_usd,\r\n                    profit_usd: row.profit_usd,\r\n                    profit_percent: row.profit_percent,\r\n                    buy_market_cap: row.buy_market_cap,\r\n                    sell_market_cap: row.sell_market_cap,\r\n                    market_cap_change: row.market_cap_change,\r\n                    buy_liquidity: row.buy_liquidity,\r\n                    sell_liquidity: row.sell_liquidity,\r\n                    liquidity_change: row.liquidity_change,\r\n                    last_updated: row.last_updated,\r\n                    rapidDump: row.rapidDump === 1\r\n                }));\r\n            } catch (error) {\r\n                console.error(\"Error executing trade query:\", error);\r\n                return [];\r\n            }\r\n    }\r\n\r\n    /**\r\n     * Close the database connection gracefully.\r\n     */\r\n    closeConnection(): void {\r\n        this.db.close();\r\n    }\r\n}"],"mappings":"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","names":[]}