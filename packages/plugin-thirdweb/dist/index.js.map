{"version":3,"sources":["../src/actions/chat.ts","../src/actions/index.ts","../src/index.ts"],"sourcesContent":["import {\r\n    elizaLogger,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\n\r\nconst BASE_URL = \"https://nebula-api.thirdweb.com\";\r\n\r\n// If chat is a stream, wait for stream to complete before returning response\r\nasync function handleStreamResponse(\r\n    response: Response\r\n): Promise<ReadableStream> {\r\n    elizaLogger.log(\"Starting stream response handling\");\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n        elizaLogger.error(\"No readable stream available\");\r\n        throw new Error(\"No readable stream available\");\r\n    }\r\n\r\n    return new ReadableStream({\r\n        async start(controller) {\r\n            try {\r\n                while (true) {\r\n                    const { done, value } = await reader.read();\r\n                    if (done) {\r\n                        elizaLogger.log(\"Stream reading completed\");\r\n                        break;\r\n                    }\r\n\r\n                    const events = new TextDecoder()\r\n                        .decode(value)\r\n                        .split(\"\\n\\n\");\r\n                    elizaLogger.debug(\r\n                        `Processing ${events.length} stream events`\r\n                    );\r\n                    for (const event of events) {\r\n                        if (!event.trim()) continue;\r\n                        controller.enqueue(event);\r\n                    }\r\n                }\r\n            } finally {\r\n                reader.releaseLock();\r\n                controller.close();\r\n                elizaLogger.log(\"Stream controller closed\");\r\n            }\r\n        },\r\n    });\r\n}\r\n\r\n// Process & return a response to the current message with thirdweb Nebula\r\nexport const blockchainChatAction: Action = {\r\n    name: \"BLOCKCHAIN_CHAT\",\r\n    similes: [\r\n        \"QUERY_BLOCKCHAIN\",\r\n        \"CHECK_BLOCKCHAIN\",\r\n        \"BLOCKCHAIN_SEARCH\",\r\n        \"CRYPTO_LOOKUP\",\r\n        \"WEB3_SEARCH\",\r\n        \"BLOCKCHAIN_HISTORY_EXPLORER\",\r\n        \"UNIVERSAL_BLOCKCHAIN_TRANSALTOR\",\r\n        \"BLOCKCHAIN_DATA_PROVIDER\",\r\n        \"HISTORICAL_BLOCKCHAIN_DATA\",\r\n        \"TRACK_BLOCKCHAIN_TRANSACTIONS\",\r\n        \"BLOCKCHAIN_INTERPRETER\",\r\n        \"BLOCKCHAIN_TRANSACTION_DETAILS\",\r\n    ],\r\n    validate: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory\r\n    ): Promise<boolean> => {\r\n        const secretKey =\r\n            runtime.getSetting(\"THIRDWEB_SECRET_KEY\") ??\r\n            process.env.THIRDWEB_SECRET_KEY;\r\n        return Boolean(secretKey);\r\n    },\r\n    description:\r\n        \"Query blockchain data and execute transactions through natural language interaction with the Nebula API\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state: State,\r\n        _options: any,\r\n        callback: HandlerCallback\r\n    ): Promise<any> => {\r\n        try {\r\n            elizaLogger.log(\"Starting blockchain chat handler\");\r\n            const secretKey =\r\n                runtime.getSetting(\"THIRDWEB_SECRET_KEY\") ??\r\n                process.env.THIRDWEB_SECRET_KEY;\r\n\r\n            if (!secretKey) {\r\n                elizaLogger.error(\"THIRDWEB_SECRET_KEY not configured\");\r\n                throw new Error(\"THIRDWEB_SECRET_KEY is not configured\");\r\n            }\r\n\r\n            const request = {\r\n                message: message.content.text,\r\n                stream: false,\r\n            };\r\n\r\n            elizaLogger.log(\"NEBULA CHAT REQUEST: \", request);\r\n\r\n            elizaLogger.debug(\"Sending request to Nebula API\");\r\n            const response = await fetch(`${BASE_URL}/chat`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"x-secret-key\": secretKey,\r\n                },\r\n                body: JSON.stringify(request),\r\n            });\r\n            elizaLogger.debug(\"Received response from Nebula API\");\r\n\r\n            if (!request.stream) {\r\n                const text = await response.text();\r\n                elizaLogger.debug(\"Raw response text:\", text);\r\n\r\n                try {\r\n                    const cleanedText = text.trim().split(\"\\n\").pop() || text;\r\n                    const parsed = JSON.parse(cleanedText);\r\n                    elizaLogger.log(\"Successfully parsed response:\", parsed);\r\n\r\n                    console.log(parsed.message);\r\n\r\n                    await callback({ text: parsed.message });\r\n\r\n                    return parsed;\r\n                } catch (parseError) {\r\n                    elizaLogger.error(\"Parse error details:\", parseError);\r\n                    elizaLogger.error(\r\n                        \"Failed to parse JSON response. Raw text:\",\r\n                        text\r\n                    );\r\n                    return { text: text };\r\n                }\r\n            }\r\n\r\n            elizaLogger.log(\"Handling streaming response\");\r\n            return handleStreamResponse(response);\r\n        } catch (error) {\r\n            elizaLogger.error(\"Blockchain chat failed:\", error);\r\n            throw new Error(`Blockchain chat failed: ${error.message}`);\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"What's the ETH balance of vitalik.eth?\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"The current ETH balance of vitalik.eth (0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045) is 1,123.45 ETH\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"send 0.1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"I'll help you send 0.1 ETH. Please review and sign the transaction.\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show me the floor price of BAYC\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"The current floor price for BAYC is 32.5 ETH with 3 sales in the last 24h\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show me my recent transactions\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Here are your recent transactions: 1. Sent 1.5 ETH 2. Swapped tokens on Uniswap 3. Received 0.5 ETH\",\r\n                    action: \"BLOCKCHAIN_CHAT\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n} as Action;\r\n","export * from \"./chat.ts\";\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { blockchainChatAction } from \"./actions/chat\";\r\nexport * as actions from \"./actions/index.ts\";\r\n\r\nexport const thirdwebPlugin: Plugin = {\r\n    name: \"PROVIDE_BLOCKCHAIN_DATA\",\r\n    description:\r\n        \"Search the blockchain with thirdweb Nebula for information about wallet addresses, token prices, token owners, transactions and their details.\",\r\n    actions: [blockchainChatAction],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n"],"mappings":";;;;;;;AAAA;AAAA,EACI;AAAA,OAMG;AAEP,IAAM,WAAW;AAGjB,eAAe,qBACX,UACuB;AACvB,cAAY,IAAI,mCAAmC;AACnD,QAAM,SAAS,SAAS,MAAM,UAAU;AACxC,MAAI,CAAC,QAAQ;AACT,gBAAY,MAAM,8BAA8B;AAChD,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAClD;AAEA,SAAO,IAAI,eAAe;AAAA,IACtB,MAAM,MAAM,YAAY;AACpB,UAAI;AACA,eAAO,MAAM;AACT,gBAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,cAAI,MAAM;AACN,wBAAY,IAAI,0BAA0B;AAC1C;AAAA,UACJ;AAEA,gBAAM,SAAS,IAAI,YAAY,EAC1B,OAAO,KAAK,EACZ,MAAM,MAAM;AACjB,sBAAY;AAAA,YACR,cAAc,OAAO,MAAM;AAAA,UAC/B;AACA,qBAAW,SAAS,QAAQ;AACxB,gBAAI,CAAC,MAAM,KAAK,EAAG;AACnB,uBAAW,QAAQ,KAAK;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ,UAAE;AACE,eAAO,YAAY;AACnB,mBAAW,MAAM;AACjB,oBAAY,IAAI,0BAA0B;AAAA,MAC9C;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;AAGO,IAAM,uBAA+B;AAAA,EACxC,MAAM;AAAA,EACN,SAAS;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,UAAU,OACN,SACA,aACmB;AACnB,UAAM,YACF,QAAQ,WAAW,qBAAqB,KACxC,QAAQ,IAAI;AAChB,WAAO,QAAQ,SAAS;AAAA,EAC5B;AAAA,EACA,aACI;AAAA,EACJ,SAAS,OACL,SACA,SACA,QACA,UACA,aACe;AACf,QAAI;AACA,kBAAY,IAAI,kCAAkC;AAClD,YAAM,YACF,QAAQ,WAAW,qBAAqB,KACxC,QAAQ,IAAI;AAEhB,UAAI,CAAC,WAAW;AACZ,oBAAY,MAAM,oCAAoC;AACtD,cAAM,IAAI,MAAM,uCAAuC;AAAA,MAC3D;AAEA,YAAM,UAAU;AAAA,QACZ,SAAS,QAAQ,QAAQ;AAAA,QACzB,QAAQ;AAAA,MACZ;AAEA,kBAAY,IAAI,yBAAyB,OAAO;AAEhD,kBAAY,MAAM,+BAA+B;AACjD,YAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,SAAS;AAAA,QAC7C,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,UAChB,gBAAgB;AAAA,QACpB;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAChC,CAAC;AACD,kBAAY,MAAM,mCAAmC;AAErD,UAAI,CAAC,QAAQ,QAAQ;AACjB,cAAM,OAAO,MAAM,SAAS,KAAK;AACjC,oBAAY,MAAM,sBAAsB,IAAI;AAE5C,YAAI;AACA,gBAAM,cAAc,KAAK,KAAK,EAAE,MAAM,IAAI,EAAE,IAAI,KAAK;AACrD,gBAAM,SAAS,KAAK,MAAM,WAAW;AACrC,sBAAY,IAAI,iCAAiC,MAAM;AAEvD,kBAAQ,IAAI,OAAO,OAAO;AAE1B,gBAAM,SAAS,EAAE,MAAM,OAAO,QAAQ,CAAC;AAEvC,iBAAO;AAAA,QACX,SAAS,YAAY;AACjB,sBAAY,MAAM,wBAAwB,UAAU;AACpD,sBAAY;AAAA,YACR;AAAA,YACA;AAAA,UACJ;AACA,iBAAO,EAAE,KAAW;AAAA,QACxB;AAAA,MACJ;AAEA,kBAAY,IAAI,6BAA6B;AAC7C,aAAO,qBAAqB,QAAQ;AAAA,IACxC,SAAS,OAAO;AACZ,kBAAY,MAAM,2BAA2B,KAAK;AAClD,YAAM,IAAI,MAAM,2BAA2B,MAAM,OAAO,EAAE;AAAA,IAC9D;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACrNA;AAAA;AAAA;AAAA;;;ACIO,IAAM,iBAAyB;AAAA,EAClC,MAAM;AAAA,EACN,aACI;AAAA,EACJ,SAAS,CAAC,oBAAoB;AAAA,EAC9B,YAAY,CAAC;AAAA,EACb,WAAW,CAAC;AAChB;","names":[]}