{"version":3,"sources":["../src/providers/gitbook.ts","../src/index.ts"],"sourcesContent":["import {\r\n    Provider,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\nimport { GitBookResponse, GitBookClientConfig } from \"../types\";\r\n\r\nfunction cleanText(text: string): string {\r\n    const cleaned = text\r\n        .replace(/<@!?\\d+>/g, \"\") // Discord mentions\r\n        .replace(/<#\\d+>/g, \"\") // Discord channels\r\n        .replace(/<@&\\d+>/g, \"\") // Discord roles\r\n        .replace(/(?:^|\\s)@[\\w_]+/g, \"\") // Platform mentions\r\n        .trim();\r\n\r\n    return cleaned;\r\n}\r\n\r\nasync function validateQuery(\r\n    runtime: IAgentRuntime,\r\n    text: string\r\n): Promise<boolean> {\r\n    // Default general queries - everything else comes from config\r\n    const keywords = {\r\n        generalQueries: [\r\n            \"how\",\r\n            \"what\",\r\n            \"where\",\r\n            \"explain\",\r\n            \"show\",\r\n            \"tell\",\r\n            \"can\",\r\n            \"does\",\r\n            \"is\",\r\n            \"are\",\r\n            \"will\",\r\n            \"why\",\r\n            \"benefits\",\r\n            \"features\",\r\n            \"cost\",\r\n            \"price\",\r\n            \"use\",\r\n            \"using\",\r\n            \"work\",\r\n            \"access\",\r\n            \"get\",\r\n        ],\r\n    };\r\n\r\n    try {\r\n        const gitbookConfig = runtime.character.clientConfig\r\n            ?.gitbook as GitBookClientConfig;\r\n\r\n        // Get project terms and document triggers from config\r\n        const projectTerms = gitbookConfig?.keywords?.projectTerms || [];\r\n        const documentTriggers = gitbookConfig?.documentTriggers || [];\r\n\r\n        // Merge any additional general queries from config\r\n        if (gitbookConfig?.keywords?.generalQueries) {\r\n            keywords.generalQueries = [\r\n                ...keywords.generalQueries,\r\n                ...gitbookConfig.keywords.generalQueries,\r\n            ];\r\n        }\r\n\r\n        const containsAnyWord = (text: string, words: string[] = []) => {\r\n            return (\r\n                words.length === 0 ||\r\n                words.some((word) => {\r\n                    if (word.includes(\" \")) {\r\n                        return text.includes(word.toLowerCase());\r\n                    }\r\n                    const regex = new RegExp(`\\\\b${word}\\\\b`, \"i\");\r\n                    return regex.test(text);\r\n                })\r\n            );\r\n        };\r\n\r\n        const hasProjectTerm = containsAnyWord(text, projectTerms);\r\n        const hasDocTrigger = containsAnyWord(text, documentTriggers);\r\n        const hasGeneralQuery = containsAnyWord(text, keywords.generalQueries);\r\n\r\n        const isValid = hasProjectTerm || hasDocTrigger || hasGeneralQuery;\r\n\r\n        elizaLogger.info(`✅ Is GitBook Validation Result: ${isValid}`);\r\n        return isValid;\r\n    } catch (error) {\r\n        elizaLogger.warn(`❌ Error in GitBook validation:\\n${error}`);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const gitbookProvider: Provider = {\r\n    get: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State\r\n    ): Promise<string> => {\r\n        try {\r\n            const spaceId = runtime.getSetting(\"GITBOOK_SPACE_ID\");\r\n            if (!spaceId) {\r\n                elizaLogger.error(\"⚠️ GitBook Space ID not configured\");\r\n                return \"\";\r\n            }\r\n\r\n            const text = message.content.text.toLowerCase().trim();\r\n            const isValidQuery = await validateQuery(runtime, text);\r\n\r\n            if (!isValidQuery) {\r\n                elizaLogger.info(\"⚠️ GitBook Query validation failed\");\r\n                return \"\";\r\n            }\r\n\r\n            const cleanedQuery = cleanText(message.content.text);\r\n\r\n            const response = await fetch(\r\n                `https://api.gitbook.com/v1/spaces/${spaceId}/search/ask`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        query: cleanedQuery,\r\n                        variables: {},\r\n                    }),\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                elizaLogger.error(\"❌ GitBook API error:\", response.status);\r\n                return \"\";\r\n            }\r\n\r\n            const result: GitBookResponse = await response.json();\r\n\r\n            return result.answer?.text || \"\";\r\n        } catch (error) {\r\n            elizaLogger.error(\"❌ Error in GitBook provider:\", error);\r\n            return \"\";\r\n        }\r\n    },\r\n};\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { gitbookProvider } from \"./providers/gitbook\";\r\n\r\nexport const gitbookPlugin: Plugin = {\r\n    name: \"GitBook Documentation\",\r\n    description: \"Plugin for querying GitBook documentation\",\r\n    actions: [],\r\n    providers: [gitbookProvider],\r\n    evaluators: [],\r\n};\r\n\r\nexport default gitbookPlugin;\r\n\r\nexport * from \"./types\";\r\n"],"mappings":"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","names":["text"]}