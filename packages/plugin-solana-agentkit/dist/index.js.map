{"version":3,"sources":["../src/actions/createToken.ts","../src/index.ts"],"sourcesContent":["import {\r\n    ActionExample,\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\n\r\nimport { SolanaAgentKit } from \"solana-agent-kit\";\r\n\r\nexport interface CreateTokenContent extends Content {\r\n    name: string;\r\n    uri: string;\r\n    symbol: string;\r\n    decimals: number;\r\n    initialSupply: number;\r\n}\r\n\r\nfunction isCreateTokenContent(content: any): content is CreateTokenContent {\r\n    elizaLogger.log(\"Content for createToken\", content);\r\n    return (\r\n        typeof content.name === \"string\" &&\r\n        typeof content.uri === \"string\" &&\r\n        typeof content.symbol === \"string\" &&\r\n        typeof content.decimals === \"number\" &&\r\n        typeof content.initialSupply === \"number\"\r\n    );\r\n}\r\n\r\nconst createTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"name\": \"Example Token\",\r\n    \"symbol\": \"EXMPL\",\r\n    \"uri\": \"https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png\",\r\n    \"decimals\": 18,\r\n    \"initialSupply\": 1000000,\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- Token name\r\n- Token symbol\r\n- Token uri\r\n- Token decimals\r\n- Token initialSupply\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: \"CREATE_TOKEN\",\r\n    similes: [\"DEPLOY_TOKEN\"],\r\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => true,\r\n    description: \"Create tokens\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting CREATE_TOKEN handler...\");\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose transfer context\r\n        const transferContext = composeContext({\r\n            state,\r\n            template: createTemplate,\r\n        });\r\n\r\n        // Generate transfer content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        // Validate transfer content\r\n        if (!isCreateTokenContent(content)) {\r\n            elizaLogger.error(\"Invalid content for CREATE_TOKEN action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process create token request. Invalid content provided.\",\r\n                    content: { error: \"Invalid creat token content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        elizaLogger.log(\"Init solana agent kit...\");\r\n        const solanaPrivatekey = runtime.getSetting(\"SOLANA_PRIVATE_KEY\");\r\n        const rpc = runtime.getSetting(\"SOLANA_RPC_URL\");\r\n        const openAIKey = runtime.getSetting(\"OPENAI_API_KEY\");\r\n        const solanaAgentKit = new SolanaAgentKit(\r\n            solanaPrivatekey,\r\n            rpc,\r\n            openAIKey\r\n        );\r\n        try {\r\n            const deployedAddress = await solanaAgentKit.deployToken(\r\n                content.name,\r\n                content.uri,\r\n                content.symbol,\r\n                content.decimals\r\n                // content.initialSupply comment out this cause the sdk has some issue with this parameter\r\n            );\r\n            elizaLogger.log(\"Create successful: \", deployedAddress);\r\n            elizaLogger.log(deployedAddress);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully create token ${content.name}`,\r\n                    content: {\r\n                        success: true,\r\n                        deployedAddress,\r\n                    },\r\n                });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            if (callback) {\r\n                elizaLogger.error(\"Error during create token: \", error);\r\n                callback({\r\n                    text: `Error creating token: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Create token, name is Example Token, symbol is EXMPL, uri is https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/CompressedCoil/image.png, decimals is 9, initialSupply is 100000000000\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"I'll create token now...\",\r\n                    action: \"CREATE_TOKEN\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully create token 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport createToken from \"./actions/createToken.ts\";\r\n\r\nexport const solanaAgentkitPlguin: Plugin = {\r\n    name: \"solana\",\r\n    description: \"Solana Plugin with solana agent kit for Eliza\",\r\n    actions: [createToken],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default solanaAgentkitPlguin;\r\n"],"mappings":"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","names":[]}