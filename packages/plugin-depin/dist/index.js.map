{"version":3,"sources":["../src/providers/depinData.ts","../src/actions/depinProjects.ts","../src/template/index.ts","../src/actions/sentientai.ts","../src/index.ts"],"sourcesContent":["import {\r\n    type IAgentRuntime,\r\n    type Provider,\r\n    type Memory,\r\n    type State,\r\n    elizaLogger,\r\n    ICacheManager,\r\n} from \"@elizaos/core\";\r\nimport NodeCache from \"node-cache\";\r\nimport * as path from \"path\";\r\n\r\nimport type { DepinScanMetrics, DepinScanProject } from \"../types/depin\";\r\n\r\nexport const DEPIN_METRICS_URL =\r\n    \"https://gateway1.iotex.io/depinscan/explorer?is_latest=true\";\r\nexport const DEPIN_PROJECTS_URL = \"https://metrics-api.w3bstream.com/project\";\r\n\r\nexport class DePINScanProvider {\r\n    private cache: NodeCache;\r\n    private cacheKey: string = \"depin/metrics\";\r\n\r\n    constructor(private cacheManager: ICacheManager) {\r\n        this.cache = new NodeCache({ stdTTL: 3600 });\r\n    }\r\n\r\n    private async readFromCache<T>(key: string): Promise<T | null> {\r\n        const cached = await this.cacheManager.get<T>(\r\n            path.join(this.cacheKey, key)\r\n        );\r\n        return cached;\r\n    }\r\n\r\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\r\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\r\n            expires: Date.now() + 15 * 60 * 1000, // 15 minutes\r\n        });\r\n    }\r\n\r\n    private async getCachedData<T>(key: string): Promise<T | null> {\r\n        // Check in-memory cache first\r\n        const cachedData = this.cache.get<T>(key);\r\n        if (cachedData) {\r\n            return cachedData;\r\n        }\r\n\r\n        // Check file-based cache\r\n        const fileCachedData = await this.readFromCache<T>(key);\r\n        if (fileCachedData) {\r\n            // Populate in-memory cache\r\n            this.cache.set(key, fileCachedData);\r\n            return fileCachedData;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\r\n        // Set in-memory cache\r\n        this.cache.set(cacheKey, data);\r\n\r\n        // Write to file-based cache\r\n        await this.writeToCache(cacheKey, data);\r\n    }\r\n\r\n    private async fetchDepinscanMetrics(): Promise<DepinScanMetrics> {\r\n        const res = await fetch(DEPIN_METRICS_URL);\r\n        return res.json();\r\n    }\r\n\r\n    private async fetchDepinscanProjects(): Promise<DepinScanProject[]> {\r\n        const res = await fetch(DEPIN_PROJECTS_URL);\r\n        return res.json();\r\n    }\r\n\r\n    async getDailyMetrics(): Promise<DepinScanMetrics> {\r\n        const cacheKey = \"depinscanDailyMetrics\";\r\n        const cachedData = await this.getCachedData<DepinScanMetrics>(cacheKey);\r\n        if (cachedData) {\r\n            console.log(\"Returning cached DePINScan daily metrics\");\r\n            return cachedData;\r\n        }\r\n\r\n        const metrics = await this.fetchDepinscanMetrics();\r\n\r\n        this.setCachedData<DepinScanMetrics>(cacheKey, metrics);\r\n        console.log(\"DePIN daily metrics cached\");\r\n\r\n        return metrics;\r\n    }\r\n\r\n    private abbreviateNumber = (\r\n        value: string | number | bigint | undefined\r\n    ): string => {\r\n        if (value === undefined || value === null) return \"\";\r\n\r\n        let num: number;\r\n\r\n        if (typeof value === \"bigint\") {\r\n            // Convert bigint to number safely for processing\r\n            num = Number(value);\r\n        } else if (typeof value === \"number\") {\r\n            num = value;\r\n        } else if (typeof value === \"string\") {\r\n            // Parse string to number\r\n            num = parseFloat(value);\r\n        } else {\r\n            return \"\"; // Handle unexpected types gracefully\r\n        }\r\n\r\n        if (isNaN(num)) return value.toString(); // Return as string if not a valid number\r\n        if (num >= 1e9) return `${(num / 1e9).toFixed(2)}B`;\r\n        if (num >= 1e6) return `${(num / 1e6).toFixed(2)}M`;\r\n        return num.toString(); // Return original number as string if no abbreviation is needed\r\n    };\r\n\r\n    private parseProjects(projects: DepinScanProject[]): string[][] {\r\n        const schema = [\r\n            \"project_name\",\r\n            \"slug\",\r\n            \"token\",\r\n            \"layer_1\",\r\n            \"categories\",\r\n            \"market_cap\",\r\n            \"token_price\",\r\n            \"total_devices\",\r\n            \"avg_device_cost\",\r\n            \"days_to_breakeven\",\r\n            \"estimated_daily_earnings\",\r\n            \"chainid\",\r\n            \"coingecko_id\",\r\n            \"fully_diluted_valuation\",\r\n        ];\r\n\r\n        const parsedProjects = projects.map((project) => {\r\n            const {\r\n                project_name,\r\n                slug,\r\n                token,\r\n                layer_1,\r\n                categories,\r\n                market_cap,\r\n                token_price,\r\n                total_devices,\r\n                avg_device_cost,\r\n                days_to_breakeven,\r\n                estimated_daily_earnings,\r\n                chainid,\r\n                coingecko_id,\r\n                fully_diluted_valuation,\r\n            } = project;\r\n\r\n            // Create an array following the schema\r\n            return [\r\n                project_name,\r\n                slug,\r\n                token,\r\n                layer_1 ? layer_1.join(\", \") : \"\", // Flatten array for compact representation\r\n                categories ? categories.join(\", \") : \"\", // Flatten array for compact representation\r\n                this.abbreviateNumber(market_cap?.toString()),\r\n                token_price?.toString(),\r\n                total_devices?.toString(),\r\n                avg_device_cost?.toString(),\r\n                days_to_breakeven?.toString(),\r\n                estimated_daily_earnings?.toString(),\r\n                chainid?.toString(),\r\n                coingecko_id?.toString(),\r\n                this.abbreviateNumber(fully_diluted_valuation?.toString()),\r\n            ];\r\n        });\r\n\r\n        parsedProjects.unshift(schema);\r\n\r\n        return parsedProjects;\r\n    }\r\n\r\n    async getProjects(): Promise<string[][]> {\r\n        const cacheKey = \"depinscanProjects\";\r\n        const cachedData = await this.getCachedData<string[][]>(cacheKey);\r\n        if (cachedData) {\r\n            console.log(\"Returning cached DePINScan projects\");\r\n            return cachedData;\r\n        }\r\n\r\n        const projects = await this.fetchDepinscanProjects();\r\n        const parsedProjects = this.parseProjects(projects);\r\n\r\n        this.setCachedData<string[][]>(cacheKey, parsedProjects);\r\n        console.log(\"DePINScan projects cached\");\r\n\r\n        return parsedProjects;\r\n    }\r\n}\r\n\r\nexport const depinDataProvider: Provider = {\r\n    async get(\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State\r\n    ): Promise<string | null> {\r\n        try {\r\n            const depinscan = new DePINScanProvider(runtime.cacheManager);\r\n            const depinscanMetrics = await depinscan.getDailyMetrics();\r\n            const depinscanProjects = await depinscan.getProjects();\r\n\r\n            return `\r\n                #### **DePINScan Daily Metrics**\r\n                ${depinscanMetrics}\r\n                #### **DePINScan Projects**\r\n                ${depinscanProjects}\r\n            `;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in DePIN data provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n","import {\r\n    Action,\r\n    composeContext,\r\n    generateText,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\n\r\nimport { projectsTemplate } from \"../template\";\r\n\r\nexport const depinProjects: Action = {\r\n    name: \"DEPIN_PROJECTS\",\r\n    similes: [\r\n        \"DEPIN_TOKENS\",\r\n        \"DEPIN_DATA\",\r\n        \"DEPIN_STATS\",\r\n        \"DEPIN_ANALYTICS\",\r\n        \"PROJECT_TOKENS\",\r\n        \"PROJECT_STATS\",\r\n        \"PROJECT_DATA\",\r\n        \"TOKEN_PROJECTS\",\r\n        \"CHAIN_PROJECTS\",\r\n        \"BLOCKCHAIN_PROJECTS\",\r\n        \"PROJECT_ANALYTICS\",\r\n        \"PROJECT_DETAILS\",\r\n    ],\r\n    description: \"Analyzes DePINScan projects\",\r\n    validate: async (_runtime: IAgentRuntime) => {\r\n        return true;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What is the token price of Render?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"The current token price of Render (RNDR) is $9.02.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Which token has a higher price: Helium or Render?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"Helium (HNT) is priced at $3.21, which is lower than Render (RNDR) at $9.02.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Can you give me the prices of all available tokens?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"Sure! Solana (SOL) is $221.91, Render (RNDR) is $9.02, and Helium (HNT) is $3.21.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Which token costs more than $200?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"The only token priced above $200 is Solana (SOL) at $221.91.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What is the market cap of Render?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"The market cap of Render (RNDR) is $4,659,773,671.85.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Can you give me the categories for Solana?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"Solana (SOL) belongs to the following categories: Chain.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What is the fully diluted valuation of Helium?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"The fully diluted valuation of Helium (HNT) is $450,000,000.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What are the projects running on Solana?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"The projects running on Solana include Render and Helium.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What is the token price of an unlisted project?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"I'm sorry, but I don't have information on the token price for the specified project.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What is the launch date of Solana?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"I'm sorry, but I don't have information on the launch date of Solana.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Can you tell me the founder of Render?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"I currently don't have information on the founder of Render.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Do you have the total supply for Helium?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"I'm sorry, but I don't have data on the total supply of Helium.\",\r\n                    action: \"DEPIN_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        const projectsContext = composeContext({\r\n            state,\r\n            template: projectsTemplate,\r\n        });\r\n\r\n        try {\r\n            const text = await generateText({\r\n                runtime,\r\n                context: projectsContext,\r\n                modelClass: ModelClass.LARGE,\r\n            });\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text,\r\n                    inReplyTo: message.id,\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error in depin project plugin:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error processing request, try again`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n};\r\n","export const projectsTemplate = `\r\nYou are an AI assistant with access to data about various blockchain and DePIN (Decentralized Physical Infrastructure Network) projects. Your primary task is to answer user questions about token prices and other project-related information accurately and precisely. Here's the data you have access to:\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n{{knowledge}}\r\n\r\n{{providers}}\r\n\r\nWhen a user asks a question, follow these steps:\r\n\r\n1. Analyze the user's question carefully.\r\n2. Search the provided projects data for relevant information.\r\n3. If the question is about token prices, provide the most up-to-date price information available in the data.\r\n4. If the question is about other project details (e.g., market cap, description, categories), provide that information accurately.\r\n5. If the question cannot be answered using the available data, politely inform the user that you don't have that information.\r\n\r\nWhen responding to the user:\r\n1. Provide a clear and concise answer to the user's question.\r\n2. If you're stating a token price or numerical value, include the exact figure from the data.\r\n3. If relevant, provide brief additional context or information that might be helpful.\r\n\r\nRemember to be precise, especially when discussing token prices or other numerical data. Do not speculate or provide information that is not present in the given data.\r\n\r\nNow, please answer the user question, based on some recent messages:\r\n\r\n{{recentMessages}}\r\n`;\r\n\r\nexport const locationExtractionTemplate = `\r\nYou are an AI assistant specialized in extracting location information from user messages. Your primary task is to identify and extract a valid location name that can be used to query the Mapbox API for latitude and longitude coordinates.\r\n\r\nHere are the recent messages from the conversation:\r\n\r\n<recent_messages>\r\n{{recentMessages}}\r\n</recent_messages>\r\n\r\nYour objective is to analyze the most recent user message in the context of the conversation and extract a valid location name. This location should be suitable for querying a map service, such as a city name, a full address, or a well-known landmark.\r\n\r\nPlease follow these steps:\r\n\r\n1. Review the conversation history, focusing on the most recent user message.\r\n2. Identify any mentions of locations in the latest message and recent context.\r\n3. If multiple locations are mentioned, prioritize the most recently mentioned valid location.\r\n4. Extract the location, ensuring it's specific enough for a map query.\r\n\r\nUse the following guidelines when extracting the location:\r\n\r\n- Look for names of cities, countries, streets, or landmarks.\r\n- Include relevant details that help specify the location, such as street numbers or neighborhood names.\r\n- If the location is ambiguous (e.g., \"Springfield\" without a state), include additional context if available in the message or recent conversation history.\r\n- If no clear location is mentioned in the latest message or recent context, respond with \"No valid location found.\"\r\n\r\nBefore providing your final answer, wrap your analysis inside <location_analysis> tags. In this analysis:\r\n\r\n1. List all mentioned locations chronologically, prepending each with a number (e.g., 1. New York, 2. Central Park, etc.).\r\n2. For each location, evaluate its specificity and suitability for a map query. Consider:\r\n   - Is it a city, country, street address, or landmark?\r\n   - Does it have enough detail for an accurate map search?\r\n   - Is there any ambiguity that needs to be resolved?\r\n3. If there are multiple locations in the latest message, explain your reasoning for choosing one over the others.\r\n4. Identify the most recently mentioned valid location and justify your choice.\r\n\r\nAfter your analysis, provide the extracted location in the following format:\r\n\r\n<extracted_location>\r\n[Insert the extracted location here, or \"No valid location found\" if no valid location is present]\r\n</extracted_location>\r\n\r\nThe extracted location should be formatted as a string that could be used as a query for a mapping service. For example:\r\n- \"New York City\"\r\n- \"221B Baker Street, London\"\r\n- \"Eiffel Tower, Paris\"\r\n- \"Sydney Opera House, Australia\"\r\n\r\nRemember, the goal is to provide a clear, specific location that can be used to find geographic coordinates. Do not include any explanation or additional text outside of the location_analysis and extracted_location tags.\r\n`;\r\n\r\nexport const currentWeatherTemplate = `\r\nYou are an AI weather assistant with a unique persona. Your task is to answer questions about the weather using provided data while maintaining your assigned character traits.\r\n\r\nHere is the weather data you will use to answer questions:\r\n\r\n<weather_data>\r\n{{weatherData}}\r\n</weather_data>\r\n\r\nNow, review the information about your persona:\r\n\r\n<agent_name>\r\n{{agentName}}\r\n</agent_name>\r\n\r\n<persona_details>\r\n<bio>\r\n{{bio}}\r\n</bio>\r\n\r\n<lore>\r\n{{lore}}\r\n</lore>\r\n\r\n<knowledge>\r\n{{knowledge}}\r\n</knowledge>\r\n\r\n<character_message_examples>\r\n{{characterMessageExamples}}\r\n</character_message_examples>\r\n</persona_details>\r\n\r\n<data_providers>\r\n{{providers}}\r\n</data_providers>\r\n\r\nRecent messages for context:\r\n\r\n<recent_messages>\r\n{{recentMessages}}\r\n</recent_messages>\r\n\r\nWhen answering a user's question, follow these steps:\r\n\r\n1. Analyze the weather data, focusing on the specific information requested by the user.\r\n2. Formulate a response that directly addresses the user's question using only the provided weather data.\r\n3. If the question cannot be fully answered, explain what information you can provide and what is missing.\r\n4. Maintain your assigned persona throughout your response, including tone and style.\r\n5. Provide additional relevant information or advice if appropriate, but keep it concise and related to the user's query.\r\n6. Do not invent or assume any weather information not present in the provided data.\r\n7. If the weather data is incomplete or invalid, mention this in your response.\r\n\r\nBefore providing your final answer, wrap your analysis process inside <analysis> tags. Focus on the relevance to the user's specific question rather than covering all available weather data. In your analysis:\r\n- Identify key weather parameters mentioned in the user's question\r\n- List out relevant data points from the weather data\r\n- Consider how your persona's traits might influence the response\r\n\r\nPresent your final answer in the following format:\r\n\r\n<weather_analysis>\r\n[Your response to the user's question, written in the style of your assigned persona]\r\n</weather_analysis>\r\n\r\nExample output structure (using generic content):\r\n\r\n<analysis>\r\n- Identified user's question about [specific weather parameter] in [location]\r\n- Key weather parameters mentioned: [list parameters]\r\n- Relevant data points from weather data:\r\n  * [Data point 1]\r\n  * [Data point 2]\r\n  * [Data point 3]\r\n- Persona traits that might influence response:\r\n  * [Trait 1]\r\n  * [Trait 2]\r\n- Considered how to phrase response in character\r\n</analysis>\r\n\r\n<weather_analysis>\r\n[Direct answer to the user's question about the specific weather parameter]\r\n[Any additional relevant information or advice, if applicable]\r\n</weather_analysis>\r\n\r\nRemember to stay in character and provide a helpful, accurate response based solely on the provided weather data, focusing on the user's specific question.\r\n`;\r\n\r\nexport const weatherForecastTemplate = `\r\nYou are an AI weather assistant with a unique persona. Your task is to answer questions about the weather using provided data while maintaining your assigned character traits.\r\n\r\nHere is the weather data you will use to answer questions:\r\n\r\n<weather_data>\r\n{{weatherForecast}}\r\n</weather_data>\r\n\r\nThis weather data contains information such as temperature, humidity, wind speed, and conditions for specific locations and time periods. Each entry in the data array represents a weather forecast for a particular timestamp.\r\n\r\nNow, review the information about your persona:\r\n\r\n<agent_name>\r\n{{agentName}}\r\n</agent_name>\r\n\r\n<persona_details>\r\n<bio>\r\n{{bio}}\r\n</bio>\r\n\r\n<lore>\r\n{{lore}}\r\n</lore>\r\n\r\n<knowledge>\r\n{{knowledge}}\r\n</knowledge>\r\n\r\n<character_message_examples>\r\n{{characterMessageExamples}}\r\n</character_message_examples>\r\n</persona_details>\r\n\r\n<data_providers>\r\n{{providers}}\r\n</data_providers>\r\n\r\nRecent messages for context:\r\n\r\n<recent_messages>\r\n{{recentMessages}}\r\n</recent_messages>\r\n\r\nWhen answering a user's question, follow these steps:\r\n\r\n1. Analyze the weather data, focusing on the specific information requested by the user.\r\n2. Formulate a response that directly addresses the user's question using only the provided weather data.\r\n3. If the question cannot be fully answered, explain what information you can provide and what is missing.\r\n4. Maintain your assigned persona throughout your response, including tone and style.\r\n5. Provide additional relevant information or advice if appropriate, but keep it concise and related to the user's query.\r\n6. Do not invent or assume any weather information not present in the provided data.\r\n7. If the weather data is incomplete or invalid, mention this in your response.\r\n\r\nBefore providing your final answer, wrap your thought process in <weather_query_analysis> tags. Focus on the relevance to the user's specific question rather than covering all available weather data. In your analysis:\r\n- Identify key weather parameters mentioned in the user's question\r\n- Quote specific, relevant data points from the weather data\r\n- List the persona traits that are most relevant to answering this particular question\r\n- If multiple data points are available for the requested information, explain how you're selecting or interpreting the data\r\n- Provide a step-by-step plan for answering the question in character\r\n\r\nPresent your final answer in the following format:\r\n\r\n<weather_analysis>\r\n[Your response to the user's question, written in the style of your assigned persona]\r\n</weather_analysis>\r\n\r\nExample output structure (using generic content):\r\n\r\n<weather_query_analysis>\r\n- User asked about [weather parameter] in [location] for [time period]\r\n- Relevant quotes from weather data:\r\n  * \"[Exact quote 1]\"\r\n  * \"[Exact quote 2]\"\r\n  * \"[Exact quote 3]\"\r\n- Most relevant persona traits for this question:\r\n  * [Trait 1]: [How it affects the response]\r\n  * [Trait 2]: [How it affects the response]\r\n- Data interpretation: [Brief explanation if needed]\r\n- Step-by-step plan for in-character response:\r\n  1. [Step 1]\r\n  2. [Step 2]\r\n  3. [Step 3]\r\n</weather_query_analysis>\r\n\r\n<weather_forecast_analysis>\r\n[Direct answer to the user's question about the specific weather parameter]\r\n[Any additional relevant information or advice, if applicable]\r\n</weather_forecast_analysis>\r\n\r\nRemember to stay in character and provide a helpful, accurate response based solely on the provided weather data, focusing on the user's specific question.\r\n`;\r\n","import {\r\n    Action,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State\r\n} from \"@elizaos/core\";\r\n\r\nexport const sentientAI: Action = {\r\n    name: \"SENTIENT_AI\",\r\n    similes: [\r\n        \"SENTIENT\",\r\n        \"NEWS\",\r\n        \"WEATHER\"\r\n    ],\r\n    description: \"Provde realtime information for Weather, News.\",\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What's the weather forecast for Tokyo?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"Here's the weather forecast for Tokyo: Tomorrow will be 22°C with partly cloudy skies. The next few days will see temperatures ranging from 18-24°C with a chance of rain on Thursday.\",\r\n                    action: \"WEATHER\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Will it rain in London this week?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"Looking at London's forecast: There's a 60% chance of rain on Wednesday with temperatures around 15°C. The rest of the week should be mostly cloudy with occasional showers.\",\r\n                    action: \"WEATHER\",\r\n                },\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"What is the latest news about Trump?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"Here are some of the latest news articles related to Trump: Trump invites House Republicans to Mar-a-Lago for strategy meetings.\",\r\n                    action: \"NEWS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\r\n        // no extra validation needed\r\n        return true;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state?: State,\r\n        options?: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ) => {\r\n        try {\r\n            const content = message.content;\r\n\r\n            const response = await fetch(\"https://quicksilver.iotex.ai/ask\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"API-KEY\": runtime.getSetting(\"SENTAI_API_KEY\"),\r\n                },\r\n                body: JSON.stringify({\r\n                    q: content.text,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`API error: ${response.statusText}`);\r\n            }\r\n\r\n            const res = await response.json();\r\n\r\n            callback({\r\n                text: res.data,\r\n            });\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error\", error.message);\r\n            if (callback) {\r\n                callback({ text: `Error: ${error.message}` });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n};","import type { Plugin } from \"@elizaos/core\";\r\n\r\nimport { depinDataProvider } from \"./providers/depinData\";\r\nimport { depinProjects } from \"./actions/depinProjects\";\r\nimport { sentientAI } from \"./actions/sentientai\";\r\n\r\nexport const depinPlugin: Plugin = {\r\n    name: \"depin\",\r\n    description: \"DePIN plugin for Sentient AI\",\r\n    providers: [depinDataProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [sentientAI, depinProjects],\r\n};\r\n\r\nexport default depinPlugin;\r\n"],"mappings":"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","names":[]}