{"version":3,"sources":["../src/actions/getCurrentWeather.ts","../src/environment.ts","../src/templates.ts","../src/examples.ts","../src/services.ts","../src/actions/index.ts","../src/index.ts"],"sourcesContent":["import { composeContext, elizaLogger } from \"@elizaos/core\";\r\nimport { generateMessageResponse } from \"@elizaos/core\";\r\nimport {\r\n    Action,\r\n    ActionExample,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { validateOpenWeatherConfig } from \"../environment\";\r\nimport { getCurrentWeatherTemplate } from \"../templates\";\r\nimport { getCurrentWeatherExamples } from \"../examples\";\r\nimport { createWeatherService } from \"../services\";\r\n\r\nexport const getCurrentWeatherAction: Action = {\r\n    name: \"GET_CURRENT_WEATHER\",\r\n    similes: [\r\n        \"WEATHER\",\r\n        \"TEMPERATURE\",\r\n        \"FORECAST\",\r\n        \"WEATHER_REPORT\",\r\n        \"WEATHER_UPDATE\",\r\n        \"CHECK_WEATHER\",\r\n        \"WEATHER_CHECK\",\r\n        \"CHECK_TEMPERATURE\",\r\n        \"WEATHER_OUTSIDE\",\r\n    ],\r\n    description: \"Get the current weather for a given location\",\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        await validateOpenWeatherConfig(runtime);\r\n        return true;\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback: HandlerCallback\r\n    ) => {\r\n        // Initialize/update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        }\r\n        state = await runtime.updateRecentMessageState(state);\r\n\r\n        // state -> context\r\n        const weatherContext = composeContext({\r\n            state,\r\n            template: getCurrentWeatherTemplate,\r\n        });\r\n\r\n        // context -> content\r\n        const content = await generateMessageResponse({\r\n            runtime,\r\n            context: weatherContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        // parse content\r\n        const hasLocation =\r\n            content?.city && content?.country && !content?.error;\r\n\r\n        if (!hasLocation) {\r\n            return;\r\n        }\r\n\r\n        // Instantiate API service\r\n        const config = await validateOpenWeatherConfig(runtime);\r\n        const weatherService = createWeatherService(\r\n            config.OPEN_WEATHER_API_KEY\r\n        );\r\n\r\n        // Fetch weather & respond\r\n        try {\r\n            const weatherData = await weatherService.getWeather(\r\n                String(content?.city || \"\"),\r\n                content?.country ? String(content?.country) : undefined\r\n            );\r\n            elizaLogger.success(\r\n                `Successfully fetched weather for ${content.city}, ${content.country}`\r\n            );\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `The current weather in ${content.city}, ${content.country} is ${weatherData.main.temp}°C, feels like ${weatherData.main.feels_like}°C, and is ${weatherData.weather[0].description} with a wind speed of ${weatherData.wind.speed} km/h.`,\r\n                    content: weatherData,\r\n                });\r\n\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in GET_CURRENT_WEATHER handler:\", error);\r\n\r\n            callback({\r\n                text: `Error fetching weather: ${error.message}`,\r\n                content: { error: error.message },\r\n            });\r\n\r\n            return false;\r\n        }\r\n\r\n        return;\r\n    },\r\n    examples: getCurrentWeatherExamples as ActionExample[][],\r\n} as Action;\r\n","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nexport const openWeatherEnvSchema = z.object({\r\n    OPEN_WEATHER_API_KEY: z.string().min(1, \"OpenWeather API key is required\"),\r\n});\r\n\r\nexport type OpenWeatherConfig = z.infer<typeof openWeatherEnvSchema>;\r\n\r\nexport async function validateOpenWeatherConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<OpenWeatherConfig> {\r\n    try {\r\n        const config = {\r\n            OPEN_WEATHER_API_KEY: runtime.getSetting(\"OPEN_WEATHER_API_KEY\"),\r\n        };\r\n\r\n        return openWeatherEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `OpenWeather configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n","export const getCurrentWeatherTemplate = `Respond with a JSON object containing location information for weather data.\r\nExtract the location from the most recent message. If no specific location is provided, respond with an error.\r\n\r\nThe response must include:\r\n- city: The city name\r\n- country: The country code (ISO 2-letter code)\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"city\": \"London\",\r\n    \"country\": \"GB\"\r\n}\r\n\\`\\`\\`\r\n{{recentMessages}}\r\nExtract the location from the most recent message.\r\nRespond with a JSON markdown block containing both city and country.`;\r\n","import { ActionExample } from \"@elizaos/core\";\r\n\r\nexport const getCurrentWeatherExamples: ActionExample[][] = [\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"What's the weather like right now?\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"In what city?\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"Tokyo\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"Let me check the current weather in Tokyo for you.\",\r\n                action: \"GET_CURRENT_WEATHER\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"It's currently 22°C, feels like 29°C, and is sunny in Tokyo.\",\r\n            },\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"What's the weather in Toronto?\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"I'll check the current weather in Toronto for you.\",\r\n                action: \"GET_CURRENT_WEATHER\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"It's currently 22°C and cloudy in Toronto.\",\r\n            },\r\n        },\r\n    ],\r\n    [\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"Is it raining in Paris?\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"I'll check the current weather conditions in Paris.\",\r\n                action: \"GET_CURRENT_WEATHER\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"In Paris, it's currently cloudy with light rain. The temperature is 15°C.\",\r\n            },\r\n        },\r\n    ],\r\n];\r\n","import { WeatherResponse } from \"./types\";\r\n\r\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\nexport const createWeatherService = (apiKey: string) => {\r\n    const getWeather = async (\r\n        city: string,\r\n        country?: string\r\n    ): Promise<WeatherResponse> => {\r\n        if (!apiKey || !city) {\r\n            throw new Error(\"Invalid parameters\");\r\n        }\r\n\r\n        try {\r\n            const location = country ? `${city},${country}` : city;\r\n\r\n            const url = new URL(`${BASE_URL}/weather`);\r\n            url.searchParams.append(\"q\", location);\r\n            url.searchParams.append(\"appid\", apiKey);\r\n            url.searchParams.append(\"units\", \"metric\");\r\n\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n                const error = await response.json();\r\n                throw new Error(error?.message || response.statusText);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error(\"Weather API Error:\", error.message);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return { getWeather };\r\n};\r\n","export * from \"./getCurrentWeather.ts\";\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { getCurrentWeatherAction } from \"./actions/getCurrentWeather\";\r\n\r\nexport * as actions from \"./actions\";\r\n\r\nexport const openWeatherPlugin: Plugin = {\r\n    name: \"openweather\",\r\n    description: \"OpenWeather plugin for Eliza\",\r\n    actions: [getCurrentWeatherAction],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\nexport default openWeatherPlugin;\r\n"],"mappings":"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","names":[]}