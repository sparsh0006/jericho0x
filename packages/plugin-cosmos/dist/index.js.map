{"version":3,"sources":["../src/actions/transfer/index.ts","../src/shared/entities/cosmos-wallet-chains-data.ts","../src/shared/entities/cosmos-wallet.ts","../src/shared/helpers/cosmos-chains.ts","../src/providers/wallet/utils.ts","../src/templates/index.ts","../src/actions/transfer/services/cosmos-transfer-action-service.ts","../src/shared/helpers/cosmos-transaction-receipt.ts","../src/shared/services/cosmos-transaction-fee-estimator.ts","../src/shared/helpers/cosmos-assets.ts","../src/providers/wallet/index.ts","../src/index.ts"],"sourcesContent":["import {\r\n    composeContext,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { initWalletChainsData } from \"../../providers/wallet/utils\";\r\nimport { cosmosTransferTemplate } from \"../../templates\";\r\nimport { CosmosTransferActionService } from \"./services/cosmos-transfer-action-service\";\r\nimport type { CosmosTransferParams } from \"./types\";\r\nimport type {\r\n    ICosmosPluginOptions,\r\n    ICosmosWalletChains,\r\n} from \"../../shared/interfaces\";\r\n\r\nexport const createTransferAction = (pluginOptions: ICosmosPluginOptions) => ({\r\n    name: \"COSMOS_TRANSFER\",\r\n    description: \"Transfer tokens between addresses on the same chain\",\r\n    handler: async (\r\n        _runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        _callback?: HandlerCallback\r\n    ) => {\r\n        const cosmosTransferContext = composeContext({\r\n            state: state,\r\n            template: cosmosTransferTemplate,\r\n            templatingEngine: \"handlebars\",\r\n        });\r\n\r\n        const cosmosTransferContent = await generateObjectDeprecated({\r\n            runtime: _runtime,\r\n            context: cosmosTransferContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        const paramOptions: CosmosTransferParams = {\r\n            chainName: cosmosTransferContent.chainName,\r\n            symbol: cosmosTransferContent.symbol,\r\n            amount: cosmosTransferContent.amount,\r\n            toAddress: cosmosTransferContent.toAddress,\r\n        };\r\n\r\n        try {\r\n            const walletProvider: ICosmosWalletChains =\r\n                await initWalletChainsData(_runtime);\r\n\r\n            const action = new CosmosTransferActionService(walletProvider);\r\n\r\n            const customAssets = (pluginOptions?.customChainData ?? []).map(\r\n                (chainData) => chainData.assets\r\n            );\r\n\r\n            const transferResp = await action.execute(\r\n                paramOptions,\r\n                customAssets\r\n            );\r\n\r\n            if (_callback) {\r\n                await _callback({\r\n                    text: `Successfully transferred ${paramOptions.amount} tokens to ${paramOptions.toAddress}\\nGas paid: ${transferResp.gasPaid}\\nTransaction Hash: ${transferResp.txHash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: transferResp.txHash,\r\n                        amount: paramOptions.amount,\r\n                        recipient: transferResp.to,\r\n                        chain: cosmosTransferContent.fromChain,\r\n                    },\r\n                });\r\n\r\n                const newMemory: Memory = {\r\n                    userId: _message.agentId,\r\n                    agentId: _message.agentId,\r\n                    roomId: _message.roomId,\r\n                    content: {\r\n                        text: `Transaction ${paramOptions.amount} ${paramOptions.symbol} to address ${paramOptions.toAddress} on chain ${paramOptions.toAddress} was successfully transfered.\\n Gas paid: ${transferResp.gasPaid}. Tx hash: ${transferResp.txHash}`,\r\n                    },\r\n                };\r\n\r\n                await _runtime.messageManager.createMemory(newMemory);\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error during token transfer:\", error);\r\n\r\n            if (_callback) {\r\n                await _callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n\r\n            const newMemory: Memory = {\r\n                userId: _message.agentId,\r\n                agentId: _message.agentId,\r\n                roomId: _message.roomId,\r\n                content: {\r\n                    text: `Transaction ${paramOptions.amount} ${paramOptions.symbol} to address ${paramOptions.toAddress} on chain ${paramOptions.toAddress} was unsuccessful.`,\r\n                },\r\n            };\r\n\r\n            await _runtime.messageManager.createMemory(newMemory);\r\n\r\n            return false;\r\n        }\r\n    },\r\n    template: cosmosTransferTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const mnemonic = runtime.getSetting(\"COSMOS_RECOVERY_PHRASE\");\r\n        const availableChains = runtime.getSetting(\"COSMOS_AVAILABLE_CHAINS\");\r\n        const availableChainsArray = availableChains?.split(\",\");\r\n\r\n        return !(mnemonic && availableChains && availableChainsArray.length);\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Make transfer {{0.0001 OM}} to {{mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf}} on {{mantrachaintestnet2}}\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the transfer action?\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send {{10 OSMO}} to {{osmo13248w8dtnn07sxc3gq4l3ts4rvfyat6f4qkdd6}} on {{osmosistestnet}}\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the transfer action?\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send {{0.0001 OM}} on {{mantrachaintestnet2}} to {{mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf}}.\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Do you confirm the transfer action?\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Yes\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"\",\r\n                    action: \"COSMOS_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\r\n        \"COSMOS_SEND_TOKENS\",\r\n        \"COSMOS_TOKEN_TRANSFER\",\r\n        \"COSMOS_MOVE_TOKENS\",\r\n    ],\r\n});\r\n","import { getChainByChainName } from \"@chain-registry/utils\";\r\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\r\nimport { chains } from \"chain-registry\";\r\nimport { CosmosWallet } from \"./cosmos-wallet\";\r\nimport type {\r\n    ICosmosPluginCustomChainData,\r\n    ICosmosWalletChains,\r\n    ICosmosWalletChainsData,\r\n} from \"../interfaces\";\r\nimport { getAvailableChains } from \"../helpers/cosmos-chains\";\r\n\r\nexport class CosmosWalletChains implements ICosmosWalletChains {\r\n    public walletChainsData: ICosmosWalletChainsData = {};\r\n\r\n    private constructor(walletChainsData: ICosmosWalletChainsData) {\r\n        this.walletChainsData = walletChainsData;\r\n    }\r\n\r\n    public static async create(\r\n        mnemonic: string,\r\n        availableChainNames: string[],\r\n        customChainsData?: ICosmosPluginCustomChainData[\"chainData\"][]\r\n    ) {\r\n        const walletChainsData: ICosmosWalletChainsData = {};\r\n        const availableChains = getAvailableChains(chains, customChainsData);\r\n\r\n        for (const chainName of availableChainNames) {\r\n            const chain = getChainByChainName(availableChains, chainName);\r\n\r\n            if (!chain) {\r\n                throw new Error(`Chain ${chainName} not found`);\r\n            }\r\n\r\n            const wallet = await CosmosWallet.create(\r\n                mnemonic,\r\n                chain.bech32_prefix,\r\n                chain.apis.rpc[0].address\r\n            );\r\n\r\n            const chainRpcAddress = chain.apis?.rpc?.[0].address;\r\n\r\n            if (!chainRpcAddress) {\r\n                throw new Error(`RPC address not found for chain ${chainName}`);\r\n            }\r\n\r\n            const signingCosmWasmClient =\r\n                await SigningCosmWasmClient.connectWithSigner(\r\n                    chain.apis.rpc[0].address,\r\n                    wallet.directSecp256k1HdWallet\r\n                );\r\n\r\n            walletChainsData[chainName] = {\r\n                wallet,\r\n                signingCosmWasmClient,\r\n            };\r\n        }\r\n\r\n        return new CosmosWalletChains(walletChainsData);\r\n    }\r\n\r\n    public async getWalletAddress(chainName: string) {\r\n        return await this.walletChainsData[chainName].wallet.getWalletAddress();\r\n    }\r\n\r\n    public getSigningCosmWasmClient(chainName: string) {\r\n        return this.walletChainsData[chainName].signingCosmWasmClient;\r\n    }\r\n}\r\n","import { DirectSecp256k1HdWallet } from \"@cosmjs/proto-signing\";\r\nimport { cosmos } from \"interchain\";\r\nimport type { ICosmosWallet } from \"../interfaces\";\r\n\r\ntype RPCQueryClient = Awaited<\r\n    ReturnType<typeof cosmos.ClientFactory.createRPCQueryClient>\r\n>;\r\n\r\nexport class CosmosWallet implements ICosmosWallet {\r\n    public rpcQueryClient: RPCQueryClient;\r\n    public directSecp256k1HdWallet: DirectSecp256k1HdWallet;\r\n\r\n    private constructor(\r\n        directSecp256k1HdWallet: DirectSecp256k1HdWallet,\r\n        rpcQueryClient: RPCQueryClient\r\n    ) {\r\n        this.directSecp256k1HdWallet = directSecp256k1HdWallet;\r\n        this.rpcQueryClient = rpcQueryClient;\r\n    }\r\n\r\n    public static async create(\r\n        mnemonic: string,\r\n        chainPrefix: string,\r\n        rpcEndpoint: string\r\n    ) {\r\n        const directSecp256k1HdWallet =\r\n            await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\r\n                prefix: chainPrefix,\r\n            });\r\n\r\n        const rpcQueryClient = await cosmos.ClientFactory.createRPCQueryClient({\r\n            rpcEndpoint,\r\n        });\r\n\r\n        return new CosmosWallet(directSecp256k1HdWallet, rpcQueryClient);\r\n    }\r\n\r\n    public async getWalletAddress() {\r\n        const [account] = await this.directSecp256k1HdWallet.getAccounts();\r\n\r\n        return account.address;\r\n    }\r\n\r\n    public async getWalletBalances() {\r\n        const walletAddress = await this.getWalletAddress();\r\n\r\n        const allBalances =\r\n            await this.rpcQueryClient.cosmos.bank.v1beta1.allBalances({\r\n                address: walletAddress,\r\n            });\r\n\r\n        return allBalances.balances;\r\n    }\r\n}\r\n","import type { Chain } from \"@chain-registry/types\";\r\n\r\nexport const getAvailableChains = (chains: Chain[], customChains: Chain[]) => [\r\n    ...(chains?.filter(\r\n        (chain) =>\r\n            !(customChains ?? [])\r\n                ?.map((customChain) => customChain.chain_name)\r\n                ?.includes(chain.chain_name)\r\n    ) ?? []),\r\n    ...(customChains ?? []),\r\n];\r\n","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { CosmosWalletChains } from \"../../shared/entities/cosmos-wallet-chains-data\";\r\n\r\nexport const initWalletChainsData = async (runtime: IAgentRuntime) => {\r\n    const mnemonic = runtime.getSetting(\"COSMOS_RECOVERY_PHRASE\");\r\n    const availableChains = runtime.getSetting(\"COSMOS_AVAILABLE_CHAINS\");\r\n\r\n    if (!mnemonic) {\r\n        throw new Error(\"COSMOS_RECOVERY_PHRASE is missing\");\r\n    }\r\n\r\n    if (!availableChains) {\r\n        throw new Error(\"COSMOS_AVAILABLE_CHAINS is missing\");\r\n    }\r\n\r\n    const availableChainsArray = availableChains.split(\",\");\r\n\r\n    if (!availableChainsArray.length) {\r\n        throw new Error(\"COSMOS_AVAILABLE_CHAINS is empty\");\r\n    }\r\n\r\n    return await CosmosWalletChains.create(mnemonic, availableChainsArray);\r\n};\r\n","export const cosmosTransferTemplate = `Given the recent messages and cosmos wallet information below:\r\n{{recentMessages}}\r\n{{walletInfo}}\r\nExtract the following information about the requested transfer:\r\n1. **Amount**:\r\n   - Extract only the numeric value from the instruction.\r\n   - The value must be a string representing the amount in the display denomination (e.g., \"0.0001\" for OM, chimba, etc.). Do not include the symbol.\r\n\r\n2. **Recipient Address**:\r\n   - Must be a valid Bech32 address that matches the chain's address prefix.\r\n   - Example for \"mantra\": \"mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf\".\r\n\r\n3. **Token Symbol**:\r\n   - The symbol must be a string representing the token's display denomination (e.g., \"OM\", \"chimba\", etc.).\r\n\r\n4. **Chain name**:\r\n   - Identify the chain mentioned in the instruction where the transfer will take place (e.g., carbon, axelar, mantrachaintestnet2).\r\n   - Provide this as a string.\r\n\r\nRespond with a JSON markdown block containing only the extracted values. All fields except 'token' are required:\r\n\\`\\`\\`json\r\n{\r\n    \"symbol\": string, // The symbol of token.\r\n    \"amount\": string, // The amount to transfer as a string.\r\n    \"toAddress\": string, // The recipient's address.\r\n    \"chainName\": string // The chain name.\r\n\\`\\`\\`\r\n\r\nExample reponse for the input: \"Make transfer 0.0001 OM to mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf on mantrachaintestnet2\", the response should be:\r\n\\`\\`\\`json\r\n{\r\n    \"symbol\": \"OM\",\r\n    \"amount\": \"0.0001\",\r\n    \"toAddress\": \"mantra1pcnw46km8m5amvf7jlk2ks5std75k73aralhcf\",\r\n    \"chainName\": \"mantrachaintestnet2\"\r\n\\`\\`\\`\r\n\r\nNow respond with a JSON markdown block containing only the extracted values.\r\n`;\r\n","import {\r\n    convertDisplayUnitToBaseUnit,\r\n    getAssetBySymbol,\r\n} from \"@chain-registry/utils\";\r\nimport type { Coin } from \"@cosmjs/stargate\";\r\nimport { assets } from \"chain-registry\";\r\nimport { getPaidFeeFromReceipt } from \"../../../shared/helpers/cosmos-transaction-receipt.ts\";\r\nimport type {\r\n    ICosmosActionService,\r\n    ICosmosPluginCustomChainData,\r\n    ICosmosTransaction,\r\n    ICosmosWalletChains,\r\n} from \"../../../shared/interfaces.ts\";\r\nimport { CosmosTransactionFeeEstimator } from \"../../../shared/services/cosmos-transaction-fee-estimator.ts\";\r\nimport type { CosmosTransferParams } from \"../types.ts\";\r\nimport { getAvailableAssets } from \"../../../shared/helpers/cosmos-assets.ts\";\r\n\r\nexport class CosmosTransferActionService implements ICosmosActionService {\r\n    constructor(private cosmosWalletChains: ICosmosWalletChains) {\r\n        this.cosmosWalletChains = cosmosWalletChains;\r\n    }\r\n\r\n    async execute(\r\n        params: CosmosTransferParams,\r\n        customChainAssets?: ICosmosPluginCustomChainData[\"assets\"][]\r\n    ): Promise<ICosmosTransaction> {\r\n        const signingCosmWasmClient =\r\n            this.cosmosWalletChains.getSigningCosmWasmClient(params.chainName);\r\n\r\n        const senderAddress = await this.cosmosWalletChains.getWalletAddress(\r\n            params.chainName\r\n        );\r\n\r\n        if (!senderAddress) {\r\n            throw new Error(\r\n                `Cannot get wallet address for chain ${params.chainName}`\r\n            );\r\n        }\r\n\r\n        if (!params.toAddress) {\r\n            throw new Error(\"No receiver address\");\r\n        }\r\n\r\n        if (!params.symbol) {\r\n            throw new Error(\"No symbol\");\r\n        }\r\n\r\n        const availableAssets = getAvailableAssets(assets, customChainAssets);\r\n\r\n        const coin: Coin = {\r\n            denom: getAssetBySymbol(\r\n                availableAssets,\r\n                params.symbol,\r\n                params.chainName\r\n            ).base,\r\n            amount: convertDisplayUnitToBaseUnit(\r\n                availableAssets,\r\n                params.symbol,\r\n                params.amount,\r\n                params.chainName\r\n            ),\r\n        };\r\n\r\n        const gasFee =\r\n            await CosmosTransactionFeeEstimator.estimateGasForCoinTransfer(\r\n                signingCosmWasmClient,\r\n                senderAddress,\r\n                params.toAddress,\r\n                [coin]\r\n            );\r\n\r\n        const txDeliveryResponse = await signingCosmWasmClient.sendTokens(\r\n            senderAddress,\r\n            params.toAddress,\r\n            [coin],\r\n            { gas: gasFee.toString(), amount: [{ ...coin, amount: gasFee.toString() }] }\r\n        );\r\n\r\n        const gasPaid = getPaidFeeFromReceipt(txDeliveryResponse);\r\n\r\n        return {\r\n            from: senderAddress,\r\n            to: params.toAddress,\r\n            gasPaid,\r\n            txHash: txDeliveryResponse.transactionHash,\r\n        };\r\n    }\r\n}\r\n","import type {\r\n    DeliverTxResponse,\r\n    ExecuteResult,\r\n} from \"@cosmjs/cosmwasm-stargate\";\r\n\r\nconst DEFUALT_EVENTS = [\r\n    { eventName: \"fee_pay\", attributeType: \"fee\" },\r\n    { eventName: \"tip_refund\", attributeType: \"tip\" },\r\n];\r\n\r\nexport const getPaidFeeFromReceipt = (\r\n    receipt: ExecuteResult | DeliverTxResponse,\r\n    eventsToPickGasFor = DEFUALT_EVENTS\r\n) => {\r\n    const selectedEvents = receipt.events.filter(({ type }) =>\r\n        eventsToPickGasFor.map(({ eventName }) => eventName).includes(type)\r\n    );\r\n\r\n    return selectedEvents.reduce<number>((acc, { attributes }) => {\r\n        return (\r\n            acc +\r\n            attributes.reduce<number>((_acc, { key, value }) => {\r\n                if (\r\n                    eventsToPickGasFor.some(\r\n                        ({ attributeType }) => attributeType === key\r\n                    )\r\n                ) {\r\n                    const testValue = value.match(/\\d+/)?.[0];\r\n                    const testValueAsNumber = Number(testValue);\r\n\r\n                    if (Number.isNaN(testValueAsNumber)) {\r\n                        return _acc;\r\n                    }\r\n\r\n                    _acc = _acc + testValueAsNumber;\r\n\r\n                    return _acc;\r\n                }\r\n\r\n                return _acc;\r\n            }, 0)\r\n        );\r\n    }, 0);\r\n};\r\n","import type { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\r\nimport type { EncodeObject } from \"@cosmjs/proto-signing\";\r\nimport type { Coin, MsgSendEncodeObject } from \"@cosmjs/stargate\";\r\n\r\nexport class CosmosTransactionFeeEstimator {\r\n    private static async estimateGasForTransaction<\r\n        Message extends readonly EncodeObject[],\r\n    >(\r\n        signingCosmWasmClient: SigningCosmWasmClient,\r\n        senderAddress: string,\r\n        message: Message,\r\n        memo = \"\"\r\n    ): Promise<number> {\r\n        const estimatedGas = await signingCosmWasmClient.simulate(\r\n            senderAddress,\r\n            message,\r\n            memo\r\n        );\r\n\r\n        // Add 20% to the estimated gas to make sure we have enough gas to cover the transaction\r\n        const safeEstimatedGas = Math.ceil(estimatedGas * 1.2);\r\n\r\n        return safeEstimatedGas;\r\n    }\r\n\r\n    static estimateGasForCoinTransfer(\r\n        signingCosmWasmClient: SigningCosmWasmClient,\r\n        senderAddress: string,\r\n        recipientAddress: string,\r\n        amount: readonly Coin[],\r\n        memo = \"\"\r\n    ): Promise<number> {\r\n        return this.estimateGasForTransaction<MsgSendEncodeObject[]>(\r\n            signingCosmWasmClient,\r\n            senderAddress,\r\n            [\r\n                {\r\n                    typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\r\n                    value: {\r\n                        fromAddress: senderAddress,\r\n                        toAddress: recipientAddress,\r\n                        amount: [...amount],\r\n                    },\r\n                },\r\n            ],\r\n            memo\r\n        );\r\n    }\r\n}\r\n","import type { AssetList } from \"@chain-registry/types\";\r\n\r\nexport const getAvailableAssets = (\r\n    assets: AssetList[],\r\n    customAssets: AssetList[]\r\n) => {\r\n    const result: AssetList[] = [];\r\n    const safeAssets = assets || [];\r\n    const safeCustomAssets = customAssets || [];\r\n\r\n    // Get custom asset chain names for faster lookup\r\n    const customChainNames = new Set(\r\n        safeCustomAssets.map(asset => asset.chain_name)\r\n    );\r\n\r\n    // Add non-duplicate assets\r\n    for (const asset of safeAssets) {\r\n        if (!customChainNames.has(asset.chain_name)) {\r\n            result.push(asset);\r\n        }\r\n    }\r\n\r\n    // Add all custom assets\r\n    result.push(...safeCustomAssets);\r\n\r\n    return result;\r\n}","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport {\r\n    convertBaseUnitToDisplayUnit,\r\n    getSymbolByDenom,\r\n} from \"@chain-registry/utils\";\r\nimport { assets } from \"chain-registry\";\r\nimport { initWalletChainsData } from \"./utils\";\r\nimport { ICosmosPluginOptions } from \"../../shared/interfaces\";\r\nimport { getAvailableAssets } from \"../../shared/helpers/cosmos-assets\";\r\n\r\nexport const createCosmosWalletProvider = (\r\n    pluginOptions: ICosmosPluginOptions\r\n) => ({\r\n    get: async (runtime: IAgentRuntime) => {\r\n        let providerContextMessage = \"\";\r\n\r\n        const customAssets = (pluginOptions?.customChainData ?? []).map(\r\n            (chainData) => chainData.assets\r\n        );\r\n\r\n        const availableAssets = getAvailableAssets(assets, customAssets);\r\n\r\n        try {\r\n            const provider = await initWalletChainsData(runtime);\r\n\r\n            for (const [chainName, { wallet }] of Object.entries(\r\n                provider.walletChainsData\r\n            )) {\r\n                const address = await wallet.getWalletAddress();\r\n                const balances = await wallet.getWalletBalances();\r\n\r\n                const convertedCoinsToDisplayDenom = balances.map((balance) => {\r\n                    const symbol = getSymbolByDenom(\r\n                        availableAssets,\r\n                        balance.denom,\r\n                        chainName\r\n                    );\r\n\r\n                    return {\r\n                        amount: symbol\r\n                            ? convertBaseUnitToDisplayUnit(\r\n                                  availableAssets,\r\n                                  symbol,\r\n                                  balance.amount,\r\n                                  chainName\r\n                              )\r\n                            : balance.amount,\r\n                        symbol: symbol ?? balance.denom,\r\n                    };\r\n                });\r\n\r\n                const balancesToString = convertedCoinsToDisplayDenom\r\n                    .map((balance) => `- ${balance.amount} ${balance.symbol}`)\r\n                    .join(\"\\n\");\r\n\r\n                providerContextMessage += `Chain: ${chainName}\\nAddress: ${address}\\nBalances:\\n${balancesToString}\\n________________\\n`;\r\n            }\r\n\r\n            return providerContextMessage;\r\n        } catch (error) {\r\n            console.error(\r\n                \"Error Initializing in Cosmos wallet provider:\",\r\n                error\r\n            );\r\n\r\n            return null;\r\n        }\r\n    },\r\n});\r\n","import type { Plugin } from \"@elizaos/core\";\r\nimport { createTransferAction } from \"./actions/transfer\";\r\nimport { createCosmosWalletProvider } from \"./providers/wallet\";\r\nimport { ICosmosPluginOptions } from \"./shared/interfaces\";\r\n\r\nexport const createCosmosPlugin = (\r\n    pluginOptions?: ICosmosPluginOptions\r\n): Plugin => ({\r\n    name: \"cosmos\",\r\n    description: \"Cosmos blockchain integration plugin\",\r\n    providers: [createCosmosWalletProvider(pluginOptions)],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [createTransferAction(pluginOptions)],\r\n});\r\n\r\nexport default createCosmosPlugin;\r\n"],"mappings":"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","names":["chains","assets","assets","assets"]}