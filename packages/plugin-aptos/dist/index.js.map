{"version":3,"sources":["../src/actions/transfer.ts","../src/providers/wallet.ts","../src/constants.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\r\nimport {\r\n    ActionExample,\r\n    Content,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport { composeContext } from \"@elizaos/core\";\r\nimport { generateObjectDeprecated } from \"@elizaos/core\";\r\nimport {\r\n    Account,\r\n    Aptos,\r\n    AptosConfig,\r\n    Ed25519PrivateKey,\r\n    Network,\r\n    PrivateKey,\r\n    PrivateKeyVariants,\r\n} from \"@aptos-labs/ts-sdk\";\r\nimport { walletProvider } from \"../providers/wallet\";\r\n\r\nexport interface TransferContent extends Content {\r\n    recipient: string;\r\n    amount: string | number;\r\n}\r\n\r\nfunction isTransferContent(content: any): content is TransferContent {\r\n    elizaLogger.log(\"Content for transfer\", content);\r\n    return (\r\n        typeof content.recipient === \"string\" &&\r\n        (typeof content.amount === \"string\" ||\r\n            typeof content.amount === \"number\")\r\n    );\r\n}\r\n\r\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"recipient\": \"0x2badda48c062e861ef17a96a806c451fd296a49f45b272dee17f85b0e32663fd\",\r\n    \"amount\": \"1000\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information about the requested token transfer:\r\n- Recipient wallet address\r\n- Amount to transfer\r\n\r\nRespond with a JSON markdown block containing only the extracted values.`;\r\n\r\nexport default {\r\n    name: \"SEND_TOKEN\",\r\n    similes: [\r\n        \"TRANSFER_TOKEN\",\r\n        \"TRANSFER_TOKENS\",\r\n        \"SEND_TOKENS\",\r\n        \"SEND_APT\",\r\n        \"PAY\",\r\n    ],\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Validating apt transfer from user:\", message.userId);\r\n        //add custom validate logic here\r\n        /*\r\n            const adminIds = runtime.getSetting(\"ADMIN_USER_IDS\")?.split(\",\") || [];\r\n            //elizaLogger.log(\"Admin IDs from settings:\", adminIds);\r\n\r\n            const isAdmin = adminIds.includes(message.userId);\r\n\r\n            if (isAdmin) {\r\n                //elizaLogger.log(`Authorized transfer from user: ${message.userId}`);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                //elizaLogger.log(`Unauthorized transfer attempt from user: ${message.userId}`);\r\n                return false;\r\n            }\r\n            */\r\n        return false;\r\n    },\r\n    description: \"Transfer tokens from the agent's wallet to another address\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\r\n\r\n        const walletInfo = await walletProvider.get(runtime, message, state);\r\n        state.walletInfo = walletInfo;\r\n\r\n        // Initialize or update state\r\n        if (!state) {\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        // Compose transfer context\r\n        const transferContext = composeContext({\r\n            state,\r\n            template: transferTemplate,\r\n        });\r\n\r\n        // Generate transfer content\r\n        const content = await generateObjectDeprecated({\r\n            runtime,\r\n            context: transferContext,\r\n            modelClass: ModelClass.SMALL,\r\n        });\r\n\r\n        // Validate transfer content\r\n        if (!isTransferContent(content)) {\r\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\r\n            if (callback) {\r\n                callback({\r\n                    text: \"Unable to process transfer request. Invalid content provided.\",\r\n                    content: { error: \"Invalid transfer content\" },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const privateKey = runtime.getSetting(\"APTOS_PRIVATE_KEY\");\r\n            const aptosAccount = Account.fromPrivateKey({\r\n                privateKey: new Ed25519PrivateKey(\r\n                    PrivateKey.formatPrivateKey(\r\n                        privateKey,\r\n                        PrivateKeyVariants.Ed25519\r\n                    )\r\n                ),\r\n            });\r\n            const network = runtime.getSetting(\"APTOS_NETWORK\") as Network;\r\n            const aptosClient = new Aptos(\r\n                new AptosConfig({\r\n                    network,\r\n                })\r\n            );\r\n\r\n            const APT_DECIMALS = 8;\r\n            const adjustedAmount = BigInt(\r\n                Number(content.amount) * Math.pow(10, APT_DECIMALS)\r\n            );\r\n            elizaLogger.log(\r\n                `Transferring: ${content.amount} tokens (${adjustedAmount} base units)`\r\n            );\r\n\r\n            const tx = await aptosClient.transaction.build.simple({\r\n                sender: aptosAccount.accountAddress.toStringLong(),\r\n                data: {\r\n                    function: \"0x1::aptos_account::transfer\",\r\n                    typeArguments: [],\r\n                    functionArguments: [content.recipient, adjustedAmount],\r\n                },\r\n            });\r\n            const committedTransaction =\r\n                await aptosClient.signAndSubmitTransaction({\r\n                    signer: aptosAccount,\r\n                    transaction: tx,\r\n                });\r\n            const executedTransaction = await aptosClient.waitForTransaction({\r\n                transactionHash: committedTransaction.hash,\r\n            });\r\n\r\n            elizaLogger.log(\"Transfer successful:\", executedTransaction.hash);\r\n\r\n            if (callback) {\r\n                callback({\r\n                    text: `Successfully transferred ${content.amount} APT to ${content.recipient}, Transaction: ${executedTransaction.hash}`,\r\n                    content: {\r\n                        success: true,\r\n                        hash: executedTransaction.hash,\r\n                        amount: content.amount,\r\n                        recipient: content.recipient,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token transfer:\", error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error transferring tokens: ${error.message}`,\r\n                    content: { error: error.message },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Send 69 APT tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"I'll send 69 APT tokens now...\",\r\n                    action: \"SEND_TOKEN\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Successfully sent 69 APT tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0, Transaction: 0x39a8c432d9bdad993a33cc1faf2e9b58fb7dd940c0425f1d6db3997e4b4b05c0\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import {\r\n    IAgentRuntime,\r\n    ICacheManager,\r\n    Memory,\r\n    Provider,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport {\r\n    Account,\r\n    Aptos,\r\n    AptosConfig,\r\n    Ed25519PrivateKey,\r\n    Network,\r\n    PrivateKey,\r\n    PrivateKeyVariants,\r\n} from \"@aptos-labs/ts-sdk\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport NodeCache from \"node-cache\";\r\nimport * as path from \"path\";\r\nimport { APT_DECIMALS } from \"../constants\";\r\n\r\n// Provider configuration\r\nconst PROVIDER_CONFIG = {\r\n    MAX_RETRIES: 3,\r\n    RETRY_DELAY: 2000,\r\n};\r\n\r\ninterface WalletPortfolio {\r\n    totalUsd: string;\r\n    totalApt: string;\r\n}\r\n\r\ninterface Prices {\r\n    apt: { usd: string };\r\n}\r\n\r\nexport class WalletProvider {\r\n    private cache: NodeCache;\r\n    private cacheKey: string = \"aptos/wallet\";\r\n\r\n    constructor(\r\n        private aptosClient: Aptos,\r\n        private address: string,\r\n        private cacheManager: ICacheManager\r\n    ) {\r\n        this.cache = new NodeCache({ stdTTL: 300 }); // Cache TTL set to 5 minutes\r\n    }\r\n\r\n    private async readFromCache<T>(key: string): Promise<T | null> {\r\n        const cached = await this.cacheManager.get<T>(\r\n            path.join(this.cacheKey, key)\r\n        );\r\n        return cached;\r\n    }\r\n\r\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\r\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\r\n            expires: Date.now() + 5 * 60 * 1000,\r\n        });\r\n    }\r\n\r\n    private async getCachedData<T>(key: string): Promise<T | null> {\r\n        // Check in-memory cache first\r\n        const cachedData = this.cache.get<T>(key);\r\n        if (cachedData) {\r\n            return cachedData;\r\n        }\r\n\r\n        // Check file-based cache\r\n        const fileCachedData = await this.readFromCache<T>(key);\r\n        if (fileCachedData) {\r\n            // Populate in-memory cache\r\n            this.cache.set(key, fileCachedData);\r\n            return fileCachedData;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\r\n        // Set in-memory cache\r\n        this.cache.set(cacheKey, data);\r\n\r\n        // Write to file-based cache\r\n        await this.writeToCache(cacheKey, data);\r\n    }\r\n\r\n    private async fetchPricesWithRetry() {\r\n        let lastError: Error;\r\n\r\n        for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\r\n            try {\r\n                const cellanaAptUsdcPoolAddr =\r\n                    \"0x234f0be57d6acfb2f0f19c17053617311a8d03c9ce358bdf9cd5c460e4a02b7c\";\r\n                const response = await fetch(\r\n                    `https://api.dexscreener.com/latest/dex/pairs/aptos/${cellanaAptUsdcPoolAddr}`\r\n                );\r\n\r\n                if (!response.ok) {\r\n                    const errorText = await response.text();\r\n                    throw new Error(\r\n                        `HTTP error! status: ${response.status}, message: ${errorText}`\r\n                    );\r\n                }\r\n\r\n                const data = await response.json();\r\n                return data;\r\n            } catch (error) {\r\n                console.error(`Attempt ${i + 1} failed:`, error);\r\n                lastError = error;\r\n                if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\r\n                    const delay = PROVIDER_CONFIG.RETRY_DELAY * Math.pow(2, i);\r\n                    await new Promise((resolve) => setTimeout(resolve, delay));\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n\r\n        console.error(\r\n            \"All attempts failed. Throwing the last error:\",\r\n            lastError\r\n        );\r\n        throw lastError;\r\n    }\r\n\r\n    async fetchPortfolioValue(): Promise<WalletPortfolio> {\r\n        try {\r\n            const cacheKey = `portfolio-${this.address}`;\r\n            const cachedValue =\r\n                await this.getCachedData<WalletPortfolio>(cacheKey);\r\n\r\n            if (cachedValue) {\r\n                console.log(\"Cache hit for fetchPortfolioValue\", cachedValue);\r\n                return cachedValue;\r\n            }\r\n            console.log(\"Cache miss for fetchPortfolioValue\");\r\n\r\n            const prices = await this.fetchPrices().catch((error) => {\r\n                console.error(\"Error fetching APT price:\", error);\r\n                throw error;\r\n            });\r\n            const aptAmountOnChain = await this.aptosClient\r\n                .getAccountAPTAmount({\r\n                    accountAddress: this.address,\r\n                })\r\n                .catch((error) => {\r\n                    console.error(\"Error fetching APT amount:\", error);\r\n                    throw error;\r\n                });\r\n\r\n            const aptAmount = new BigNumber(aptAmountOnChain).div(\r\n                new BigNumber(10).pow(APT_DECIMALS)\r\n            );\r\n            const totalUsd = new BigNumber(aptAmount).times(prices.apt.usd);\r\n\r\n            const portfolio = {\r\n                totalUsd: totalUsd.toString(),\r\n                totalApt: aptAmount.toString(),\r\n            };\r\n            this.setCachedData(cacheKey, portfolio);\r\n            console.log(\"Fetched portfolio:\", portfolio);\r\n            return portfolio;\r\n        } catch (error) {\r\n            console.error(\"Error fetching portfolio:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async fetchPrices(): Promise<Prices> {\r\n        try {\r\n            const cacheKey = \"prices\";\r\n            const cachedValue = await this.getCachedData<Prices>(cacheKey);\r\n\r\n            if (cachedValue) {\r\n                console.log(\"Cache hit for fetchPrices\");\r\n                return cachedValue;\r\n            }\r\n            console.log(\"Cache miss for fetchPrices\");\r\n\r\n            const aptPriceData = await this.fetchPricesWithRetry().catch(\r\n                (error) => {\r\n                    console.error(\"Error fetching APT price:\", error);\r\n                    throw error;\r\n                }\r\n            );\r\n            const prices: Prices = {\r\n                apt: { usd: aptPriceData.pair.priceUsd },\r\n            };\r\n            this.setCachedData(cacheKey, prices);\r\n            return prices;\r\n        } catch (error) {\r\n            console.error(\"Error fetching prices:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    formatPortfolio(runtime, portfolio: WalletPortfolio): string {\r\n        let output = `${runtime.character.name}\\n`;\r\n        output += `Wallet Address: ${this.address}\\n`;\r\n\r\n        const totalUsdFormatted = new BigNumber(portfolio.totalUsd).toFixed(2);\r\n        const totalAptFormatted = new BigNumber(portfolio.totalApt).toFixed(4);\r\n\r\n        output += `Total Value: $${totalUsdFormatted} (${totalAptFormatted} APT)\\n`;\r\n\r\n        return output;\r\n    }\r\n\r\n    async getFormattedPortfolio(runtime): Promise<string> {\r\n        try {\r\n            const portfolio = await this.fetchPortfolioValue();\r\n            return this.formatPortfolio(runtime, portfolio);\r\n        } catch (error) {\r\n            console.error(\"Error generating portfolio report:\", error);\r\n            return \"Unable to fetch wallet information. Please try again later.\";\r\n        }\r\n    }\r\n}\r\n\r\nconst walletProvider: Provider = {\r\n    get: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State\r\n    ): Promise<string | null> => {\r\n        const privateKey = runtime.getSetting(\"APTOS_PRIVATE_KEY\");\r\n        const aptosAccount = Account.fromPrivateKey({\r\n            privateKey: new Ed25519PrivateKey(\r\n                PrivateKey.formatPrivateKey(\r\n                    privateKey,\r\n                    PrivateKeyVariants.Ed25519\r\n                )\r\n            ),\r\n        });\r\n        const network = runtime.getSetting(\"APTOS_NETWORK\") as Network;\r\n\r\n        try {\r\n            const aptosClient = new Aptos(\r\n                new AptosConfig({\r\n                    network,\r\n                })\r\n            );\r\n            const provider = new WalletProvider(\r\n                aptosClient,\r\n                aptosAccount.accountAddress.toStringLong(),\r\n                runtime.cacheManager\r\n            );\r\n            return await provider.getFormattedPortfolio(runtime);\r\n        } catch (error) {\r\n            console.error(\"Error in wallet provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n\r\n// Module exports\r\nexport { walletProvider };\r\n","export const APT_DECIMALS = 8;\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport transferToken from \"./actions/transfer.ts\";\r\nimport { WalletProvider, walletProvider } from \"./providers/wallet.ts\";\r\n\r\nexport { WalletProvider, transferToken as TransferAptosToken };\r\n\r\nexport const aptosPlugin: Plugin = {\r\n    name: \"aptos\",\r\n    description: \"Aptos Plugin for Eliza\",\r\n    actions: [transferToken],\r\n    evaluators: [],\r\n    providers: [walletProvider],\r\n};\r\n\r\nexport default aptosPlugin;\r\n"],"mappings":"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","names":["Account","Aptos","AptosConfig","Ed25519PrivateKey","PrivateKey","PrivateKeyVariants","Account","Ed25519PrivateKey","PrivateKey","PrivateKeyVariants","Aptos","AptosConfig","APT_DECIMALS"]}