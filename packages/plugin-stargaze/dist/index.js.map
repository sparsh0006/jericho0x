{"version":3,"sources":["../src/actions/getLatestNFT.ts","../src/environment.ts","../src/utils/debug.ts","../src/actions/getCollectionStats.ts","../src/actions/getTokenSales.ts","../src/index.ts"],"sourcesContent":["import {\r\n    ActionExample,\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport axios from \"axios\";\r\nimport { validateStargazeConfig } from \"../environment\";\r\nimport { debugLog } from \"../utils/debug\";\r\n\r\nexport interface GetLatestNFTContent extends Content {\r\n    collectionAddr: string;\r\n    limit: number;\r\n}\r\n\r\nconst getLatestNFTTemplate = `Given the message, extract information about the NFT collection request.\r\n\r\nFormat the response as a JSON object with these fields:\r\n- collectionAddr: the collection address or name\r\n- limit: number of NFTs to fetch (default to 1 for latest)\r\n\r\nExample response:\r\nFor \"Show me the latest NFT from ammelia\":\r\n\\`\\`\\`json\r\n{\r\n    \"collectionAddr\": \"ammelia\",\r\n    \"limit\": 1\r\n}\r\n\\`\\`\\`\r\n\r\nFor \"Show me the latest NFT from Badkids\":\r\n\\`\\`\\`json\r\n{\r\n    \"collectionAddr\": \"badkids\",\r\n    \"limit\": 1\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nExtract the collection information from the above messages and respond with the appropriate JSON.`;\r\n\r\n\r\nconst GRAPHQL_QUERY = `\r\nquery MarketplaceTokens($collectionAddr: String!, $limit: Int) {\r\n    tokens(\r\n        collectionAddr: $collectionAddr\r\n        limit: $limit\r\n        sortBy: MINTED_DESC\r\n    ) {\r\n        tokens {\r\n            id\r\n            tokenId\r\n            name\r\n            media {\r\n                url\r\n            }\r\n            listPrice {\r\n                amount\r\n                symbol\r\n            }\r\n        }\r\n        pageInfo {\r\n            total\r\n            offset\r\n            limit\r\n        }\r\n    }\r\n}`;\r\n\r\nexport default {\r\n    name: \"GET_LATEST_NFT\",\r\n    similes: [\"SHOW_LATEST_NFT\", \"FETCH_LATEST_NFT\"],\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"üîÑ Validating Stargaze configuration...\");\r\n        try {\r\n            const config = await validateStargazeConfig(runtime);\r\n            debugLog.validation(config);\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            return false;\r\n        }\r\n    },\r\n    description: \"Get the latest NFT from a Stargaze collection\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"üöÄ Starting Stargaze GET_LATEST_NFT handler...\");\r\n\r\n        if (!state) {\r\n            elizaLogger.log(\"Creating new state...\");\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            elizaLogger.log(\"Updating existing state...\");\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        try {\r\n            elizaLogger.log(\"Composing NFT context...\");\r\n            const nftContext = composeContext({\r\n                state,\r\n                template: getLatestNFTTemplate,\r\n            });\r\n\r\n            elizaLogger.log(\"Generating content from context...\");\r\n            const content = (await generateObjectDeprecated({\r\n                runtime,\r\n                context: nftContext,\r\n                modelClass: ModelClass.LARGE,\r\n            })) as unknown as GetLatestNFTContent;\r\n\r\n            if (!content || !content.collectionAddr) {\r\n                throw new Error(\"Invalid or missing collection address in parsed content\");\r\n            }\r\n\r\n            debugLog.validation(content);\r\n\r\n            const config = await validateStargazeConfig(runtime);\r\n\r\n            const requestData = {\r\n                query: GRAPHQL_QUERY,\r\n                variables: {\r\n                    collectionAddr: content.collectionAddr,\r\n                    limit: content.limit || 1,\r\n                },\r\n            };\r\n\r\n            debugLog.request('POST', config.STARGAZE_ENDPOINT, requestData);\r\n\r\n            const response = await axios.post(\r\n                config.STARGAZE_ENDPOINT,\r\n                requestData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                }\r\n            );\r\n\r\n            debugLog.response(response);\r\n\r\n            if (!response.data?.data?.tokens?.tokens) {\r\n                throw new Error(\"Unexpected API response structure\");\r\n            }\r\n\r\n            const latestNFT = response.data.data.tokens.tokens[0];\r\n            if (!latestNFT) {\r\n                throw new Error(`No NFTs found in collection: ${content.collectionAddr}`);\r\n            }\r\n\r\n            if (callback) {\r\n                const message = {\r\n                    text: `Latest NFT from ${content.collectionAddr}:\\nName: ${latestNFT.name}\\nToken ID: ${latestNFT.tokenId}\\nImage: ${latestNFT.media.url}`,\r\n                    content: latestNFT,\r\n                };\r\n                elizaLogger.log(\"‚úÖ Sending callback with NFT data:\", message);\r\n                callback(message);\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error fetching collection stats: ${error}`,\r\n                    content: { error: error },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Show me the latest NFT from ammelia collection\",\r\n                },\r\n            },\r\n\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"whats the latest mint for badkids in stargaze?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"I'll fetch the latest NFT from the ammelia collection.\",\r\n                    action: \"GET_LATEST_NFT\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{agent}}\",\r\n                content: {\r\n                    text: \"Here's the latest NFT: {{dynamic}}\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n} as Action;","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nexport const stargazeEnvSchema = z.object({\r\n    STARGAZE_ENDPOINT: z.string().min(1, \"Stargaze API endpoint is required\"),\r\n});\r\n\r\nexport type StargazeConfig = z.infer<typeof stargazeEnvSchema>;\r\n\r\nexport async function validateStargazeConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<StargazeConfig> {\r\n    try {\r\n        const config = {\r\n            STARGAZE_ENDPOINT: runtime.getSetting(\"STARGAZE_ENDPOINT\"),\r\n        };\r\n        return stargazeEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `Stargaze configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}","import { elizaLogger } from \"@elizaos/core\";\r\n\r\nexport const debugLog = {\r\n    request: (method: string, url: string, data?: any) => {\r\n        elizaLogger.log(\"üåê API Request:\", {\r\n            method,\r\n            url,\r\n            data: data || \"No data\"\r\n        });\r\n    },\r\n\r\n    response: (response: any) => {\r\n        elizaLogger.log(\"‚úÖ API Response:\", {\r\n            status: response?.status,\r\n            data: response?.data || \"No data\"\r\n        });\r\n    },\r\n\r\n    error: (error: any) => {\r\n        elizaLogger.error(\"‚õî Error Details:\", {\r\n            message: error?.message,\r\n            response: {\r\n                status: error?.response?.status,\r\n                data: error?.response?.data\r\n            },\r\n            config: {\r\n                url: error?.config?.url,\r\n                method: error?.config?.method,\r\n                data: error?.config?.data\r\n            }\r\n        });\r\n    },\r\n\r\n    validation: (config: any) => {\r\n        elizaLogger.log(\"üîç Config Validation:\", config);\r\n    }\r\n};","import {\r\n    ActionExample,\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport axios from \"axios\";\r\nimport { validateStargazeConfig } from \"../environment\";\r\nimport { debugLog } from \"../utils/debug\";\r\n\r\nexport interface GetCollectionStatsContent extends Content {\r\n    collectionAddr: string;\r\n}\r\n\r\nconst COLLECTION_STATS_QUERY = `\r\nquery CollectionStats($collectionAddr: String!) {\r\n    collection(address: $collectionAddr) {\r\n        contractAddress\r\n        name\r\n        stats {\r\n            numOwners\r\n            bestOffer\r\n            volumeTotal\r\n            volume24Hour\r\n            salesCountTotal\r\n            tokensMintedPercent\r\n            uniqueOwnerPercent\r\n            change24HourPercent\r\n            marketCap\r\n            mintCount24hour\r\n            mintVolume24hour\r\n            volumeUsdTotal\r\n            volumeUsd24hour\r\n        }\r\n    }\r\n}`;\r\n\r\n// Add template for content generation\r\nconst getCollectionStatsTemplate = `Given the message, extract the collection address for fetching Stargaze stats.\r\n\r\nFormat the response as a JSON object with this field:\r\n- collectionAddr: the collection address or name (required)\r\n\r\nExample response for \"Show me stats for ammelia collection\":\r\n\\`\\`\\`json\r\n{\r\n    \"collectionAddr\": \"ammelia\"\r\n}\r\n\\`\\`\\`\r\n\r\nExample response for \"Show me stats for stars10n0m58ztlr9wvwkgjuek2m2k0dn5pgrhfw9eahg9p8e5qtvn964suc995j collection\":\r\n\\`\\`\\`json\r\n{\r\n    \"collectionAddr\": \"stars10n0m58ztlr9wvwkgjuek2m2k0dn5pgrhfw9eahg9p8e5qtvn964suc995j\"\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nExtract the collection address from the above messages and respond with the appropriate JSON.`;\r\n\r\nexport default {\r\n    name: \"GET_COLLECTION_STATS\",\r\n    similes: [\"CHECK_COLLECTION_STATS\", \"COLLECTION_INFO\"],\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"üîÑ Validating Stargaze configuration...\");\r\n        try {\r\n            const config = await validateStargazeConfig(runtime);\r\n            debugLog.validation(config);\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            return false;\r\n        }\r\n    },\r\n    description: \"Get detailed statistics for a Stargaze collection\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"üöÄ Starting Stargaze GET_COLLECTION_STATS handler...\");\r\n\r\n        if (!state) {\r\n            elizaLogger.log(\"Creating new state...\");\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            elizaLogger.log(\"Updating existing state...\");\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        try {\r\n            elizaLogger.log(\"Composing collection stats context...\");\r\n            const statsContext = composeContext({\r\n                state,\r\n                template: getCollectionStatsTemplate,\r\n            });\r\n\r\n            elizaLogger.log(\"Generating content from context...\");\r\n            const content = (await generateObjectDeprecated({\r\n                runtime,\r\n                context: statsContext,\r\n                modelClass: ModelClass.LARGE,\r\n            })) as unknown as GetCollectionStatsContent;\r\n\r\n            if (!content || !content.collectionAddr) {\r\n                throw new Error(\"Invalid or missing collection address in parsed content\");\r\n            }\r\n\r\n            debugLog.validation(content);\r\n\r\n            const config = await validateStargazeConfig(runtime);\r\n            \r\n            const requestData = {\r\n                query: COLLECTION_STATS_QUERY,\r\n                variables: {\r\n                    collectionAddr: content.collectionAddr,\r\n                },\r\n            };\r\n\r\n            debugLog.request('POST', config.STARGAZE_ENDPOINT, requestData);\r\n\r\n            const response = await axios.post(\r\n                config.STARGAZE_ENDPOINT,\r\n                requestData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                }\r\n            );\r\n\r\n            debugLog.response(response);\r\n\r\n            const stats = response.data?.data?.collection?.stats;\r\n            const name = response.data?.data?.collection?.name;\r\n\r\n            if (!stats) {\r\n                throw new Error(\"No stats found for collection\");\r\n            }\r\n\r\n            // Format numerical values\r\n            const formatValue = (value: number) => \r\n                value ? Number(value).toLocaleString(undefined, { \r\n                    maximumFractionDigits: 2 \r\n                }) : '0';\r\n\r\n            // Format percentage values\r\n            const formatPercent = (value: number) => \r\n                value ? `${Number(value).toFixed(2)}%` : '0%';\r\n\r\n            if (callback) {\r\n                const message = {\r\n                    text: `Collection Stats for ${name} (${content.collectionAddr}):\r\n- Total Volume: ${formatValue(stats.volumeUsdTotal)} USD\r\n- 24h Volume: ${formatValue(stats.volumeUsd24hour)} USD\r\n- Total Sales: ${formatValue(stats.salesCountTotal)}\r\n- Unique Owners: ${formatValue(stats.numOwners)}\r\n- Owner Ratio: ${formatPercent(stats.uniqueOwnerPercent)}\r\n- Minted: ${formatPercent(stats.tokensMintedPercent)}\r\n- 24h Change: ${formatPercent(stats.change24HourPercent)}\r\n- 24h Mints: ${formatValue(stats.mintCount24hour)}\r\n- Market Cap: ${formatValue(stats.marketCap)} USD`,\r\n                    content: stats,\r\n                };\r\n                elizaLogger.log(\"‚úÖ Sending callback with collection stats:\", message);\r\n                callback(message);\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error fetching collection stats: ${error}`,\r\n                    content: { error: error },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [[\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"Show me stats for collection ammelia\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"I'll check the stats for collection ammelia...\",\r\n                action: \"GET_COLLECTION_STATS\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"Show me stats for collection {collection address}\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"I'll check the stats for collection {collection address}...\",\r\n                action: \"GET_COLLECTION_STATS\",\r\n            },\r\n        },\r\n    ]],\r\n} as Action;","import {\r\n    ActionExample,\r\n    composeContext,\r\n    Content,\r\n    elizaLogger,\r\n    generateObjectDeprecated,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport axios from \"axios\";\r\nimport { debugLog } from \"../utils/debug\";\r\nimport { validateStargazeConfig } from \"../environment\";\r\nimport { TokenSale, TokenSalesResponse } from \"../types\";\r\n\r\nconst getTokenSalesTemplate = `Given the message, extract the collection address for fetching Stargaze sales data.\r\n\r\nFormat the response as a JSON object with these fields:\r\n- collectionAddr: the collection address or name (required)\r\n- limit: number of sales to fetch (default to 5)\r\n\r\nExample response:\r\n\\`\\`\\`json\r\n{\r\n    \"collectionAddr\": \"ammelia\",\r\n    \"limit\": 5\r\n}\r\n\\`\\`\\`\r\n\r\n{{recentMessages}}\r\n\r\nExtract the collection information from the above messages and respond with the appropriate JSON.`;\r\n\r\nexport const TOKEN_SALES_QUERY = `\r\nquery TokenSales($collectionAddr: String!, $limit: Int) {\r\n    tokenSales(\r\n        filterByCollectionAddrs: [$collectionAddr]\r\n        limit: $limit\r\n        sortBy: USD_PRICE_DESC\r\n    ) {\r\n        tokenSales {\r\n            id\r\n            token {\r\n                tokenId\r\n                name\r\n                media {\r\n                    url\r\n                }\r\n            }\r\n            price\r\n            priceUsd\r\n            date\r\n            saleDenomSymbol\r\n            saleType\r\n            buyer {\r\n                address\r\n            }\r\n            seller {\r\n                address\r\n            }\r\n        }\r\n    }\r\n}`;\r\n\r\nexport interface GetTokenSalesContent extends Content {\r\n    collectionAddr: string;\r\n    limit: number;\r\n}\r\n\r\nexport default {\r\n    name: \"GET_TOKEN_SALES\",\r\n    similes: [\"CHECK_SALES\", \"RECENT_SALES\"],\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"üîÑ Validating Stargaze configuration...\");\r\n        try {\r\n            const config = await validateStargazeConfig(runtime);\r\n            debugLog.validation(config);\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            return false;\r\n        }\r\n    },\r\n    description: \"Get recent sales data for a Stargaze collection\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        elizaLogger.log(\"üöÄ Starting Stargaze GET_TOKEN_SALES handler...\");\r\n\r\n        if (!state) {\r\n            elizaLogger.log(\"Creating new state...\");\r\n            state = (await runtime.composeState(message)) as State;\r\n        } else {\r\n            elizaLogger.log(\"Updating existing state...\");\r\n            state = await runtime.updateRecentMessageState(state);\r\n        }\r\n\r\n        try {\r\n            elizaLogger.log(\"Composing sales context...\");\r\n            const salesContext = composeContext({\r\n                state,\r\n                template: getTokenSalesTemplate,\r\n            });\r\n\r\n            elizaLogger.log(\"Generating content from context...\");\r\n            const content = (await generateObjectDeprecated({\r\n                runtime,\r\n                context: salesContext,\r\n                modelClass: ModelClass.LARGE,\r\n            })) as unknown as GetTokenSalesContent;\r\n\r\n            if (!content || !content.collectionAddr) {\r\n                throw new Error(\"Invalid or missing collection address in parsed content\");\r\n            }\r\n\r\n            debugLog.validation(content);\r\n\r\n            const config = await validateStargazeConfig(runtime);\r\n\r\n            const requestData = {\r\n                query: TOKEN_SALES_QUERY,\r\n                variables: {\r\n                    collectionAddr: content.collectionAddr,\r\n                    limit: content.limit || 5,\r\n                },\r\n            };\r\n\r\n            debugLog.request('POST', config.STARGAZE_ENDPOINT, requestData);\r\n\r\n            const response = await axios.post<TokenSalesResponse>(\r\n                config.STARGAZE_ENDPOINT,\r\n                requestData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                }\r\n            );\r\n\r\n            debugLog.response(response);\r\n\r\n            const sales = response.data?.data?.tokenSales?.tokenSales;\r\n            if (!sales?.length) {\r\n                throw new Error(\"No sales found for collection\");\r\n            }\r\n\r\n            // Format numeric values\r\n            const formatPrice = (price: number, symbol: string) =>\r\n                `${Number(price).toLocaleString(undefined, {\r\n                    maximumFractionDigits: 2\r\n                })} ${symbol}`;\r\n\r\n            // Format date to local string\r\n            const formatDate = (dateStr: string) => {\r\n                try {\r\n                    return new Date(dateStr).toLocaleString();\r\n                } catch (e) {\r\n                    return dateStr;\r\n                }\r\n            };\r\n\r\n            if (callback) {\r\n                const salesText = sales.map((sale: TokenSale) =>\r\n                    `‚Ä¢ ${sale.token.name} (ID: ${sale.token.tokenId})\r\n    Price: ${formatPrice(sale.price, sale.saleDenomSymbol)} ($${sale.priceUsd.toFixed(2)})\r\n    Date: ${formatDate(sale.date)}\r\n    Type: ${sale.saleType}\r\n    Seller: ${sale.seller.address}\r\n    Buyer: ${sale.buyer.address}`\r\n                ).join('\\n\\n');\r\n\r\n                callback({\r\n                    text: `Recent sales for ${content.collectionAddr}:\\n\\n${salesText}`,\r\n                    content: {\r\n                        collection: content.collectionAddr,\r\n                        sales: sales\r\n                    },\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            debugLog.error(error);\r\n            if (callback) {\r\n                callback({\r\n                    text: `Error fetching sales data: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n                    content: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    examples: [[\r\n        {\r\n            user: \"{{user1}}\",\r\n            content: {\r\n                text: \"Show me recent sales from collection ammelia\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"I'll check the recent sales for the ammelia collection...\",\r\n                action: \"GET_TOKEN_SALES\",\r\n            },\r\n        },\r\n        {\r\n            user: \"{{agent}}\",\r\n            content: {\r\n                text: \"Here are the recent sales data for ammelia collection:\\n‚Ä¢ NFT #123 - Sold for 100 STARS ($5.20)\\n‚Ä¢ NFT #124 - Sold for 95 STARS ($4.95)\",\r\n            },\r\n        }\r\n    ]],\r\n} as Action;","import { Plugin } from \"@elizaos/core\";\r\nimport getLatestNFT from \"./actions/getLatestNFT\";\r\nimport getCollectionStats from \"./actions/getCollectionStats\";\r\nimport getTokenSales from \"./actions/getTokenSales\";\r\n\r\nexport const stargazePlugin: Plugin = {\r\n    name: \"stargaze\",\r\n    description: \"Stargaze NFT Plugin for Eliza\",\r\n    actions: [\r\n        getLatestNFT,\r\n        getCollectionStats,\r\n        getTokenSales\r\n    ],\r\n    evaluators: [],\r\n    providers: [],\r\n};\r\n\r\nexport default stargazePlugin;"],"mappings":"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","names":["elizaLogger","elizaLogger","message","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","axios","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","axios","message","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","axios","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","axios"]}